{
  "openapi": "3.0.3",
  "info": {
    "title": "xCALLY MOTION API",
    "license": {
      "name": "XCally EULA",
      "url": "https://www.xcally.com/XCALLY-EULA.pdf"
    },
    "contact": {
      "name": "xCALLY Support",
      "url": "https://wiki.xcallymotion.com/display/XCAL/Support+Request",
      "email": "support@xcally.com"
    },
    "description": "## General API Description\n\nThis is the interactive documentation for the xCALLY MOTION API.\nWe make changes to the APIs from time to time. For more information, see [Changelog](https://wiki.xcallymotion.com/display/XMV/Motion+GUI).\nThe xCALLY MOTION API consists of several different API endpoints.\nThe API is a JSON API. XML is not supported. To learn more, see [Working with JSON](https://developer.zendesk.com/documentation/developer-tools/getting-started/working-with-json/).\n\nEndpoints are documented with the HTTP method for the request and a partial resource identifier.\nExample:\n\n```sh\nGET /api/users\n```\n\nPrepend your xCALLY URL to the resource identifier to get the full endpoint URL:\n\n```sh\nhttps://motion.xcally.com/api/users\n```\n\nCurly braces, `{}`, indicate values you have to supply. Example:\n\n```sh\nGET  /api/users/{id}\n```\n\nThe examples in the docs are cURL statements. You can run the statements on a command line to try out different API requests. To learn more, see [Installing and using cURL](https://developer.zendesk.com/documentation/developer-tools/getting-started/installing-and-using-curl/). In Windows, you'll need to modify some of the examples in the docs to make them work. See [Using cURL in Windows](https://developer.zendesk.com/documentation/developer-tools/getting-started/installing-and-using-curl/#using-curl-in-windows).\n\nThe examples use basic authentication requiring a xCALLY username and password.\n\n## Security and Authentication\n\nThis is an SSL-only API, regardless of how your account is configured. You can authorize against the API using either basic authentication with your username and password or with an OAuth access token or API Key.\nClient-side CORS requests are supported if the request is authenticated with an OAuth access token. The requests are not supported if the request uses basic authentication or API Key.\n\n### Basic authentication\n\nUse the following authentication format with your username and password:\n`{username}:{password}`\n\nExample:\n\n```sh\ncurl -u admin:password https://motion.xcally.com/api/users\n```\n\n### OAuth access token\n\nThe xCALLY API supports OAuth authorization flows.\nOAuth access tokens also permit client-side API requests.\nIn your requests, specify the access token in an Authorization header as follows:\n`Authorization: Bearer {token}`\n\nExample:\n\n```sh\ncurl -H \"Authorization: Bearer gErypPlm4dOVgGRvA1ZzMH5MQ3nLo8bo\" https://motion.xcally.com/api/users\n```\n\n### API Key\n\nAuthentication for requests using the API Key is supported through two distinct methods:\n\n- **Query Parameter**: append the API Key to the endpoint URL as the `apikey` query string parameter\n\nExample:\n\n```sh\ncurl https://motion.xcally.com/api/users?apikey=eyJhbGciOiJIUzUxMiIsInR5cC...\n```\n\n- **HTTP Header**: include the API Key in the `X-API-Key` HTTP header\n\nExample:\n\n```sh\ncurl -H \"X-API-Key: eyJhbGciOiJIUzUxMiIsInR5cC...\" https://motion.xcally.com/api/users\n```\n\n## Request Format\n\nThe xCALLY API is a JSON API. You must supply a `Content-Type: application/json` header in `PUT` and `POST` requests.\nYou must set an `Accept: application/json` header on all requests.\nYou may get a `text/plain` response for some error responses.\nYou should treat this as an error you need to fix.\n\n## Response Format\n\nThe xCALLY API responds to successful requests with HTTP status codes in the 200 or 300 range.\nWhen you create or update a resource, the API renders the resulting JSON representation in the response body.\nResponses may have the status codes described in the following sections.\n\n### 200 range\n\nThe request was successful. The HTTP status code is:\n\n- 200 for successful GET and PUT requests and some POST requests\n- 201 for most POST requests (especially those that create new items)\n- 204 for DELETE requests\n- 206 for partial contents (see Paging in the following section)\n\n### 400 range\n\nThe request was handled by the server but was not successful because of user-side errors.\nThe HTTP status code is:\n\n- 400 (Bad Request) request failed because of errors in the request format or data\n- 401 (Unauthorized) request failed because of wrong/expired user credentials\n- 403 (Forbidden) request failed because of insufficient user privileges\n- 404 (Not Found) request failed because the data does not exist in the database\n\nThe content type of the response may be `text/plain` for API-level error messages, such as when trying to call the API without SSL.\nThe content type is `application/json` for business-level error messages because the response includes a JSON object with information about the error.\n\nIf you see a response from a known endpoint that looks like plain text, you probably made a syntax error in your request. This type of response commonly occurs when making a request to a nonexistent xCALLY Support instance.\n\n### 500 range\n\nWhen building an API client, we recommend treating any 500 status codes as a warning or temporary state.\nHowever, if the status persists and we don't have a publicly announced maintenance or service disruption, contact us at [support@xcally.com](mailto:support@xcally.com).\n\nThe HTTP status code is:\n\n- 500 (Internal Server error) the requested was handled by motion, but caused an internal error (exception)\n- 502 (Bad Gateway) the requested was _not_ handled by motion because the server was down\n\nIf submitting a ticket to Support, provide the complete HTTP response. This helps the Support team track down the request in the logs more quickly.\n\n## Data Types\n\nThe API returns and accepts JSON values, which can be strings in double quotes, numbers, objects, arrays, true or false, or null. Most programming languages have tools to parse this data.\n\n## ID integers\n\nMost xCALLY Support resources such as queues and users are identified by the integer specified by the id attribute of API responses.\nThe default numeric type in JavaScript, Ruby, Python, and PHP is sufficient to represent xCALLY Support ID integers.\n\n## Time stamps\n\nTime stamps use UTC time and are formatted as ISO 8601 strings. Example: `2017-04-16T09:14:57Z`\n\n## Sorting and filtering results\n\nThis section describes how to generally read paged data when performing `GET` requests, and how to sort or filter data by attribute.\nThis section uses `/api/example/endpoint` as a fictious example endpoint, but the same rules apply to most API described in this documentation.\nSpecific examples may be included in each API endpoint description.\n\n### Paging\n\nFor most entity listing endpoints (`GET`), Motion will return paged results.\nPaged data include the `Content-Range` header in the form start - end / total.\nIf the whole data collection of the endpoint is included in the response, Motion will return a HTTP status code `200`, otherwise it will return a HTTP status code `206` Partial Content.\nThe number of returned items depends on filtering, offset and limit parameters (see below).\n\nMotion renders the resulting JSON representation in the response body.\n\n### Retrieving Specific Fields\n\nTo return only specific fields for a result set you can use the `fields` parameter. This parameter accepts a comma-separated list.\n\nExample: A call returning only `id` and `name` for a result set would look like this:\n\n`GET /api/example/endpoint?fields=id,name`\n\n### Filtering\n\nYou can perform exact-match filtering on any of an entity fields by using the field name as the key and supplying it with a value.\nThese parameters accept a comma-separated list.\n\nExample: A call returning a result set for records with `name` of `john.doe` or `jane.miller`.\n\n`GET /api/example/endpoint?name=john.doe,jane.miller`\n\nExample: If you use the key `filter` the result will be filtered by the value you specify:\n\n`GET /api/example/endpoint?filter=john`\n\n### Sorting\n\nTo sort a result set based on one or several fields you can use the `sort` parameter. This parameters accepts a comma-separated list.\nResults will be sorted in the order of the fields provided. The default sorting order for fields is ascending. Fields can be sorted in descending order by prefixing them with a dash (`-`).\n\nExample: A call sorting a result by `id` ascending and then `name` descending would look like this:\n\n`GET /api/example/endpoint?sort=id,-name`\n\n### Offset and Limit\n\nQuery results are always paged. Motion leverages the `offset` and `limit` parameters to facilitate this.\nWhen neither of these parameters are explicitly supplied the handler will assume the a default `limit` of `100`.\n`offset` is a number indicating the start position in the result set you want to return.\n`limit` is a number indicating how many records past the start position you want returned.\n\nExample: A call with a result set starting at `5` and returning no more than `25` records would look like this.\n\n`GET /api/example/endpoint?offset=5&limit=25`\n\nExample: If there were `50` records in total, the returned `Content-Range` header would look like this:\n\n`Content-Range: 5-30/50`\n",
    "version": "3.38.0"
  },
  "servers": [
    {
      "url": "https://zatanna.xcally.com/api",
      "description": "Current Server"
    },
    {
      "url": "http://localhost:9000/api",
      "description": "Localhost instance"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    },
    {
      "basicAuth": []
    },
    {
      "motionApiKey": []
    },
    {
      "googleId": []
    }
  ],
  "paths": {
    "/actions/{id}": {
      "put": {
        "summary": "Update an existing Action",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateActionById",
        "tags": [
          "Actions"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new action",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Action to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Action",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteActionById",
        "tags": [
          "Actions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Action to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/assistants": {
      "get": {
        "summary": "Gets a list of AI Prompts Assistants",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllAssistants",
        "tags": [
          "AI Prompts Assistants"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of AI Prompts Assistants",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AIPromptsAssistant"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of AI Prompts Assistants",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AIPromptsAssistant"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Create a new AI Prompts Assistant",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "create",
        "tags": [
          "AI Prompts Assistants"
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new AIPromptsAssistant",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/analytics/custom_reports": {
      "get": {
        "summary": "Gets a list of Analytic Custom Reports",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllAnalyticCustomReport",
        "tags": [
          "Analytic Custom Reports"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Analytic Custom Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AnalyticCustomReport"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Analytic Custom Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AnalyticCustomReport"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Analytic Custom Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createAnalyticCustomReport",
        "tags": [
          "Analytic Custom Reports"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new analyticCustomReport",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "parent": {
                    "type": "string"
                  },
                  "table": {
                    "type": "string"
                  },
                  "conditions": {
                    "type": "string"
                  },
                  "joins": {
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "AnalyticCustomReport successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalyticCustomReport"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/analytics/custom_reports/{id}": {
      "get": {
        "summary": "Gets a single Analytic Custom Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getAnalyticCustomReportById",
        "tags": [
          "Analytic Custom Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the AnalyticCustomReport to get"
          }
        ],
        "responses": {
          "200": {
            "description": "AnalyticCustomReport with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalyticCustomReport"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Analytic Custom Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateAnalyticCustomReportById",
        "tags": [
          "Analytic Custom Reports"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new analyticCustomReport",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the AnalyticCustomReport to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Analytic Custom Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteAnalyticCustomReportById",
        "tags": [
          "Analytic Custom Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the AnalyticCustomReport to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/analytics/custom_reports/{id}/preview": {
      "get": {
        "summary": "Report Preview",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "preview",
        "tags": [
          "Analytic Custom Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the AnalyticCustomReport"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/analytics/custom_reports/{id}/run": {
      "get": {
        "summary": "Report Run",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "run",
        "tags": [
          "Analytic Custom Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the AnalyticCustomReport"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/analytics/custom_reports/{id}/query": {
      "get": {
        "summary": "Report Query SQL",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "query",
        "tags": [
          "Analytic Custom Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the AnalyticCustomReport"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/analytics/default_reports": {
      "get": {
        "summary": "Gets a list of Analytic Default Reports",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllAnalyticDefaultReport",
        "tags": [
          "Analytic Default Reports"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Analytic Default Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AnalyticDefaultReport"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Analytic Default Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AnalyticDefaultReport"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Analytic Default Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createAnalyticDefaultReport",
        "tags": [
          "Analytic Default Reports"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new analyticDefaultReport",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "parent": {
                    "type": "string"
                  },
                  "table": {
                    "type": "string"
                  },
                  "conditions": {
                    "type": "string"
                  },
                  "joins": {
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "AnalyticDefaultReport successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalyticDefaultReport"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/analytics/default_reports/{id}": {
      "get": {
        "summary": "Gets a single Analytic Default Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getAnalyticDefaultReportById",
        "tags": [
          "Analytic Default Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the AnalyticDefaultReport to get"
          }
        ],
        "responses": {
          "200": {
            "description": "AnalyticDefaultReport with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalyticDefaultReport"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Analytic Default Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateAnalyticDefaultReportById",
        "tags": [
          "Analytic Default Reports"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new analyticDefaultReport",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the AnalyticDefaultReport to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Analytic Default Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteAnalyticDefaultReportById",
        "tags": [
          "Analytic Default Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the AnalyticDefaultReport to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/analytics/default_reports/{id}/preview": {
      "get": {
        "summary": "Report Preview",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "preview",
        "tags": [
          "Analytic Default Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the AnalyticDefaultReport"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/analytics/default_reports/{id}/run": {
      "get": {
        "summary": "Report Run",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "run",
        "tags": [
          "Analytic Default Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the AnalyticDefaultReport"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/analytics/default_reports/{id}/query": {
      "get": {
        "summary": "Report Query SQL",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "query",
        "tags": [
          "Analytic Default Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the AnalyticDefaultReport"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/analytics/extracted_reports": {
      "get": {
        "summary": "Gets a list of Analytic Extacted Reports",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllAnalyticExtractedReport",
        "tags": [
          "Analytic Extracted Reports"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Analytic Extacted Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AnalyticExtractedReport"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Analytic Extacted Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AnalyticExtractedReport"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Analytic Extracted Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createAnalyticExtractedReport",
        "tags": [
          "Analytic Extracted Reports"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new analyticExtractedReport",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "basename": {
                    "type": "string"
                  },
                  "output": {
                    "type": "string",
                    "enum": [
                      "csv",
                      "pdf",
                      "xlsx"
                    ],
                    "default": "csv"
                  },
                  "savename": {
                    "type": "string"
                  },
                  "startDate": {
                    "type": "string"
                  },
                  "endDate": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "manual",
                      "scheduled"
                    ],
                    "default": "manual"
                  },
                  "reportId": {
                    "type": "integer"
                  },
                  "reportType": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "basename",
                  "output",
                  "savename",
                  "type"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "AnalyticExtractedReport successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalyticExtractedReport"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/analytics/extracted_reports/{id}": {
      "get": {
        "summary": "Gets a single Analytic Extracted Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getAnalyticExtractedReportById",
        "tags": [
          "Analytic Extracted Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the AnalyticExtractedReport to get"
          }
        ],
        "responses": {
          "200": {
            "description": "AnalyticExtractedReport with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalyticExtractedReport"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Analytic Extracted Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateAnalyticExtractedReportById",
        "tags": [
          "Analytic Extracted Reports"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new analyticExtractedReport",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the AnalyticExtractedReport to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Analytic Extracted Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteAnalyticExtractedReportById",
        "tags": [
          "Analytic Extracted Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the AnalyticExtractedReport to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/analytics/extracted_reports/{id}/download": {
      "get": {
        "summary": "Download Extracted Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "download",
        "tags": [
          "Analytic Extracted Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the AnalyticExtractedReport"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/analytics/field_reports": {
      "get": {
        "summary": "Gets a list of Analytic Field Reports",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllAnalyticFieldReport",
        "tags": [
          "Analytic Field Reports"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Analytic Field Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AnalyticFieldReport"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Analytic Field Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AnalyticFieldReport"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Analytic Field Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createAnalyticFieldReport",
        "tags": [
          "Analytic Field Reports"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new analyticFieldReport",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "field": {
                    "type": "string"
                  },
                  "alias": {
                    "type": "string"
                  },
                  "function": {
                    "type": "string"
                  },
                  "format": {
                    "type": "string"
                  },
                  "groupBy": {
                    "type": "boolean"
                  },
                  "orderBy": {
                    "type": "string"
                  },
                  "custom": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "AnalyticFieldReport successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalyticFieldReport"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/analytics/field_reports/{id}": {
      "get": {
        "summary": "Gets a single Analytic Field Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getAnalyticFieldReportById",
        "tags": [
          "Analytic Field Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the AnalyticFieldReport to get"
          }
        ],
        "responses": {
          "200": {
            "description": "AnalyticFieldReport with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalyticFieldReport"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Analytic Field Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateAnalyticFieldReportById",
        "tags": [
          "Analytic Field Reports"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new analyticFieldReport",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the AnalyticFieldReport to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Analytic Field Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteAnalyticFieldReportById",
        "tags": [
          "Analytic Field Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the AnalyticFieldReport to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/analytics/field_reports/create_many": {
      "post": {
        "summary": "Creates many Analytic Field Reports",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createManyAnalyticFieldReport",
        "tags": [
          "Analytic Field Reports"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new analyticFieldReport",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "field": {
                    "type": "string"
                  },
                  "alias": {
                    "type": "string"
                  },
                  "function": {
                    "type": "string"
                  },
                  "format": {
                    "type": "string"
                  },
                  "groupBy": {
                    "type": "boolean"
                  },
                  "orderBy": {
                    "type": "string"
                  },
                  "custom": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/analytics/field_reports/{id}/create_many": {
      "post": {
        "summary": "Rewrite fields set",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addFields",
        "tags": [
          "Analytic Field Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the AnalyticFieldReport"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new analyticFieldReport",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/analytics/field_reports/destroy_many": {
      "delete": {
        "summary": "Deletes many Analytic Field Reports",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteAnalyticFieldReport",
        "tags": [
          "Analytic Field Reports"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ids",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric ids of the AnalyticFieldReport to be deleted, as a comma-separated list. E.g. `ids=1,2,3` deletes elements with id = 1, 2 and 3"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/analytics/metrics": {
      "get": {
        "summary": "Gets a list of Analytic Metric",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllAnalyticMetric",
        "tags": [
          "Analytic Metrics"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Analytic Metric",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AnalyticMetric"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Analytic Metric",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AnalyticMetric"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Analytic Metrics",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createAnalyticMetric",
        "tags": [
          "Analytic Metrics"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new analyticMetric",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "table": {
                    "type": "string"
                  },
                  "metric": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "AnalyticMetric successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalyticMetric"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/analytics/metrics/{id}": {
      "get": {
        "summary": "Gets a single Analytic Metrics",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getAnalyticMetricById",
        "tags": [
          "Analytic Metrics"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the AnalyticMetric to get"
          }
        ],
        "responses": {
          "200": {
            "description": "AnalyticMetric with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalyticMetric"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Analytic Metrics",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateAnalyticMetricById",
        "tags": [
          "Analytic Metrics"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new analyticMetric",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the AnalyticMetric to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Analytic Metrics",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteAnalyticMetricById",
        "tags": [
          "Analytic Metrics"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the AnalyticMetric to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/analytics/tree_reports": {
      "get": {
        "summary": "Gets a list of Analytic Tree Reports",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllAnalyticTreeReport",
        "tags": [
          "Analytic Tree Reports"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Analytic Tree Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AnalyticTreeReport"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Analytic Tree Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AnalyticTreeReport"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Analytic Tree Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createAnalyticTreeReport",
        "tags": [
          "Analytic Tree Reports"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new analyticTreeReport",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tree": {
                    "type": "string"
                  }
                },
                "required": [
                  "tree"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "AnalyticTreeReport successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalyticTreeReport"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/analytics/tree_reports/{id}": {
      "get": {
        "summary": "Gets a single Analytic Tree Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getAnalyticTreeReportById",
        "tags": [
          "Analytic Tree Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the AnalyticTreeReport to get"
          }
        ],
        "responses": {
          "200": {
            "description": "AnalyticTreeReport with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalyticTreeReport"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Analytic Tree Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateAnalyticTreeReportById",
        "tags": [
          "Analytic Tree Reports"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new analyticTreeReport",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the AnalyticTreeReport to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Analytic Tree Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteAnalyticTreeReportById",
        "tags": [
          "Analytic Tree Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the AnalyticTreeReport to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/attachments": {
      "get": {
        "summary": "Gets a list of Attachments",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllAttachment",
        "tags": [
          "Attachments"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Attachments",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Attachment"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Attachments",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Attachment"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add attachment",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "postcreate",
        "tags": [
          "Attachments"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new attachment",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "success."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/attachments/{id}": {
      "get": {
        "summary": "Gets a single Attachment",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getAttachmentById",
        "tags": [
          "Attachments"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Attachment to get"
          }
        ],
        "responses": {
          "200": {
            "description": "Attachment with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Attachment"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Attachment",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateAttachmentById",
        "tags": [
          "Attachments"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new attachment",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Attachment to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Attachment",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteAttachmentById",
        "tags": [
          "Attachments"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Attachment to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/attachments/{id}/download": {
      "get": {
        "summary": "Download attachment",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "download",
        "tags": [
          "Attachments"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Attachment"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/attachments/download-with-token": {
      "get": {
        "summary": "Download a single attachment with the given token",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "downloadWithToken",
        "tags": [
          "Attachments"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "download-token",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Token to download a file; issued by various services"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/attachments/clone": {
      "post": {
        "summary": "Clone an existing Attachment",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "cloneAttachment",
        "tags": [
          "Attachments"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new attachment",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Attachment successfully cloned. Returns the cloned object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Attachment"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/attachments/{id}/convert": {
      "post": {
        "summary": "Convert an existing Attachment",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "cloneAttachment",
        "tags": [
          "Attachments"
        ],
        "requestBody": {
          "required": true,
          "description": "data for converting an existing Attachment. Currently only works with audio files; uses ffmpeg under the hood",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "to": {
                    "type": "string",
                    "description": "File format this file should be converted to"
                  },
                  "type": {
                    "type": "string",
                    "description": "mime type this file should be converted to"
                  },
                  "additionalOptions": {
                    "type": "object",
                    "description": "key value pairs of instructions which can be passed to ffmpeg. Currently supporting \"acodec\" and \"strict\""
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Attachment successfully converted. Returns the converted object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Attachment"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/auth/activedirectory": {
      "post": {
        "summary": "Creates a new User token using Google login",
        "operationId": "activedirectoryLogin",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new authActiveDirectory",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "password"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "login success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "description": "user id"
                    },
                    "statusCall": {
                      "type": "string",
                      "description": "user call status"
                    },
                    "token": {
                      "type": "string",
                      "description": "jwt for authenticated calls"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/auth/google": {
      "post": {
        "summary": "Creates a new User token using Google login",
        "operationId": "googleLogin",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new authGoogle",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "password"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "login success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "description": "user id"
                    },
                    "statusCall": {
                      "type": "string",
                      "description": "user call status"
                    },
                    "token": {
                      "type": "string",
                      "description": "jwt for authenticated calls"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/auth/local": {
      "post": {
        "summary": "Creates a new User token",
        "operationId": "localLogin",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new authLocal",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "password"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "login success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "description": "user id"
                    },
                    "statusCall": {
                      "type": "string",
                      "description": "user call status"
                    },
                    "token": {
                      "type": "string",
                      "description": "jwt for authenticated calls"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/auth/local/forgot": {
      "post": {
        "summary": "Creates a new password reset token",
        "operationId": "localForgotPassword",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new authLocal",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  }
                },
                "required": [
                  "email"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "password reset token successfully issued"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/auth/local/reset/{token}": {
      "post": {
        "summary": "Reset user password",
        "operationId": "localResetPassword",
        "tags": [
          "Authentication"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "token",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "token issued by `/auth/local/forgot`"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new authLocal",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "password": {
                    "type": "string"
                  }
                },
                "required": [
                  "password"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "password reset success"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/automations": {
      "get": {
        "summary": "Gets a list of Automations",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllAutomation",
        "tags": [
          "Automations"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Automations",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Automation"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Automations",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Automation"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Automation",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createAutomation",
        "tags": [
          "Automations"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new automation",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "channel": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "status": {
                    "type": "boolean"
                  },
                  "timeout": {
                    "type": "integer"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Automation successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Automation"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/automations/{id}": {
      "get": {
        "summary": "Gets a single Automation",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getAutomationById",
        "tags": [
          "Automations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Automation to get"
          }
        ],
        "responses": {
          "200": {
            "description": "Automation with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Automation"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Automation",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateAutomationById",
        "tags": [
          "Automations"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new automation",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Automation to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Automation",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteAutomationById",
        "tags": [
          "Automations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Automation to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/automations/{id}/conditions": {
      "get": {
        "summary": "Gets Automation Conditions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getConditions",
        "tags": [
          "Automations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Automation"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates new conditions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addConditions",
        "tags": [
          "Automations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Automation"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new automation",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "channel": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "status": {
                    "type": "boolean"
                  },
                  "timeout": {
                    "type": "integer"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        }
      }
    },
    "/automations/{id}/actions": {
      "get": {
        "summary": "Gets Automation Actions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getActions",
        "tags": [
          "Automations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Automation"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates new actions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addActions",
        "tags": [
          "Automations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Automation"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new automation",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "channel": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "status": {
                    "type": "boolean"
                  },
                  "timeout": {
                    "type": "integer"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        }
      }
    },
    "/campaign_groups": {
      "get": {
        "summary": "Gets a list of Campaign Groups",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllCampaignGroups",
        "tags": [
          "Campaign Groups"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Campaigns Groups",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CampaignGroup"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Campaign Groups",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CampaignGroup"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Campaign Group",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createCampaignGroup",
        "tags": [
          "Campaigns Groups"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new campaign group",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "dialingMethod": {
                    "type": "string",
                    "enum": [
                      "progressive",
                      "power",
                      "predictive"
                    ],
                    "default": "progressive"
                  },
                  "dialingParameters": {
                    "type": "application/json"
                  },
                  "enabled": {
                    "type": "boolean"
                  },
                  "description": {
                    "type": "string"
                  },
                  "IntervalId": {
                    "type": "integer"
                  }
                },
                "required": [
                  "name",
                  "dialingMethod",
                  "IntervalId"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Campaign group successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignGroup"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/campaign_groups/{id}": {
      "get": {
        "summary": "Gets a single Campaign Group",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getCampaignGroupById",
        "tags": [
          "Campaign Groups"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Campaign group to get"
          }
        ],
        "responses": {
          "200": {
            "description": "Campaign group with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignGroup"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Campaign Group",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateCampaignGroupById",
        "tags": [
          "Campaign Groups"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new campaign group",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "dialingMethod": {
                    "type": "string",
                    "enum": [
                      "progressive",
                      "power",
                      "predictive"
                    ],
                    "default": "progressive"
                  },
                  "dialingParameters": {
                    "type": "application/json"
                  },
                  "enabled": {
                    "type": "boolean"
                  },
                  "description": {
                    "type": "string"
                  },
                  "IntervalId": {
                    "type": "integer"
                  }
                },
                "required": [
                  "name",
                  "dialingMethod",
                  "IntervalId"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Campaign group to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Campaign group",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteCampaignGroupById",
        "tags": [
          "Campaigns groups"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Campaign group to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/campaign-groups/{id}/add-voice-queues-old": {
      "post": {
        "summary": "Adds a Campaign Group to specified voice_queues",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addVoiceQueuesCampaignGroup",
        "tags": [
          "AddVoiceQueuesToCampaignGroup"
        ],
        "requestBody": {
          "required": true,
          "description": "data for adding a campaign group to voice queues",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "voiceQueues": {
                    "type": "array[integer]"
                  }
                },
                "required": [
                  "voiceQueues"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Operation successfully completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignGroup"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/campaign-groups/{id}/add-voice-queues": {
      "post": {
        "summary": "Adds a Campaign Group to specified voice_queues with quantity and priority",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addVoiceQueuesWithValuesCampaignGroup",
        "tags": [
          "AddVoiceQueuesWithValuesToCampaignGroup"
        ],
        "requestBody": {
          "required": true,
          "description": "data for adding a campaign group to voice queues",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "voiceQueues": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "VoiceQueueId": {
                          "type": "number"
                        },
                        "quantity": {
                          "type": "number"
                        },
                        "priority": {
                          "type": "number"
                        }
                      }
                    }
                  }
                },
                "required": [
                  "voiceQueues"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Operation successfully completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignGroup"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/campaign-groups/{id}/remove-voice-queues": {
      "post": {
        "summary": "Removes a Campaign Group from specified voice_queues",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeVoiceQueuesCampaignGroup",
        "tags": [
          "RemoveVoiceQueuesToCampaignGroup"
        ],
        "requestBody": {
          "required": true,
          "description": "data for removing a campaign group from voice queues",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "voiceQueues": {
                    "type": "array[integer]"
                  }
                },
                "required": [
                  "voiceQueues"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Operation successfully completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignGroup"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/campaign-groups/{id}/add-users": {
      "post": {
        "summary": "Adds specified users to a Campaign Group",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addUsersCampaignGroup",
        "tags": [
          "AddUsersToCampaignGroup"
        ],
        "requestBody": {
          "required": true,
          "description": "data for adding specified users to campaign group",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "users": {
                    "type": "array[integer]"
                  }
                },
                "required": [
                  "users"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Operation successfully completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignGroup"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/campaign-groups/{id}/remove-users": {
      "post": {
        "summary": "Removes specified users from a Campaign Group",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeUsersCampaignGroup",
        "tags": [
          "RemoveUsersToCampaignGroup"
        ],
        "requestBody": {
          "required": true,
          "description": "data for removing specified users from a campaign group",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "teams": {
                    "type": "array[integer]"
                  }
                },
                "required": [
                  "users"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Operation successfully completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignGroup"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/campaign-groups/{id}/add-teams": {
      "post": {
        "summary": "Adds specified teams to a Campaign Group",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addTeamsCampaignGroup",
        "tags": [
          "AddTeamsToCampaignGroup"
        ],
        "requestBody": {
          "required": true,
          "description": "data for adding specified teams to campaign group",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "teams": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "TeamId": {
                          "type": "number"
                        },
                        "penalty": {
                          "type": "number"
                        }
                      }
                    }
                  }
                },
                "required": [
                  "teams"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Operation successfully completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignGroup"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/campaign-groups/{id}/remove-teams": {
      "post": {
        "summary": "Removes specified teams from a Campaign Group",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeTeamsCampaignGroup",
        "tags": [
          "RemoveTeamsToCampaignGroup"
        ],
        "requestBody": {
          "required": true,
          "description": "data for removing specified teams from a campaign group",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "teams": {
                    "type": "array[integer]"
                  }
                },
                "required": [
                  "teams"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Operation successfully completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignGroup"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/campaign_groups/realtime": {
      "get": {
        "summary": "Shows realtime values",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getRealtime",
        "tags": [
          "Campaign Groups realtime"
        ],
        "responses": {
          "200": {
            "description": "Campaign group with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignGroup"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/campaign_groups/{id}/dialing-sets": {
      "get": {
        "summary": "Shows related dialing set history",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getRealtime",
        "tags": [
          "Campaign Groups dialing sets"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Campaign group to get"
          }
        ],
        "responses": {
          "200": {
            "description": "Campaign group with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignGroup"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/campaigns": {
      "get": {
        "summary": "Gets a list of IVR Campaigns",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllCampaign",
        "tags": [
          "IVR Campaigns"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of IVR Campaigns",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Campaign"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of IVR Campaigns",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Campaign"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new IVR Campaign",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createCampaign",
        "tags": [
          "IVR Campaigns"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new campaign",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "ivr"
                    ],
                    "default": "ivr"
                  },
                  "description": {
                    "type": "string"
                  },
                  "active": {
                    "type": "boolean"
                  },
                  "limitCalls": {
                    "type": "integer"
                  },
                  "dialOriginateCallerIdName": {
                    "type": "string"
                  },
                  "dialOriginateCallerIdNumber": {
                    "type": "string"
                  },
                  "dialOriginateTimeout": {
                    "type": "integer"
                  },
                  "dialCongestionMaxRetry": {
                    "type": "integer"
                  },
                  "dialCongestionRetryFrequency": {
                    "type": "integer"
                  },
                  "dialBusyMaxRetry": {
                    "type": "integer"
                  },
                  "dialBusyRetryFrequency": {
                    "type": "integer"
                  },
                  "dialNoAnswerMaxRetry": {
                    "type": "integer"
                  },
                  "dialNoAnswerRetryFrequency": {
                    "type": "integer"
                  },
                  "dialGlobalMaxRetry": {
                    "type": "integer"
                  },
                  "dialTimezone": {
                    "type": "string"
                  },
                  "dialGlobalInterval": {
                    "type": "string"
                  },
                  "dialCheckDuplicateType": {
                    "type": "string",
                    "enum": [
                      "always",
                      "never",
                      "onlyIfOpen"
                    ],
                    "default": "always"
                  },
                  "dialAMDActive": {
                    "type": "boolean"
                  },
                  "dialAMDInitialSilence": {
                    "type": "integer"
                  },
                  "dialAMDGreeting": {
                    "type": "integer"
                  },
                  "dialAMDAfterGreetingSilence": {
                    "type": "integer"
                  },
                  "dialAMDTotalAnalysisTime": {
                    "type": "integer"
                  },
                  "dialAMDMinWordLength": {
                    "type": "integer"
                  },
                  "dialAMDBetweenWordsSilence": {
                    "type": "integer"
                  },
                  "dialAMDMaximumNumberOfWords": {
                    "type": "integer"
                  },
                  "dialAMDSilenceThreshold": {
                    "type": "integer"
                  },
                  "dialAMDMaximumWordLength": {
                    "type": "integer"
                  },
                  "dialOrderByScheduledAt": {
                    "type": "string",
                    "enum": [
                      "DESC",
                      "ASC"
                    ],
                    "default": "DESC"
                  },
                  "dialPrefix": {
                    "type": "string"
                  },
                  "dialRandomLastDigitCallerIdNumber": {
                    "type": "integer"
                  },
                  "dialCutDigit": {
                    "type": "integer"
                  },
                  "dialNoSuchNumberMaxRetry": {
                    "type": "integer"
                  },
                  "dialNoSuchNumberRetryFrequency": {
                    "type": "integer"
                  },
                  "dialDropMaxRetry": {
                    "type": "integer"
                  },
                  "dialDropRetryFrequency": {
                    "type": "integer"
                  },
                  "dialAbandonedMaxRetry": {
                    "type": "integer"
                  },
                  "dialAbandonedRetryFrequency": {
                    "type": "integer"
                  },
                  "dialMachineMaxRetry": {
                    "type": "integer"
                  },
                  "dialMachineRetryFrequency": {
                    "type": "integer"
                  },
                  "dialAgentRejectMaxRetry": {
                    "type": "integer"
                  },
                  "dialAgentRejectRetryFrequency": {
                    "type": "integer"
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Campaign successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Campaign"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/campaigns/{id}": {
      "get": {
        "summary": "Gets a single IVR Campaign",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getCampaignById",
        "tags": [
          "IVR Campaigns"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Campaign to get"
          }
        ],
        "responses": {
          "200": {
            "description": "Campaign with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Campaign"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing IVR Campaign",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateCampaignById",
        "tags": [
          "IVR Campaigns"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new campaign",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Campaign to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing IVR Campaign",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteCampaignById",
        "tags": [
          "IVR Campaigns"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Campaign to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/campaigns/{id}/hoppers": {
      "get": {
        "summary": "Gets IVR campaign hoppers",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getHoppers",
        "tags": [
          "IVR Campaigns"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Campaign"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/campaigns/{id}/hopper_histories": {
      "get": {
        "summary": "Gets IVR campaign hopper histories",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getHopperHistories",
        "tags": [
          "IVR Campaigns"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Campaign"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/campaigns/{id}/hopper_finals": {
      "get": {
        "summary": "Gets IVR campaign hopper finals",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getHopperFinals",
        "tags": [
          "IVR Campaigns"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Campaign"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/campaigns/{id}/hopper_black": {
      "get": {
        "summary": "Gets IVR campaign hopper blacks",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getHopperBlacks",
        "tags": [
          "IVR Campaigns"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Campaign"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/campaigns/{id}/lists": {
      "get": {
        "summary": "Get IVR campaign lists",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getLists",
        "tags": [
          "IVR Campaigns"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Campaign"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add lists to an IVR campaign",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addLists",
        "tags": [
          "IVR Campaigns"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Campaign"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new campaign",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Remove lists from an IVR Campaign",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeLists",
        "tags": [
          "IVR Campaigns"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Campaign"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/campaigns/{id}/blacklists": {
      "get": {
        "summary": "Get IVR campaign blacklists",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getBlackLists",
        "tags": [
          "IVR Campaigns"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Campaign"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add blacklists to an IVR campaign",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addBlackLists",
        "tags": [
          "IVR Campaigns"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Campaign"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new campaign",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Remove blacklists from an IVR Campaign",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeBlackLists",
        "tags": [
          "IVR Campaigns"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Campaign"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/campaigns/clone": {
      "post": {
        "summary": "Clone an existing IVR Campaign",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "cloneCampaign",
        "tags": [
          "IVR Campaigns"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new campaign",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Campaign successfully cloned. Returns the cloned object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Campaign"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/canned_answers": {
      "get": {
        "summary": "Gets a list of Canned Answers",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllCannedAnswer",
        "tags": [
          "Canned Answers"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Canned Answers",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CannedAnswer"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Canned Answers",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CannedAnswer"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Create a new canned answer",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "create",
        "tags": [
          "Canned Answers"
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new cannedAnswer",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/canned_answers/{id}": {
      "get": {
        "summary": "Gets a single Canned Answer",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getCannedAnswerById",
        "tags": [
          "Canned Answers"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CannedAnswer to get"
          }
        ],
        "responses": {
          "200": {
            "description": "CannedAnswer with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CannedAnswer"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Canned Answer",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateCannedAnswerById",
        "tags": [
          "Canned Answers"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new cannedAnswer",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CannedAnswer to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Canned Answer",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteCannedAnswerById",
        "tags": [
          "Canned Answers"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CannedAnswer to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/canned_answers/{id}/preview": {
      "post": {
        "summary": "Renders a single Canned Answer with the payload provided",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getCannedAnswerById",
        "tags": [
          "Canned Answers"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CannedAnswer to render"
          },
          {
            "in": "body",
            "name": "payload",
            "schema": {
              "type": "object"
            },
            "required": true,
            "description": "The payload to render this canned answer with"
          }
        ],
        "responses": {
          "200": {
            "description": "The canned answer, exactly the way it would be sent",
            "content": {
              "application/json": {
                "schema": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "body": "string",
                        "subject": "strings"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/cdr": {
      "get": {
        "summary": "Gets a list of Cdrs",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllCdr",
        "tags": [
          "cdr"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Cdrs",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Cdr"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Cdrs",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Cdr"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Cdr",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createCdr",
        "tags": [
          "cdr"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new cdr",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "calldate": {
                    "type": "string"
                  },
                  "clid": {
                    "type": "string"
                  },
                  "src": {
                    "type": "string"
                  },
                  "dst": {
                    "type": "string"
                  },
                  "dcontext": {
                    "type": "string"
                  },
                  "channel": {
                    "type": "string"
                  },
                  "dstchannel": {
                    "type": "string"
                  },
                  "lastapp": {
                    "type": "string"
                  },
                  "lastdata": {
                    "type": "string"
                  },
                  "duration": {
                    "type": "integer"
                  },
                  "billsec": {
                    "type": "integer"
                  },
                  "disposition": {
                    "type": "string"
                  },
                  "amaflags": {
                    "type": "integer"
                  },
                  "accountcode": {
                    "type": "string"
                  },
                  "userfield": {
                    "type": "string"
                  },
                  "uniqueid": {
                    "type": "string"
                  },
                  "linkedid": {
                    "type": "string"
                  },
                  "sequence": {
                    "type": "string"
                  },
                  "peeraccount": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "tag": {
                    "type": "string"
                  }
                },
                "required": [
                  "calldate",
                  "duration",
                  "billsec",
                  "amaflags"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Cdr successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cdr"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/cdr/describe": {
      "get": {
        "summary": "Gets table info about Cdrs",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeCdr",
        "tags": [
          "cdr"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/cdr/{id}": {
      "get": {
        "summary": "Gets a single Cdr",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getCdrById",
        "tags": [
          "cdr"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Cdr to get"
          }
        ],
        "responses": {
          "200": {
            "description": "Cdr with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cdr"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Cdr",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateCdrById",
        "tags": [
          "cdr"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new cdr",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Cdr to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Cdr",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteCdrById",
        "tags": [
          "cdr"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Cdr to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/chat/applications/{id}": {
      "get": {
        "summary": "Gets a single Application",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getChatApplicationById",
        "tags": [
          "Chat Applications"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatApplication to get"
          }
        ],
        "responses": {
          "200": {
            "description": "ChatApplication with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatApplication"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Application",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateChatApplicationById",
        "tags": [
          "Chat Applications"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new chatApplication",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatApplication to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Application",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteChatApplicationById",
        "tags": [
          "Chat Applications"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatApplication to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/chat/groups": {
      "get": {
        "summary": "Gets a list of Groups",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllChatGroup",
        "tags": [
          "Chat Groups"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Groups",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChatGroup"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Groups",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChatGroup"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Group",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createChatGroup",
        "tags": [
          "Chat Groups"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new chatGroup",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "write": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "ChatGroup successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatGroup"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/chat/groups/describe": {
      "get": {
        "summary": "Gets table info about Groups",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeChatGroup",
        "tags": [
          "Chat Groups"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/chat/groups/{id}": {
      "get": {
        "summary": "Gets a single Group",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getChatGroupById",
        "tags": [
          "Chat Groups"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatGroup to get"
          }
        ],
        "responses": {
          "200": {
            "description": "ChatGroup with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatGroup"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Group",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateChatGroupById",
        "tags": [
          "Chat Groups"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new chatGroup",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatGroup to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Group",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteChatGroupById",
        "tags": [
          "Chat Groups"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatGroup to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/chat/groups/{id}/unread": {
      "get": {
        "summary": "Get unread chat group messages",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getUnread",
        "tags": [
          "Chat Groups"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatGroup"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/chat/groups/{id}/members": {
      "get": {
        "summary": "Gets Members",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getMembers",
        "tags": [
          "Chat Groups"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatGroup"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add members to chat group",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addMembers",
        "tags": [
          "Chat Groups"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatGroup"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new chatGroup",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Removes members from a group",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeMembers",
        "tags": [
          "Chat Groups"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatGroup"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/chat/groups/{id}/messages": {
      "get": {
        "summary": "Gets Messages",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getMessages",
        "tags": [
          "Chat Groups"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatGroup"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new group message",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addMessage",
        "tags": [
          "Chat Groups"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatGroup"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new chatGroup",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/chat/interactions": {
      "get": {
        "summary": "Gets a list of Interactions",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllChatInteraction",
        "tags": [
          "Chat Interactions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Interactions",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChatInteraction"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Interactions",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChatInteraction"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Interaction",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createChatInteraction",
        "tags": [
          "Chat Interactions"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new chatInteraction",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "closed": {
                    "type": "boolean"
                  },
                  "ratingValue": {
                    "type": "integer"
                  },
                  "ratingType": {
                    "type": "string",
                    "enum": [
                      "star",
                      "thumb"
                    ],
                    "default": "star"
                  },
                  "ratingMessage": {
                    "type": "string"
                  },
                  "pathTranscript": {
                    "type": "string"
                  },
                  "mailTranscript": {
                    "type": "string"
                  },
                  "closedAt": {
                    "type": "string"
                  },
                  "disposition": {
                    "type": "string"
                  },
                  "secondDisposition": {
                    "type": "string"
                  },
                  "thirdDisposition": {
                    "type": "string"
                  },
                  "note": {
                    "type": "string"
                  },
                  "browserName": {
                    "type": "string"
                  },
                  "browserVersion": {
                    "type": "string"
                  },
                  "osName": {
                    "type": "string"
                  },
                  "osVersion": {
                    "type": "string"
                  },
                  "deviceModel": {
                    "type": "string"
                  },
                  "deviceVendor": {
                    "type": "string"
                  },
                  "deviceType": {
                    "type": "string"
                  },
                  "referer": {
                    "type": "string"
                  },
                  "customerIp": {
                    "type": "string"
                  },
                  "formData": {
                    "type": "string"
                  },
                  "read1stAt": {
                    "type": "string"
                  },
                  "lastMsgAt": {
                    "type": "string"
                  },
                  "lastMsgDirection": {
                    "type": "string",
                    "enum": [
                      "in",
                      "out"
                    ],
                    "default": "in"
                  },
                  "closeReason": {
                    "type": "string"
                  },
                  "customerPort": {
                    "type": "string"
                  },
                  "vidaooSessionId": {
                    "type": "string"
                  },
                  "autoreplyExecuted": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "lastMsgDirection"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "ChatInteraction successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatInteraction"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/chat/interactions/describe": {
      "get": {
        "summary": "Gets table info about Interactions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeChatInteraction",
        "tags": [
          "Chat Interactions"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/chat/interactions/counters": {
      "get": {
        "summary": "Gets counters info about Interactions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "tags": [
          "Chat Interactions"
        ],
        "operationId": "countChatInteraction",
        "parameters": [
          {
            "in": "query",
            "name": "ChatWebsiteId",
            "schema": {
              "type": "integer"
            },
            "description": "Filter by ChatWebsiteId"
          },
          {
            "in": "query",
            "name": "createdAt.gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "This stands for 'greater or equal'. It select all the records created after the date specified.",
            "example": "2022-01-01-T00:00:00Z"
          },
          {
            "in": "query",
            "name": "createdAt.lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "This stands for 'less or equal'. It select all the records created before the date specified.",
            "example": "2022-01-01-T00:00:00Z"
          }
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve counters informations grouped by ChatWebsiteId",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "results count",
                      "default": 0
                    },
                    "rows": {
                      "description": "ChatInteraction counters",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Counter"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/chat/interactions/{id}": {
      "get": {
        "summary": "Gets a single Interaction",
        "operationId": "getChatInteractionById",
        "tags": [
          "Chat Interactions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatInteraction to get"
          }
        ],
        "responses": {
          "200": {
            "description": "ChatInteraction with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatInteraction"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Interaction",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateChatInteractionById",
        "tags": [
          "Chat Interactions"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new chatInteraction",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatInteraction to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Interaction",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteChatInteractionById",
        "tags": [
          "Chat Interactions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatInteraction to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/chat/interactions/{id}/attachment_download": {
      "get": {
        "summary": "Download attachment",
        "operationId": "attachmentDownload",
        "tags": [
          "Attachments"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatInteraction"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/chat/interactions/{id}/messages": {
      "get": {
        "summary": "Gets interaction messages",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getMessages",
        "tags": [
          "Chat Interactions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatInteraction"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates new messages",
        "operationId": "addMessage",
        "tags": [
          "Chat Interactions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatInteraction"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new chatInteraction",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "closed": {
                    "type": "boolean"
                  },
                  "ratingValue": {
                    "type": "integer"
                  },
                  "ratingType": {
                    "type": "string",
                    "enum": [
                      "star",
                      "thumb"
                    ],
                    "default": "star"
                  },
                  "ratingMessage": {
                    "type": "string"
                  },
                  "pathTranscript": {
                    "type": "string"
                  },
                  "mailTranscript": {
                    "type": "string"
                  },
                  "closedAt": {
                    "type": "string"
                  },
                  "disposition": {
                    "type": "string"
                  },
                  "secondDisposition": {
                    "type": "string"
                  },
                  "thirdDisposition": {
                    "type": "string"
                  },
                  "note": {
                    "type": "string"
                  },
                  "browserName": {
                    "type": "string"
                  },
                  "browserVersion": {
                    "type": "string"
                  },
                  "osName": {
                    "type": "string"
                  },
                  "osVersion": {
                    "type": "string"
                  },
                  "deviceModel": {
                    "type": "string"
                  },
                  "deviceVendor": {
                    "type": "string"
                  },
                  "deviceType": {
                    "type": "string"
                  },
                  "referer": {
                    "type": "string"
                  },
                  "customerIp": {
                    "type": "string"
                  },
                  "formData": {
                    "type": "string"
                  },
                  "read1stAt": {
                    "type": "string"
                  },
                  "lastMsgAt": {
                    "type": "string"
                  },
                  "lastMsgDirection": {
                    "type": "string",
                    "enum": [
                      "in",
                      "out"
                    ],
                    "default": "in"
                  },
                  "closeReason": {
                    "type": "string"
                  },
                  "customerPort": {
                    "type": "string"
                  },
                  "vidaooSessionId": {
                    "type": "string"
                  }
                },
                "required": [
                  "lastMsgDirection"
                ]
              }
            }
          }
        }
      }
    },
    "/chat/interactions/{id}/my_messages": {
      "get": {
        "summary": "Gets interaction messages",
        "operationId": "getMyMessages",
        "tags": [
          "Chat Interactions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatInteraction"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/chat/interactions/{id}/download": {
      "get": {
        "summary": "Gets interaction",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "download",
        "tags": [
          "Chat Interactions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatInteraction"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/chat/interactions/{id}/vidaoo": {
      "post": {
        "summary": "Create Vidaoo Session",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createVidaooSession",
        "tags": [
          "Chat Interactions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatInteraction"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new chatInteraction",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/chat/interactions/{id}/attachment_upload": {
      "post": {
        "summary": "Add attachment",
        "operationId": "postattachmentUpload",
        "tags": [
          "Chat Interactions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatInteraction"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new chatInteraction",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "success."
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/chat/interactions/{id}/tags": {
      "post": {
        "summary": "Add tags to the interaction",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addTags",
        "tags": [
          "Chat Interactions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatInteraction"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new chatInteraction",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Removes tags from interaction",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeTags",
        "tags": [
          "Chat Interactions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatInteraction"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/chat/interactions/{id}/custom_update": {
      "put": {
        "summary": "Update interaction",
        "operationId": "customUpdate",
        "tags": [
          "Chat Interactions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatInteraction"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new chatInteraction",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/chat/interactions/{id}/abandon": {
      "put": {
        "summary": "Abandon interaction",
        "operationId": "abandon",
        "tags": [
          "Chat Interactions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatInteraction"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new chatInteraction",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/chat/interactions/{id}/close": {
      "put": {
        "summary": "Close Interaction",
        "operationId": "close",
        "tags": [
          "Chat Interactions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatInteraction"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new chatInteraction",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/chat/internal/messages": {
      "get": {
        "summary": "Gets a list of Messages",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllChatInternalMessage",
        "tags": [
          "Chat Internal Messages"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Messages",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChatInternalMessage"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Messages",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChatInternalMessage"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Message",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createChatInternalMessage",
        "tags": [
          "Chat Internal Messages"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new chatInternalMessage",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "string"
                  },
                  "read": {
                    "type": "boolean"
                  },
                  "ChatInternalMessageId": {
                    "type": "integer"
                  }
                },
                "required": [
                  "body"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "ChatInternalMessage successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatInternalMessage"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/chat/internal/messages/describe": {
      "get": {
        "summary": "Gets table info about Messages",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeChatInternalMessage",
        "tags": [
          "Chat Internal Messages"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/chat/internal/messages/users": {
      "get": {
        "summary": "Gets Users Last Messages",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getUsers",
        "tags": [
          "ChatInternalMessage"
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/chat/internal/messages/{id}": {
      "get": {
        "summary": "Gets a single Message",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getChatInternalMessageById",
        "tags": [
          "Chat Internal Messages"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatInternalMessage to get"
          }
        ],
        "responses": {
          "200": {
            "description": "ChatInternalMessage with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatInternalMessage"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Message",
        "operationId": "updateChatInternalMessageById",
        "tags": [
          "Chat Internal Messages"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new chatInternalMessage",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatInternalMessage to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Message",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteChatInternalMessageById",
        "tags": [
          "Chat Internal Messages"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatInternalMessage to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/chat/messages": {
      "get": {
        "summary": "Gets a list of Messages",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllChatMessage",
        "tags": [
          "Chat Messages"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Messages",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChatMessage"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Messages",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChatMessage"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Message",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createChatMessage",
        "tags": [
          "Chat Messages"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new chatMessage",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "string"
                  },
                  "read": {
                    "type": "boolean"
                  },
                  "secret": {
                    "type": "boolean"
                  },
                  "direction": {
                    "type": "string",
                    "enum": [
                      "in",
                      "out"
                    ],
                    "default": "in"
                  },
                  "readAt": {
                    "type": "string"
                  },
                  "providerName": {
                    "type": "string"
                  },
                  "providerResponse": {
                    "type": "string"
                  }
                },
                "required": [
                  "body",
                  "direction"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "ChatMessage successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatMessage"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/chat/messages/describe": {
      "get": {
        "summary": "Gets table info about Messages",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeChatMessage",
        "tags": [
          "Chat Messages"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/chat/messages/{id}": {
      "get": {
        "summary": "Gets a single Message",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getChatMessageById",
        "tags": [
          "Chat Messages"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatMessage to get"
          }
        ],
        "responses": {
          "200": {
            "description": "ChatMessage with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatMessage"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Message",
        "operationId": "updateChatMessageById",
        "tags": [
          "Chat Messages"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new chatMessage",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatMessage to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Message",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteChatMessageById",
        "tags": [
          "Chat Messages"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatMessage to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/chat/messages/{id}/accept": {
      "put": {
        "summary": "Accepts message",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "accept",
        "tags": [
          "Chat Websites"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatMessage"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new chatMessage",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/chat/messages/{id}/reject": {
      "put": {
        "summary": "Rejects message",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "reject",
        "tags": [
          "Chat Websites"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatMessage"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new chatMessage",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/chat/offline_messages": {
      "get": {
        "summary": "Gets a list of OfflineMessages",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllChatOfflineMessage",
        "tags": [
          "Chat Offline Messages"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of OfflineMessages",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChatOfflineMessage"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of OfflineMessages",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChatOfflineMessage"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new OfflineMessage",
        "operationId": "createChatOfflineMessage",
        "tags": [
          "Chat Offline Messages"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new chatOfflineMessage. Use multipart if uploading files. Fields must be nested like json to form-dataz. Actual field values depend on chat website configuration",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "string"
                  }
                },
                "required": [
                  "body"
                ]
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "string"
                  },
                  "attachments": {
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": [
                  "body"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ChatOfflineMessage successfully submitted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/chat/offline_messages/describe": {
      "get": {
        "summary": "Gets table info about OfflineMessages",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeChatOfflineMessage",
        "tags": [
          "Chat Offline Messages"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/chat/offline_messages/{id}": {
      "get": {
        "summary": "Gets a single OfflineMessage",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getChatOfflineMessageById",
        "tags": [
          "Chat Offline Messages"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatOfflineMessage to get"
          }
        ],
        "responses": {
          "200": {
            "description": "ChatOfflineMessage with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatOfflineMessage"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing OfflineMessage",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateChatOfflineMessageById",
        "tags": [
          "Chat Offline Messages"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new chatOfflineMessage",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatOfflineMessage to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing OfflineMessage",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteChatOfflineMessageById",
        "tags": [
          "Chat Offline Messages"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatOfflineMessage to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/chat/proactive_actions/{id}": {
      "get": {
        "summary": "Gets a single Proactive Action",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getChatProactiveActionById",
        "tags": [
          "Chat Proactive Actions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatProactiveAction to get"
          }
        ],
        "responses": {
          "200": {
            "description": "ChatProactiveAction with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatProactiveAction"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Proactive Action",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateChatProactiveActionById",
        "tags": [
          "Chat Proactive Actions"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new chatProactiveAction",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatProactiveAction to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Proactive Action",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteChatProactiveActionById",
        "tags": [
          "Chat Proactive Actions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatProactiveAction to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/chat/proactive_actions": {
      "post": {
        "summary": "Creates a new Proactive Action",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createChatProactiveAction",
        "tags": [
          "Chat Proactive Actions"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new chatProactiveAction",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "mouseOver",
                      "timeout"
                    ],
                    "default": "mouseOver"
                  },
                  "selector": {
                    "type": "string"
                  },
                  "timeout": {
                    "type": "integer"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "ChatProactiveAction successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatProactiveAction"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/chat/queues": {
      "get": {
        "summary": "Gets a list of Queues",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllChatQueue",
        "tags": [
          "Chat Queues"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Queues",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChatQueue"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Queues",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChatQueue"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createChatQueue",
        "tags": [
          "Chat Queues"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new chatQueue",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "timeout": {
                    "type": "integer"
                  },
                  "strategy": {
                    "type": "string",
                    "enum": [
                      "rrmemory",
                      "beepall",
                      "roundrobin"
                    ],
                    "default": "rrmemory"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "ChatQueue successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatQueue"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/chat/queues/describe": {
      "get": {
        "summary": "Gets table info about Queues",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeChatQueue",
        "tags": [
          "Chat Queues"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/chat/queues/{id}": {
      "get": {
        "summary": "Gets a single Queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getChatQueueById",
        "tags": [
          "Chat Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatQueue to get"
          }
        ],
        "responses": {
          "200": {
            "description": "ChatQueue with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatQueue"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateChatQueueById",
        "tags": [
          "Chat Queues"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new chatQueue",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatQueue to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteChatQueueById",
        "tags": [
          "Chat Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatQueue to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/chat/queues/{id}/members": {
      "get": {
        "summary": "GetMembers",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getMembers",
        "tags": [
          "Chat Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatQueue"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/chat/queues/{id}/teams": {
      "get": {
        "summary": "Gets queues list",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getTeams",
        "tags": [
          "Chat Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatQueue"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add teams to a queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addTeams",
        "tags": [
          "Chat Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatQueue"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new chatQueue",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Remove teams from a queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeTeams",
        "tags": [
          "Teams"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatQueue"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/chat/queues/{id}/users": {
      "get": {
        "summary": "Gets queue agents",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getAgents",
        "tags": [
          "Chat Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatQueue"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add agents to a queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addAgents",
        "tags": [
          "Chat Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatQueue"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new chatQueue",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Removes agents from a queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeAgents",
        "tags": [
          "Chat Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatQueue"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/chat/queues/{id}/profiles": {
      "get": {
        "summary": "Gets queue profiles",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getProfiles",
        "tags": [
          "Chat Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatQueue"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add profiles to a queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addProfiles",
        "tags": [
          "Chat Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatQueue"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new chatQueue",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Removes profiles from a queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeProfiles",
        "tags": [
          "Chat Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatQueue"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/chat/reports/queue": {
      "get": {
        "summary": "Gets a list of Chat Queue Reports",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllChatQueueReport",
        "tags": [
          "Chat Queue Reports"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Chat Queue Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChatQueueReport"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Chat Queue Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChatQueueReport"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Chat Queue Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createChatQueueReport",
        "tags": [
          "Chat Queue Reports"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new chatQueueReport",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "uniqueid": {
                    "type": "string"
                  },
                  "from": {
                    "type": "string"
                  },
                  "joinAt": {
                    "type": "string"
                  },
                  "leaveAt": {
                    "type": "string"
                  },
                  "acceptAt": {
                    "type": "string"
                  },
                  "exitAt": {
                    "type": "string"
                  },
                  "reason": {
                    "type": "string"
                  }
                },
                "required": [
                  "uniqueid"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "ChatQueueReport successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatQueueReport"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/chat/reports/queue/describe": {
      "get": {
        "summary": "Gets table info about Chat Queue Reports",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeChatQueueReport",
        "tags": [
          "Chat Queue Reports"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/chat/reports/queue/{id}": {
      "get": {
        "summary": "Gets a single Chat Queue Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getChatQueueReportById",
        "tags": [
          "Chat Queue Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatQueueReport to get"
          }
        ],
        "responses": {
          "200": {
            "description": "ChatQueueReport with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatQueueReport"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Chat Queue Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateChatQueueReportById",
        "tags": [
          "Chat Queue Reports"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new chatQueueReport",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatQueueReport to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Chat Queue Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteChatQueueReportById",
        "tags": [
          "Chat Queue Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatQueueReport to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/chat/reports/transfer": {
      "get": {
        "summary": "Gets a list of Chat Transfer Reports",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllChatTransferReport",
        "tags": [
          "Chat Transfer Reports"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Chat Transfer Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChatTransferReport"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Chat Transfer Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChatTransferReport"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Chat Transfer Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createChatTransferReport",
        "tags": [
          "Chat Transfer Reports"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new chatTransferReport",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "uniqueid": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "account",
                      "agent",
                      "queue"
                    ],
                    "default": "account"
                  },
                  "transferredAt": {
                    "type": "string"
                  }
                },
                "required": [
                  "uniqueid",
                  "type",
                  "transferredAt"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "ChatTransferReport successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatTransferReport"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/chat/reports/transfer/describe": {
      "get": {
        "summary": "Gets table info about Chat Transfer Reports",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeChatTransferReport",
        "tags": [
          "Chat Transfer Reports"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/chat/reports/transfer/{id}": {
      "get": {
        "summary": "Gets a single Chat Transfer Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getChatTransferReportById",
        "tags": [
          "Chat Transfer Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatTransferReport to get"
          }
        ],
        "responses": {
          "200": {
            "description": "ChatTransferReport with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatTransferReport"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Chat Transfer Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateChatTransferReportById",
        "tags": [
          "Chat Transfer Reports"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new chatTransferReport",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatTransferReport to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Chat Transfer Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteChatTransferReportById",
        "tags": [
          "Chat Transfer Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatTransferReport to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/chat/websites": {
      "get": {
        "summary": "Gets a list of Websites",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllChatWebsite",
        "tags": [
          "Chat Websites"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Websites",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChatWebsite"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Websites",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChatWebsite"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Website",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createChatWebsite",
        "tags": [
          "Chat Websites"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new chatWebsite",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "address": {
                    "description": "Comma separated list of hosts allowed to load the chat. The wildcard symbol * can be used to represent any subdomain.",
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "mapKey": {
                    "type": "string"
                  },
                  "mapKeyOffline": {
                    "type": "string"
                  },
                  "key": {
                    "type": "string"
                  },
                  "agentAlias": {
                    "type": "string"
                  },
                  "customerAlias": {
                    "type": "string"
                  },
                  "color": {
                    "type": "string"
                  },
                  "color_button": {
                    "type": "string"
                  },
                  "textColor": {
                    "type": "string"
                  },
                  "fontSize": {
                    "type": "integer"
                  },
                  "remote": {
                    "type": "string"
                  },
                  "animation": {
                    "type": "boolean"
                  },
                  "header_shape": {
                    "type": "string",
                    "enum": [
                      "rounded",
                      "squared"
                    ],
                    "default": "rounded"
                  },
                  "header_online": {
                    "type": "string"
                  },
                  "start_chat_button": {
                    "type": "string"
                  },
                  "offline_chat_button": {
                    "type": "string"
                  },
                  "header_offline": {
                    "type": "string"
                  },
                  "download_transcript": {
                    "type": "boolean"
                  },
                  "timeout": {
                    "type": "integer"
                  },
                  "whiteLabel": {
                    "type": "string"
                  },
                  "defaultWhiteLabel": {
                    "type": "boolean"
                  },
                  "sitepic": {
                    "type": "string"
                  },
                  "closingQuestion": {
                    "type": "string"
                  },
                  "formSubmitSuccessMessage": {
                    "type": "string"
                  },
                  "formSubmitFailureMessage": {
                    "type": "string"
                  },
                  "noteTitle": {
                    "type": "string"
                  },
                  "placeholderMessage": {
                    "type": "string"
                  },
                  "closingMessage": {
                    "type": "string"
                  },
                  "closingMessageButton": {
                    "type": "string"
                  },
                  "skipMessageButton": {
                    "type": "string"
                  },
                  "conditionAgreement": {
                    "type": "boolean"
                  },
                  "enableRating": {
                    "type": "boolean"
                  },
                  "enableFeedback": {
                    "type": "boolean"
                  },
                  "enableSendButton": {
                    "type": "boolean"
                  },
                  "feedbackTitle": {
                    "type": "string"
                  },
                  "ratingType": {
                    "type": "string",
                    "enum": [
                      "star",
                      "thumb"
                    ],
                    "default": "star"
                  },
                  "ratingStarsNumber": {
                    "type": "integer"
                  },
                  "onlineForm": {
                    "type": "string"
                  },
                  "offlineForm": {
                    "type": "string"
                  },
                  "token": {
                    "type": "string"
                  },
                  "autoclose": {
                    "type": "boolean"
                  },
                  "enableCustomerWriting": {
                    "type": "boolean"
                  },
                  "forwardTranscript": {
                    "type": "boolean"
                  },
                  "forwardTranscriptMessage": {
                    "type": "string"
                  },
                  "forwardOffline": {
                    "type": "boolean"
                  },
                  "forwardOfflineAddress": {
                    "type": "string"
                  },
                  "waitingTitle": {
                    "type": "string"
                  },
                  "waitingMessage": {
                    "type": "string"
                  },
                  "offlineMessageSubject": {
                    "type": "string"
                  },
                  "offlineMessageBody": {
                    "type": "string"
                  },
                  "enableUnmanagedNote": {
                    "type": "boolean"
                  },
                  "unmanagedMessage": {
                    "type": "string"
                  },
                  "skipUnmanaged": {
                    "type": "string"
                  },
                  "sendUnmanaged": {
                    "type": "string"
                  },
                  "enableCustomerAttachment": {
                    "type": "boolean"
                  },
                  "enableCustomerAudioRecording": {
                    "type": "boolean"
                  },
                  "enableCustomerCheckmarks": {
                    "type": "boolean"
                  },
                  "agentAvatar": {
                    "type": "string"
                  },
                  "showAgentAvatar": {
                    "type": "boolean"
                  },
                  "timezone": {
                    "type": "string"
                  },
                  "notificationTemplate": {
                    "type": "string"
                  },
                  "notificationSound": {
                    "type": "boolean"
                  },
                  "notificationShake": {
                    "type": "boolean"
                  },
                  "hideWhenOffline": {
                    "type": "boolean"
                  },
                  "agentIdentifier": {
                    "type": "string"
                  },
                  "waitForTheAssignedAgent": {
                    "type": "integer"
                  },
                  "waitForTheAssignedQueue": {
                    "type": "integer"
                  },
                  "alignment": {
                    "type": "string"
                  },
                  "verticalAlignment": {
                    "type": "integer"
                  },
                  "labelText": {
                    "type": "string"
                  },
                  "messagesAlignment": {
                    "type": "string"
                  },
                  "defaultTitle": {
                    "type": "string"
                  },
                  "customerAvatar": {
                    "type": "string"
                  },
                  "showCustomerAvatar": {
                    "type": "boolean"
                  },
                  "messageFontSize": {
                    "type": "integer"
                  },
                  "backgroundColor": {
                    "type": "string"
                  },
                  "queueTransfer": {
                    "type": "boolean"
                  },
                  "queueTransferTimeout": {
                    "type": "integer"
                  },
                  "agentTransfer": {
                    "type": "boolean"
                  },
                  "agentTransferTimeout": {
                    "type": "integer"
                  },
                  "systemAlias": {
                    "type": "string"
                  },
                  "systemAvatar": {
                    "type": "string"
                  },
                  "mandatoryDispositionPauseId": {
                    "type": "integer"
                  },
                  "mandatoryDisposition": {
                    "type": "boolean"
                  },
                  "vidaooEscalation": {
                    "type": "boolean"
                  },
                  "vidaooApiKey": {
                    "type": "string"
                  },
                  "vidaooTopic": {
                    "type": "string"
                  },
                  "vidaooNote": {
                    "type": "string"
                  },
                  "vidaooMetadata": {
                    "type": "string"
                  },
                  "openNewInteraction": {
                    "type": "boolean"
                  },
                  "subjectOffline": {
                    "type": "string"
                  },
                  "aiAssistantId": {
                    "type": "string"
                  },
                  "aiProviderId": {
                    "type": "integer"
                  }
                },
                "required": [
                  "name",
                  "address",
                  "key",
                  "color",
                  "color_button",
                  "textColor",
                  "backgroundColor",
                  "vidaooTopic"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "ChatWebsite successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatWebsite"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/chat/websites/describe": {
      "get": {
        "summary": "Gets table info about Websites",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeChatWebsite",
        "tags": [
          "Chat Websites"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/chat/websites/{id}": {
      "get": {
        "summary": "Gets a single Website",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getChatWebsiteById",
        "tags": [
          "Chat Websites"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatWebsite to get"
          }
        ],
        "responses": {
          "200": {
            "description": "ChatWebsite with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatWebsite"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Website",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateChatWebsiteById",
        "tags": [
          "Chat Websites"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new chatWebsite",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatWebsite to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Website",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteChatWebsiteById",
        "tags": [
          "Chat Websites"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatWebsite to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/chat/websites/{id}/dispositions": {
      "get": {
        "summary": "Gets account dispositions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getDispositions",
        "tags": [
          "Chat Websites"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatWebsite"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates new disposition",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addDisposition",
        "tags": [
          "Chat Websites"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatWebsite"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new chatWebsite",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "address": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "mapKey": {
                    "type": "string"
                  },
                  "mapKeyOffline": {
                    "type": "string"
                  },
                  "key": {
                    "type": "string"
                  },
                  "agentAlias": {
                    "type": "string"
                  },
                  "customerAlias": {
                    "type": "string"
                  },
                  "color": {
                    "type": "string"
                  },
                  "color_button": {
                    "type": "string"
                  },
                  "textColor": {
                    "type": "string"
                  },
                  "fontSize": {
                    "type": "integer"
                  },
                  "remote": {
                    "type": "string"
                  },
                  "animation": {
                    "type": "boolean"
                  },
                  "header_shape": {
                    "type": "string",
                    "enum": [
                      "rounded",
                      "squared"
                    ],
                    "default": "rounded"
                  },
                  "header_online": {
                    "type": "string"
                  },
                  "start_chat_button": {
                    "type": "string"
                  },
                  "offline_chat_button": {
                    "type": "string"
                  },
                  "header_offline": {
                    "type": "string"
                  },
                  "download_transcript": {
                    "type": "boolean"
                  },
                  "timeout": {
                    "type": "integer"
                  },
                  "whiteLabel": {
                    "type": "string"
                  },
                  "defaultWhiteLabel": {
                    "type": "boolean"
                  },
                  "sitepic": {
                    "type": "string"
                  },
                  "closingQuestion": {
                    "type": "string"
                  },
                  "formSubmitSuccessMessage": {
                    "type": "string"
                  },
                  "formSubmitFailureMessage": {
                    "type": "string"
                  },
                  "noteTitle": {
                    "type": "string"
                  },
                  "placeholderMessage": {
                    "type": "string"
                  },
                  "closingMessage": {
                    "type": "string"
                  },
                  "closingMessageButton": {
                    "type": "string"
                  },
                  "skipMessageButton": {
                    "type": "string"
                  },
                  "conditionAgreement": {
                    "type": "boolean"
                  },
                  "enableRating": {
                    "type": "boolean"
                  },
                  "enableFeedback": {
                    "type": "boolean"
                  },
                  "enableSendButton": {
                    "type": "boolean"
                  },
                  "feedbackTitle": {
                    "type": "string"
                  },
                  "ratingType": {
                    "type": "string",
                    "enum": [
                      "star",
                      "thumb"
                    ],
                    "default": "star"
                  },
                  "ratingStarsNumber": {
                    "type": "integer"
                  },
                  "onlineForm": {
                    "type": "string"
                  },
                  "offlineForm": {
                    "type": "string"
                  },
                  "token": {
                    "type": "string"
                  },
                  "autoclose": {
                    "type": "boolean"
                  },
                  "enableCustomerWriting": {
                    "type": "boolean"
                  },
                  "forwardTranscript": {
                    "type": "boolean"
                  },
                  "forwardTranscriptMessage": {
                    "type": "string"
                  },
                  "forwardOffline": {
                    "type": "boolean"
                  },
                  "forwardOfflineAddress": {
                    "type": "string"
                  },
                  "waitingTitle": {
                    "type": "string"
                  },
                  "waitingMessage": {
                    "type": "string"
                  },
                  "offlineMessageSubject": {
                    "type": "string"
                  },
                  "offlineMessageBody": {
                    "type": "string"
                  },
                  "enableUnmanagedNote": {
                    "type": "boolean"
                  },
                  "unmanagedMessage": {
                    "type": "string"
                  },
                  "skipUnmanaged": {
                    "type": "string"
                  },
                  "sendUnmanaged": {
                    "type": "string"
                  },
                  "enableCustomerAttachment": {
                    "type": "boolean"
                  },
                  "enableCustomerAudioRecording": {
                    "type": "boolean"
                  },
                  "enableCustomerCheckmarks": {
                    "type": "boolean"
                  },
                  "agentAvatar": {
                    "type": "string"
                  },
                  "showAgentAvatar": {
                    "type": "boolean"
                  },
                  "timezone": {
                    "type": "string"
                  },
                  "notificationTemplate": {
                    "type": "string"
                  },
                  "notificationSound": {
                    "type": "boolean"
                  },
                  "notificationShake": {
                    "type": "boolean"
                  },
                  "hideWhenOffline": {
                    "type": "boolean"
                  },
                  "agentIdentifier": {
                    "type": "string"
                  },
                  "waitForTheAssignedAgent": {
                    "type": "integer"
                  },
                  "waitForTheAssignedQueue": {
                    "type": "integer"
                  },
                  "alignment": {
                    "type": "string"
                  },
                  "verticalAlignment": {
                    "type": "integer"
                  },
                  "labelText": {
                    "type": "string"
                  },
                  "messagesAlignment": {
                    "type": "string"
                  },
                  "defaultTitle": {
                    "type": "string"
                  },
                  "customerAvatar": {
                    "type": "string"
                  },
                  "showCustomerAvatar": {
                    "type": "boolean"
                  },
                  "messageFontSize": {
                    "type": "integer"
                  },
                  "backgroundColor": {
                    "type": "string"
                  },
                  "queueTransfer": {
                    "type": "boolean"
                  },
                  "queueTransferTimeout": {
                    "type": "integer"
                  },
                  "agentTransfer": {
                    "type": "boolean"
                  },
                  "agentTransferTimeout": {
                    "type": "integer"
                  },
                  "systemAlias": {
                    "type": "string"
                  },
                  "systemAvatar": {
                    "type": "string"
                  },
                  "mandatoryDispositionPauseId": {
                    "type": "integer"
                  },
                  "mandatoryDisposition": {
                    "type": "boolean"
                  },
                  "vidaooEscalation": {
                    "type": "boolean"
                  },
                  "vidaooApiKey": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "address",
                  "key",
                  "color",
                  "color_button",
                  "textColor",
                  "backgroundColor"
                ]
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Removes canned answers from account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeDispositions",
        "tags": [
          "Chat Websites"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatWebsite"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/chat/websites/{id}/canned_answers": {
      "get": {
        "summary": "Gets account canned answers",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getAnswers",
        "tags": [
          "Chat Websites"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatWebsite"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates new canned answer",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addAnswer",
        "tags": [
          "Chat Websites"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatWebsite"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new chatWebsite",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "address": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "mapKey": {
                    "type": "string"
                  },
                  "mapKeyOffline": {
                    "type": "string"
                  },
                  "key": {
                    "type": "string"
                  },
                  "agentAlias": {
                    "type": "string"
                  },
                  "customerAlias": {
                    "type": "string"
                  },
                  "color": {
                    "type": "string"
                  },
                  "color_button": {
                    "type": "string"
                  },
                  "textColor": {
                    "type": "string"
                  },
                  "fontSize": {
                    "type": "integer"
                  },
                  "remote": {
                    "type": "string"
                  },
                  "animation": {
                    "type": "boolean"
                  },
                  "header_shape": {
                    "type": "string",
                    "enum": [
                      "rounded",
                      "squared"
                    ],
                    "default": "rounded"
                  },
                  "header_online": {
                    "type": "string"
                  },
                  "start_chat_button": {
                    "type": "string"
                  },
                  "offline_chat_button": {
                    "type": "string"
                  },
                  "header_offline": {
                    "type": "string"
                  },
                  "download_transcript": {
                    "type": "boolean"
                  },
                  "timeout": {
                    "type": "integer"
                  },
                  "whiteLabel": {
                    "type": "string"
                  },
                  "defaultWhiteLabel": {
                    "type": "boolean"
                  },
                  "sitepic": {
                    "type": "string"
                  },
                  "closingQuestion": {
                    "type": "string"
                  },
                  "formSubmitSuccessMessage": {
                    "type": "string"
                  },
                  "formSubmitFailureMessage": {
                    "type": "string"
                  },
                  "noteTitle": {
                    "type": "string"
                  },
                  "placeholderMessage": {
                    "type": "string"
                  },
                  "closingMessage": {
                    "type": "string"
                  },
                  "closingMessageButton": {
                    "type": "string"
                  },
                  "skipMessageButton": {
                    "type": "string"
                  },
                  "conditionAgreement": {
                    "type": "boolean"
                  },
                  "enableRating": {
                    "type": "boolean"
                  },
                  "enableFeedback": {
                    "type": "boolean"
                  },
                  "enableSendButton": {
                    "type": "boolean"
                  },
                  "feedbackTitle": {
                    "type": "string"
                  },
                  "ratingType": {
                    "type": "string",
                    "enum": [
                      "star",
                      "thumb"
                    ],
                    "default": "star"
                  },
                  "ratingStarsNumber": {
                    "type": "integer"
                  },
                  "onlineForm": {
                    "type": "string"
                  },
                  "offlineForm": {
                    "type": "string"
                  },
                  "token": {
                    "type": "string"
                  },
                  "autoclose": {
                    "type": "boolean"
                  },
                  "enableCustomerWriting": {
                    "type": "boolean"
                  },
                  "forwardTranscript": {
                    "type": "boolean"
                  },
                  "forwardTranscriptMessage": {
                    "type": "string"
                  },
                  "forwardOffline": {
                    "type": "boolean"
                  },
                  "forwardOfflineAddress": {
                    "type": "string"
                  },
                  "waitingTitle": {
                    "type": "string"
                  },
                  "waitingMessage": {
                    "type": "string"
                  },
                  "offlineMessageSubject": {
                    "type": "string"
                  },
                  "offlineMessageBody": {
                    "type": "string"
                  },
                  "enableUnmanagedNote": {
                    "type": "boolean"
                  },
                  "unmanagedMessage": {
                    "type": "string"
                  },
                  "skipUnmanaged": {
                    "type": "string"
                  },
                  "sendUnmanaged": {
                    "type": "string"
                  },
                  "enableCustomerAttachment": {
                    "type": "boolean"
                  },
                  "enableCustomerAudioRecording": {
                    "type": "boolean"
                  },
                  "enableCustomerCheckmarks": {
                    "type": "boolean"
                  },
                  "agentAvatar": {
                    "type": "string"
                  },
                  "showAgentAvatar": {
                    "type": "boolean"
                  },
                  "timezone": {
                    "type": "string"
                  },
                  "notificationTemplate": {
                    "type": "string"
                  },
                  "notificationSound": {
                    "type": "boolean"
                  },
                  "notificationShake": {
                    "type": "boolean"
                  },
                  "hideWhenOffline": {
                    "type": "boolean"
                  },
                  "agentIdentifier": {
                    "type": "string"
                  },
                  "waitForTheAssignedAgent": {
                    "type": "integer"
                  },
                  "waitForTheAssignedQueue": {
                    "type": "integer"
                  },
                  "alignment": {
                    "type": "string"
                  },
                  "verticalAlignment": {
                    "type": "integer"
                  },
                  "labelText": {
                    "type": "string"
                  },
                  "messagesAlignment": {
                    "type": "string"
                  },
                  "defaultTitle": {
                    "type": "string"
                  },
                  "customerAvatar": {
                    "type": "string"
                  },
                  "showCustomerAvatar": {
                    "type": "boolean"
                  },
                  "messageFontSize": {
                    "type": "integer"
                  },
                  "backgroundColor": {
                    "type": "string"
                  },
                  "queueTransfer": {
                    "type": "boolean"
                  },
                  "queueTransferTimeout": {
                    "type": "integer"
                  },
                  "agentTransfer": {
                    "type": "boolean"
                  },
                  "agentTransferTimeout": {
                    "type": "integer"
                  },
                  "systemAlias": {
                    "type": "string"
                  },
                  "systemAvatar": {
                    "type": "string"
                  },
                  "mandatoryDispositionPauseId": {
                    "type": "integer"
                  },
                  "mandatoryDisposition": {
                    "type": "boolean"
                  },
                  "vidaooEscalation": {
                    "type": "boolean"
                  },
                  "vidaooApiKey": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "address",
                  "key",
                  "color",
                  "color_button",
                  "textColor",
                  "backgroundColor"
                ]
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Removes canned answers from account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeAnswers",
        "tags": [
          "Chat Websites"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatWebsite"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/chat/websites/{id}/logo": {
      "get": {
        "summary": "Get logo",
        "operationId": "getLogo",
        "tags": [
          "Chat Websites"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatWebsite"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add logo",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "postaddLogo",
        "tags": [
          "Chat Websites"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatWebsite"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new chatWebsite",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "success."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/chat/websites/{id}/avatar": {
      "get": {
        "summary": "Get avatar",
        "operationId": "getAvatar",
        "tags": [
          "Chat Websites"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatWebsite"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add avatar",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "postaddAvatar",
        "tags": [
          "Chat Websites"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatWebsite"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new chatWebsite",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "success."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/chat/websites/{id}/customer_avatar": {
      "get": {
        "summary": "Get Customer Avatar",
        "operationId": "getCustomerAvatar",
        "tags": [
          "Chat Websites"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatWebsite"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add customer avatar",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "postaddCustomerAvatar",
        "tags": [
          "Chat Websites"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatWebsite"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new chatWebsite",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "success."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/chat/websites/{id}/system_avatar": {
      "get": {
        "summary": "Get System Avatar",
        "operationId": "getSystemAvatar",
        "tags": [
          "Chat Websites"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatWebsite"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add system avatar",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "postaddSystemAvatar",
        "tags": [
          "Chat Websites"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatWebsite"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new chatWebsite",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "success."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/chat/websites/{id}/interactions": {
      "get": {
        "summary": "Gets Website Interactions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getInteractions",
        "tags": [
          "Chat Websites"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatWebsite"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates new interactions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addInteraction",
        "tags": [
          "Chat Websites"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatWebsite"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new chatWebsite",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "address": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "mapKey": {
                    "type": "string"
                  },
                  "mapKeyOffline": {
                    "type": "string"
                  },
                  "key": {
                    "type": "string"
                  },
                  "agentAlias": {
                    "type": "string"
                  },
                  "customerAlias": {
                    "type": "string"
                  },
                  "color": {
                    "type": "string"
                  },
                  "color_button": {
                    "type": "string"
                  },
                  "textColor": {
                    "type": "string"
                  },
                  "fontSize": {
                    "type": "integer"
                  },
                  "remote": {
                    "type": "string"
                  },
                  "animation": {
                    "type": "boolean"
                  },
                  "header_shape": {
                    "type": "string",
                    "enum": [
                      "rounded",
                      "squared"
                    ],
                    "default": "rounded"
                  },
                  "header_online": {
                    "type": "string"
                  },
                  "start_chat_button": {
                    "type": "string"
                  },
                  "offline_chat_button": {
                    "type": "string"
                  },
                  "header_offline": {
                    "type": "string"
                  },
                  "download_transcript": {
                    "type": "boolean"
                  },
                  "timeout": {
                    "type": "integer"
                  },
                  "whiteLabel": {
                    "type": "string"
                  },
                  "defaultWhiteLabel": {
                    "type": "boolean"
                  },
                  "sitepic": {
                    "type": "string"
                  },
                  "closingQuestion": {
                    "type": "string"
                  },
                  "formSubmitSuccessMessage": {
                    "type": "string"
                  },
                  "formSubmitFailureMessage": {
                    "type": "string"
                  },
                  "noteTitle": {
                    "type": "string"
                  },
                  "placeholderMessage": {
                    "type": "string"
                  },
                  "closingMessage": {
                    "type": "string"
                  },
                  "closingMessageButton": {
                    "type": "string"
                  },
                  "skipMessageButton": {
                    "type": "string"
                  },
                  "conditionAgreement": {
                    "type": "boolean"
                  },
                  "enableRating": {
                    "type": "boolean"
                  },
                  "enableFeedback": {
                    "type": "boolean"
                  },
                  "enableSendButton": {
                    "type": "boolean"
                  },
                  "feedbackTitle": {
                    "type": "string"
                  },
                  "ratingType": {
                    "type": "string",
                    "enum": [
                      "star",
                      "thumb"
                    ],
                    "default": "star"
                  },
                  "ratingStarsNumber": {
                    "type": "integer"
                  },
                  "onlineForm": {
                    "type": "string"
                  },
                  "offlineForm": {
                    "type": "string"
                  },
                  "token": {
                    "type": "string"
                  },
                  "autoclose": {
                    "type": "boolean"
                  },
                  "enableCustomerWriting": {
                    "type": "boolean"
                  },
                  "forwardTranscript": {
                    "type": "boolean"
                  },
                  "forwardTranscriptMessage": {
                    "type": "string"
                  },
                  "forwardOffline": {
                    "type": "boolean"
                  },
                  "forwardOfflineAddress": {
                    "type": "string"
                  },
                  "waitingTitle": {
                    "type": "string"
                  },
                  "waitingMessage": {
                    "type": "string"
                  },
                  "offlineMessageSubject": {
                    "type": "string"
                  },
                  "offlineMessageBody": {
                    "type": "string"
                  },
                  "enableUnmanagedNote": {
                    "type": "boolean"
                  },
                  "unmanagedMessage": {
                    "type": "string"
                  },
                  "skipUnmanaged": {
                    "type": "string"
                  },
                  "sendUnmanaged": {
                    "type": "string"
                  },
                  "enableCustomerAttachment": {
                    "type": "boolean"
                  },
                  "enableCustomerAudioRecording": {
                    "type": "boolean"
                  },
                  "enableCustomerCheckmarks": {
                    "type": "boolean"
                  },
                  "agentAvatar": {
                    "type": "string"
                  },
                  "showAgentAvatar": {
                    "type": "boolean"
                  },
                  "timezone": {
                    "type": "string"
                  },
                  "notificationTemplate": {
                    "type": "string"
                  },
                  "notificationSound": {
                    "type": "boolean"
                  },
                  "notificationShake": {
                    "type": "boolean"
                  },
                  "hideWhenOffline": {
                    "type": "boolean"
                  },
                  "agentIdentifier": {
                    "type": "string"
                  },
                  "waitForTheAssignedAgent": {
                    "type": "integer"
                  },
                  "waitForTheAssignedQueue": {
                    "type": "integer"
                  },
                  "alignment": {
                    "type": "string"
                  },
                  "verticalAlignment": {
                    "type": "integer"
                  },
                  "labelText": {
                    "type": "string"
                  },
                  "messagesAlignment": {
                    "type": "string"
                  },
                  "defaultTitle": {
                    "type": "string"
                  },
                  "customerAvatar": {
                    "type": "string"
                  },
                  "showCustomerAvatar": {
                    "type": "boolean"
                  },
                  "messageFontSize": {
                    "type": "integer"
                  },
                  "backgroundColor": {
                    "type": "string"
                  },
                  "queueTransfer": {
                    "type": "boolean"
                  },
                  "queueTransferTimeout": {
                    "type": "integer"
                  },
                  "agentTransfer": {
                    "type": "boolean"
                  },
                  "agentTransferTimeout": {
                    "type": "integer"
                  },
                  "systemAlias": {
                    "type": "string"
                  },
                  "systemAvatar": {
                    "type": "string"
                  },
                  "mandatoryDispositionPauseId": {
                    "type": "integer"
                  },
                  "mandatoryDisposition": {
                    "type": "boolean"
                  },
                  "vidaooEscalation": {
                    "type": "boolean"
                  },
                  "vidaooApiKey": {
                    "type": "string"
                  },
                  "autoreplyExecuted": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "name",
                  "address",
                  "key",
                  "color",
                  "color_button",
                  "textColor",
                  "backgroundColor"
                ]
              }
            }
          }
        }
      }
    },
    "/chat/websites/{id}/snippet": {
      "get": {
        "summary": "Gets Website Snippet",
        "operationId": "getSnippet",
        "tags": [
          "Chat Websites"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatWebsite"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/chat/websites/{id}/applications": {
      "get": {
        "summary": "Gets Website Applications",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getApplications",
        "tags": [
          "Chat Websites"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatWebsite"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates new applications",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addApplications",
        "tags": [
          "Chat Websites"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatWebsite"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new chatWebsite",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "address": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "mapKey": {
                    "type": "string"
                  },
                  "mapKeyOffline": {
                    "type": "string"
                  },
                  "key": {
                    "type": "string"
                  },
                  "agentAlias": {
                    "type": "string"
                  },
                  "customerAlias": {
                    "type": "string"
                  },
                  "color": {
                    "type": "string"
                  },
                  "color_button": {
                    "type": "string"
                  },
                  "textColor": {
                    "type": "string"
                  },
                  "fontSize": {
                    "type": "integer"
                  },
                  "remote": {
                    "type": "string"
                  },
                  "animation": {
                    "type": "boolean"
                  },
                  "header_shape": {
                    "type": "string",
                    "enum": [
                      "rounded",
                      "squared"
                    ],
                    "default": "rounded"
                  },
                  "header_online": {
                    "type": "string"
                  },
                  "start_chat_button": {
                    "type": "string"
                  },
                  "offline_chat_button": {
                    "type": "string"
                  },
                  "header_offline": {
                    "type": "string"
                  },
                  "download_transcript": {
                    "type": "boolean"
                  },
                  "timeout": {
                    "type": "integer"
                  },
                  "whiteLabel": {
                    "type": "string"
                  },
                  "defaultWhiteLabel": {
                    "type": "boolean"
                  },
                  "sitepic": {
                    "type": "string"
                  },
                  "closingQuestion": {
                    "type": "string"
                  },
                  "formSubmitSuccessMessage": {
                    "type": "string"
                  },
                  "formSubmitFailureMessage": {
                    "type": "string"
                  },
                  "noteTitle": {
                    "type": "string"
                  },
                  "placeholderMessage": {
                    "type": "string"
                  },
                  "closingMessage": {
                    "type": "string"
                  },
                  "closingMessageButton": {
                    "type": "string"
                  },
                  "skipMessageButton": {
                    "type": "string"
                  },
                  "conditionAgreement": {
                    "type": "boolean"
                  },
                  "enableRating": {
                    "type": "boolean"
                  },
                  "enableFeedback": {
                    "type": "boolean"
                  },
                  "enableSendButton": {
                    "type": "boolean"
                  },
                  "feedbackTitle": {
                    "type": "string"
                  },
                  "ratingType": {
                    "type": "string",
                    "enum": [
                      "star",
                      "thumb"
                    ],
                    "default": "star"
                  },
                  "ratingStarsNumber": {
                    "type": "integer"
                  },
                  "onlineForm": {
                    "type": "string"
                  },
                  "offlineForm": {
                    "type": "string"
                  },
                  "token": {
                    "type": "string"
                  },
                  "autoclose": {
                    "type": "boolean"
                  },
                  "enableCustomerWriting": {
                    "type": "boolean"
                  },
                  "forwardTranscript": {
                    "type": "boolean"
                  },
                  "forwardTranscriptMessage": {
                    "type": "string"
                  },
                  "forwardOffline": {
                    "type": "boolean"
                  },
                  "forwardOfflineAddress": {
                    "type": "string"
                  },
                  "waitingTitle": {
                    "type": "string"
                  },
                  "waitingMessage": {
                    "type": "string"
                  },
                  "offlineMessageSubject": {
                    "type": "string"
                  },
                  "offlineMessageBody": {
                    "type": "string"
                  },
                  "enableUnmanagedNote": {
                    "type": "boolean"
                  },
                  "unmanagedMessage": {
                    "type": "string"
                  },
                  "skipUnmanaged": {
                    "type": "string"
                  },
                  "sendUnmanaged": {
                    "type": "string"
                  },
                  "enableCustomerAttachment": {
                    "type": "boolean"
                  },
                  "enableCustomerAudioRecording": {
                    "type": "boolean"
                  },
                  "enableCustomerCheckmarks": {
                    "type": "boolean"
                  },
                  "agentAvatar": {
                    "type": "string"
                  },
                  "showAgentAvatar": {
                    "type": "boolean"
                  },
                  "timezone": {
                    "type": "string"
                  },
                  "notificationTemplate": {
                    "type": "string"
                  },
                  "notificationSound": {
                    "type": "boolean"
                  },
                  "notificationShake": {
                    "type": "boolean"
                  },
                  "hideWhenOffline": {
                    "type": "boolean"
                  },
                  "agentIdentifier": {
                    "type": "string"
                  },
                  "waitForTheAssignedAgent": {
                    "type": "integer"
                  },
                  "waitForTheAssignedQueue": {
                    "type": "integer"
                  },
                  "alignment": {
                    "type": "string"
                  },
                  "verticalAlignment": {
                    "type": "integer"
                  },
                  "labelText": {
                    "type": "string"
                  },
                  "messagesAlignment": {
                    "type": "string"
                  },
                  "defaultTitle": {
                    "type": "string"
                  },
                  "customerAvatar": {
                    "type": "string"
                  },
                  "showCustomerAvatar": {
                    "type": "boolean"
                  },
                  "messageFontSize": {
                    "type": "integer"
                  },
                  "backgroundColor": {
                    "type": "string"
                  },
                  "queueTransfer": {
                    "type": "boolean"
                  },
                  "queueTransferTimeout": {
                    "type": "integer"
                  },
                  "agentTransfer": {
                    "type": "boolean"
                  },
                  "agentTransferTimeout": {
                    "type": "integer"
                  },
                  "systemAlias": {
                    "type": "string"
                  },
                  "systemAvatar": {
                    "type": "string"
                  },
                  "mandatoryDispositionPauseId": {
                    "type": "integer"
                  },
                  "mandatoryDisposition": {
                    "type": "boolean"
                  },
                  "vidaooEscalation": {
                    "type": "boolean"
                  },
                  "vidaooApiKey": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "address",
                  "key",
                  "color",
                  "color_button",
                  "textColor",
                  "backgroundColor"
                ]
              }
            }
          }
        }
      }
    },
    "/chat/websites/{id}/proactive_actions": {
      "get": {
        "summary": "Gets Website Proactive Actions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getProactiveActions",
        "tags": [
          "Chat Websites"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatWebsite"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates new Proactive Actions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addProactiveActions",
        "tags": [
          "Chat Websites"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatWebsite"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new chatWebsite",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "address": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "mapKey": {
                    "type": "string"
                  },
                  "mapKeyOffline": {
                    "type": "string"
                  },
                  "key": {
                    "type": "string"
                  },
                  "agentAlias": {
                    "type": "string"
                  },
                  "customerAlias": {
                    "type": "string"
                  },
                  "color": {
                    "type": "string"
                  },
                  "color_button": {
                    "type": "string"
                  },
                  "textColor": {
                    "type": "string"
                  },
                  "fontSize": {
                    "type": "integer"
                  },
                  "remote": {
                    "type": "string"
                  },
                  "animation": {
                    "type": "boolean"
                  },
                  "header_shape": {
                    "type": "string",
                    "enum": [
                      "rounded",
                      "squared"
                    ],
                    "default": "rounded"
                  },
                  "header_online": {
                    "type": "string"
                  },
                  "start_chat_button": {
                    "type": "string"
                  },
                  "offline_chat_button": {
                    "type": "string"
                  },
                  "header_offline": {
                    "type": "string"
                  },
                  "download_transcript": {
                    "type": "boolean"
                  },
                  "timeout": {
                    "type": "integer"
                  },
                  "whiteLabel": {
                    "type": "string"
                  },
                  "defaultWhiteLabel": {
                    "type": "boolean"
                  },
                  "sitepic": {
                    "type": "string"
                  },
                  "closingQuestion": {
                    "type": "string"
                  },
                  "formSubmitSuccessMessage": {
                    "type": "string"
                  },
                  "formSubmitFailureMessage": {
                    "type": "string"
                  },
                  "noteTitle": {
                    "type": "string"
                  },
                  "placeholderMessage": {
                    "type": "string"
                  },
                  "closingMessage": {
                    "type": "string"
                  },
                  "closingMessageButton": {
                    "type": "string"
                  },
                  "skipMessageButton": {
                    "type": "string"
                  },
                  "conditionAgreement": {
                    "type": "boolean"
                  },
                  "enableRating": {
                    "type": "boolean"
                  },
                  "enableFeedback": {
                    "type": "boolean"
                  },
                  "enableSendButton": {
                    "type": "boolean"
                  },
                  "feedbackTitle": {
                    "type": "string"
                  },
                  "ratingType": {
                    "type": "string",
                    "enum": [
                      "star",
                      "thumb"
                    ],
                    "default": "star"
                  },
                  "ratingStarsNumber": {
                    "type": "integer"
                  },
                  "onlineForm": {
                    "type": "string"
                  },
                  "offlineForm": {
                    "type": "string"
                  },
                  "token": {
                    "type": "string"
                  },
                  "autoclose": {
                    "type": "boolean"
                  },
                  "enableCustomerWriting": {
                    "type": "boolean"
                  },
                  "forwardTranscript": {
                    "type": "boolean"
                  },
                  "forwardTranscriptMessage": {
                    "type": "string"
                  },
                  "forwardOffline": {
                    "type": "boolean"
                  },
                  "forwardOfflineAddress": {
                    "type": "string"
                  },
                  "waitingTitle": {
                    "type": "string"
                  },
                  "waitingMessage": {
                    "type": "string"
                  },
                  "offlineMessageSubject": {
                    "type": "string"
                  },
                  "offlineMessageBody": {
                    "type": "string"
                  },
                  "enableUnmanagedNote": {
                    "type": "boolean"
                  },
                  "unmanagedMessage": {
                    "type": "string"
                  },
                  "skipUnmanaged": {
                    "type": "string"
                  },
                  "sendUnmanaged": {
                    "type": "string"
                  },
                  "enableCustomerAttachment": {
                    "type": "boolean"
                  },
                  "enableCustomerAudioRecording": {
                    "type": "boolean"
                  },
                  "enableCustomerCheckmarks": {
                    "type": "boolean"
                  },
                  "agentAvatar": {
                    "type": "string"
                  },
                  "showAgentAvatar": {
                    "type": "boolean"
                  },
                  "timezone": {
                    "type": "string"
                  },
                  "notificationTemplate": {
                    "type": "string"
                  },
                  "notificationSound": {
                    "type": "boolean"
                  },
                  "notificationShake": {
                    "type": "boolean"
                  },
                  "hideWhenOffline": {
                    "type": "boolean"
                  },
                  "agentIdentifier": {
                    "type": "string"
                  },
                  "waitForTheAssignedAgent": {
                    "type": "integer"
                  },
                  "waitForTheAssignedQueue": {
                    "type": "integer"
                  },
                  "alignment": {
                    "type": "string"
                  },
                  "verticalAlignment": {
                    "type": "integer"
                  },
                  "labelText": {
                    "type": "string"
                  },
                  "messagesAlignment": {
                    "type": "string"
                  },
                  "defaultTitle": {
                    "type": "string"
                  },
                  "customerAvatar": {
                    "type": "string"
                  },
                  "showCustomerAvatar": {
                    "type": "boolean"
                  },
                  "messageFontSize": {
                    "type": "integer"
                  },
                  "backgroundColor": {
                    "type": "string"
                  },
                  "queueTransfer": {
                    "type": "boolean"
                  },
                  "queueTransferTimeout": {
                    "type": "integer"
                  },
                  "agentTransfer": {
                    "type": "boolean"
                  },
                  "agentTransferTimeout": {
                    "type": "integer"
                  },
                  "systemAlias": {
                    "type": "string"
                  },
                  "systemAvatar": {
                    "type": "string"
                  },
                  "mandatoryDispositionPauseId": {
                    "type": "integer"
                  },
                  "mandatoryDisposition": {
                    "type": "boolean"
                  },
                  "vidaooEscalation": {
                    "type": "boolean"
                  },
                  "vidaooApiKey": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "address",
                  "key",
                  "color",
                  "color_button",
                  "textColor",
                  "backgroundColor"
                ]
              }
            }
          }
        }
      }
    },
    "/chat/websites/{id}/fields": {
      "get": {
        "summary": "Gets Website Fields",
        "operationId": "getFields",
        "tags": [
          "Chat Websites"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatWebsite"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/chat/websites/{id}/offline_messages": {
      "get": {
        "summary": "Gets Website Offline Messages",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getOfflineMessages",
        "tags": [
          "Chat Websites"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatWebsite"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/chat/websites/{id}/users": {
      "get": {
        "summary": "Gets agents from website",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getAgents",
        "tags": [
          "Chat Websites"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatWebsite"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add agents to a website",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addAgents",
        "tags": [
          "Chat Websites"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatWebsite"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new chatWebsite",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Removes agents from a website",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeAgents",
        "tags": [
          "Chat Websites"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatWebsite"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/chat/websites/{id}/notify": {
      "post": {
        "summary": "Notify new message",
        "operationId": "notify",
        "tags": [
          "Chat Websites"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatWebsite"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new chatWebsite",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/chat/websites/{id}/offline": {
      "post": {
        "summary": "Offline message",
        "operationId": "offline",
        "tags": [
          "Chat Websites"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChatWebsite"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new chatWebsite",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "from": {
                    "type": "string"
                  },
                  "mapKeyOffline": {
                    "type": "string"
                  },
                  "body": {
                    "type": "object",
                    "properties": {
                      "attachments": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "format": "binary"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cloudProviders": {
      "get": {
        "summary": "Gets a list of CloudProviders",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllCloudProvider",
        "tags": [
          "CloudProviders"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of CloudProviders",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CloudProvider"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of CloudProviders",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CloudProvider"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new CloudProvider",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createCloudProvider",
        "tags": [
          "CloudProviders"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new cloudProvider",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "service": {
                    "type": "string",
                    "enum": [
                      "AmazonAWS",
                      "Google"
                    ],
                    "default": "AmazonAWS"
                  },
                  "data1": {
                    "type": "string"
                  },
                  "data2": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "service"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "CloudProvider successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloudProvider"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/cloudProviders/{id}": {
      "get": {
        "summary": "Gets a single CloudProvider",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getCloudProviderById",
        "tags": [
          "CloudProviders"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CloudProvider to get"
          }
        ],
        "responses": {
          "200": {
            "description": "CloudProvider with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloudProvider"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing CloudProvider",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateCloudProviderById",
        "tags": [
          "CloudProviders"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new cloudProvider",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CloudProvider to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing CloudProvider",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteCloudProviderById",
        "tags": [
          "CloudProviders"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CloudProvider to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/cloudProviders/oauth2/microsoft/authorize/{id}": {
      "get": {
        "summary": "Generates the Microsoft Identity platform authorization url",
        "description": "Generates the Microsoft Identity platform authorization url",
        "operationId": "cloudProviderOauth2MicrosoftAuthorize",
        "tags": [
          "CloudProviders"
        ],
        "responses": {
          "200": {
            "description": "Authorize OK"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/cloudProviders/oauth2/microsoft/callback": {
      "post": {
        "summary": "Receives an authorization code from Microsoft Identity platform",
        "description": "Receives an authorization code from Microsoft Identity platform",
        "operationId": "cloudProviderOauth2MicrosoftCallback",
        "tags": [
          "CloudProviders"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/cloudProviders/{id}/get-pending-jobs": {
      "get": {
        "summary": "Gets a count for the pending transcription jobs of the given cloud provider",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getCloudProviderById",
        "tags": [
          "CloudProviders"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CloudProvider to query"
          }
        ],
        "responses": {
          "200": {
            "description": "Count for every transcription job",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "TRANSCRIPTION": {
                      "type": "number"
                    },
                    "SENTIMENT": {
                      "type": "number"
                    },
                    "POST_CALL_ANALYTICS": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/cm/companies": {
      "get": {
        "summary": "Gets a list of Companies",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllCmCompany",
        "tags": [
          "Cm Companies"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Companies",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CmCompany"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Companies",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CmCompany"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Company",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createCmCompany",
        "tags": [
          "Cm Companies"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new cmCompany",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "vat": {
                    "type": "string"
                  },
                  "companyId": {
                    "type": "string"
                  },
                  "website": {
                    "type": "string"
                  },
                  "phone": {
                    "type": "string"
                  },
                  "fax": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "street": {
                    "type": "string"
                  },
                  "postalCode": {
                    "type": "string"
                  },
                  "city": {
                    "type": "string"
                  },
                  "country": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "emailDomain": {
                    "type": "string"
                  },
                  "sStreet": {
                    "type": "string"
                  },
                  "sPostalCode": {
                    "type": "string"
                  },
                  "sCity": {
                    "type": "string"
                  },
                  "sCountry": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "CmCompany successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CmCompany"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/cm/companies/describe": {
      "get": {
        "summary": "Gets table info about Companies",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeCmCompany",
        "tags": [
          "Cm Companies"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/cm/companies/{id}": {
      "get": {
        "summary": "Gets a single Company",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getCmCompanyById",
        "tags": [
          "Cm Companies"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CmCompany to get"
          }
        ],
        "responses": {
          "200": {
            "description": "CmCompany with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CmCompany"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Company",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateCmCompanyById",
        "tags": [
          "Cm Companies"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new cmCompany",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CmCompany to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Company",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteCmCompanyById",
        "tags": [
          "Cm Companies"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CmCompany to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/cm/companies/{id}/contacts": {
      "get": {
        "summary": "Gets List Contacts",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getContacts",
        "tags": [
          "Cm Companies"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CmCompany"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/cm/contacts": {
      "get": {
        "summary": "Gets a list of Contacts",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllCmContact",
        "tags": [
          "Cm Contacts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Contacts",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CmContact"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Contacts",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CmContact"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Create Contact",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "create",
        "tags": [
          "Cm Contacts"
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new cmContact",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/cm/contacts/describe": {
      "get": {
        "summary": "Gets table info about Contacts",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeCmContact",
        "tags": [
          "Cm Contacts"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/cm/contacts/{id}": {
      "get": {
        "summary": "Gets a single Contact",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "show",
        "tags": [
          "Cm Contacts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CmContact"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update a single Contact",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "update",
        "tags": [
          "Cm Contacts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CmContact"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new cmContact",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Contact",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteCmContactById",
        "tags": [
          "Cm Contacts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CmContact to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/cm/contacts/{id}/tags": {
      "get": {
        "summary": "Gets configurations tags",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getTags",
        "tags": [
          "Cm Contacts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CmContact"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Sets new tags",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "setTags",
        "tags": [
          "Cm Contacts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CmContact"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new cmContact",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/cm/contacts/{id}/hoppers": {
      "get": {
        "summary": "Gets contact hoppers",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getHoppers",
        "tags": [
          "Cm Contacts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CmContact"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/cm/contacts/{id}/hopper_histories": {
      "get": {
        "summary": "Gets contact hopper histories",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getHopperHistories",
        "tags": [
          "Cm Contacts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CmContact"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/cm/contacts/{id}/hopper_finals": {
      "get": {
        "summary": "Gets contact hopper finals",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getHopperFinals",
        "tags": [
          "Cm Contacts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CmContact"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/cm/contacts/{id}/jscripty_sessions": {
      "get": {
        "summary": "Gets contact hopper blacks",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getJscriptySessions",
        "tags": [
          "Cm Contacts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CmContact"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/cm/contacts/{id}/journey": {
      "get": {
        "summary": "Gets customer journey",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getCustomerJourney",
        "tags": [
          "Cm Contacts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CmContact"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/cm/contacts/merge": {
      "post": {
        "summary": "Merge Contact",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "merge",
        "tags": [
          "Cm Contacts"
        ],
        "responses": {
          "201": {
            "description": "The contact resulting from the merge",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CmContact"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "The references of the contacts to be merged",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "to": {
                    "type": "integer"
                  },
                  "from": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cm/contacts/create_many": {
      "post": {
        "summary": "Create Contacts",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "bulkCreate",
        "tags": [
          "Cm Contacts"
        ],
        "responses": {
          "201": {
            "description": "A summary of the bulk create operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "integer"
                    },
                    "failure": {
                      "type": "integer"
                    },
                    "duplicates": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "Multiple contacts to be created",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CmContact"
                }
              }
            }
          }
        }
      }
    },
    "/cm/contacts/upload": {
      "post": {
        "summary": "Upload csv",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "postupload",
        "tags": [
          "Cm contacts"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new cmContact",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "success."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/cm/contacts/upload/{id}": {
      "post": {
        "summary": "Import new contacts by csv",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "import",
        "tags": [
          "Cm contacts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CmContact"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new cmContact",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/cm/custom_fields": {
      "get": {
        "summary": "Gets a list of Custom Fields",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllCmCustomField",
        "tags": [
          "Cm Custom Fields"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          },
          {
            "in": "query",
            "name": "deletedRecordsPolicy",
            "schema": {
              "type": "enum[NODELETED, INCLUDEDELETED, ONLYDELETED]"
            },
            "required": false,
            "description": "If NODELETED, only active records will be included. If INCLUDEDELETED, soft deleted records and active records will be included alike. If ONLYDELETED, ONLY soft deleted records will be returned. Defaults to NODELETED."
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Custom Fields",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CmCustomField"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Custom Fields",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CmCustomField"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/cm/custom_fields/{id}": {
      "get": {
        "summary": "Gets a single Custom Field",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getCmCustomFieldById",
        "tags": [
          "Cm Custom Fields"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CmCustomField to get"
          }
        ],
        "responses": {
          "200": {
            "description": "CmCustomField with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CmCustomField"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Custom Field",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateCmCustomFieldById",
        "tags": [
          "Cm Custom Fields"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new cmCustomField",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CmCustomField to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Custom Field",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteCmCustomFieldById",
        "tags": [
          "Cm Custom Fields"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CmCustomField to be deleted"
          },
          {
            "in": "query",
            "name": "force",
            "schema": {
              "type": "boolean"
            },
            "required": false,
            "description": "If true, the items will be forcefully deleted and the db schema will be udpated; a reversible delete will be performed otherwise. Defaults to false"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/cm/custom_field": {
      "post": {
        "summary": "Create a new custom field",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "create",
        "tags": [
          "Custom Fields"
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new cmCustomField",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/cm/hopper": {
      "get": {
        "summary": "Gets a list of Hopper",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllCmHopper",
        "tags": [
          "Cm Hopper"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Hopper",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CmHopper"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Hopper",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CmHopper"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Hopper",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createCmHopper",
        "tags": [
          "Cm Hopper"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new cmHopper",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "phone": {
                    "type": "string"
                  },
                  "active": {
                    "type": "boolean"
                  },
                  "scheduledat": {
                    "type": "string"
                  },
                  "countbusyretry": {
                    "type": "integer"
                  },
                  "countcongestionretry": {
                    "type": "integer"
                  },
                  "countnoanswerretry": {
                    "type": "integer"
                  },
                  "callback": {
                    "type": "boolean"
                  },
                  "callbackuniqueid": {
                    "type": "string"
                  },
                  "callbackat": {
                    "type": "string"
                  },
                  "priority": {
                    "type": "integer"
                  },
                  "recallme": {
                    "type": "boolean"
                  },
                  "ContactId": {
                    "type": "integer"
                  },
                  "ListId": {
                    "type": "integer"
                  },
                  "UserId": {
                    "type": "integer"
                  },
                  "VoiceQueueId": {
                    "type": "integer"
                  },
                  "CampaignId": {
                    "type": "integer"
                  },
                  "countnosuchnumberretry": {
                    "type": "integer"
                  },
                  "countdropretry": {
                    "type": "integer"
                  },
                  "countabandonedretry": {
                    "type": "integer"
                  },
                  "countmachineretry": {
                    "type": "integer"
                  },
                  "countagentrejectretry": {
                    "type": "integer"
                  }
                },
                "required": [
                  "phone"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A CmHopper with these parameters was already present and was successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CmHopper"
                }
              }
            }
          },
          "201": {
            "description": "CmHopper successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CmHopper"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/cm/hopper/describe": {
      "get": {
        "summary": "Gets table info about Hopper",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeCmHopper",
        "tags": [
          "Cm Hopper"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/cm/hopper/opencontacts": {
      "get": {
        "summary": "Gets Open Contacts",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getOpenContacts",
        "tags": [
          "Cm Hopper"
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/cm/hopper/{id}": {
      "get": {
        "summary": "Gets a single Hopper",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getCmHopperById",
        "tags": [
          "Cm Hopper"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CmHopper to get"
          }
        ],
        "responses": {
          "200": {
            "description": "CmHopper with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CmHopper"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Hopper",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateCmHopperById",
        "tags": [
          "Cm Hopper"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new cmHopper",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CmHopper to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Delete Hopper",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "destroy",
        "tags": [
          "Cm Hopper"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CmHopper"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/cm/hopper/preview": {
      "post": {
        "summary": "Gets Preview Dialer Contacts",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getPreview",
        "tags": [
          "Cm Hopper"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new cmHopper",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/cm/hopper/:id/previewrecall": {
      "get": {
        "summary": "Gets Preview Dialer Contacts for recall",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "previewRecallCmHopper",
        "tags": [
          "Cm Hopper"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CmHopper to get"
          }
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve Preview Dialer Contacts for recall",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/cm/hopper_black": {
      "get": {
        "summary": "Gets a list of Hopper Black",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllCmHopperBlack",
        "tags": [
          "Cm Hopper Black"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Hopper Black",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CmHopperBlack"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Hopper Black",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CmHopperBlack"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/cm/hopper_black/describe": {
      "get": {
        "summary": "Gets table info about Hopper Black",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeCmHopperBlack",
        "tags": [
          "Cm Hopper Black"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/cm/hopper_black/{id}": {
      "get": {
        "summary": "Gets a single Hopper Black",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getCmHopperBlackById",
        "tags": [
          "Cm Hopper Black"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CmHopperBlack to get"
          }
        ],
        "responses": {
          "200": {
            "description": "CmHopperBlack with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CmHopperBlack"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Hopper Black",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateCmHopperBlackById",
        "tags": [
          "Cm Hopper Black"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new cmHopperBlack",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CmHopperBlack to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Hopper Black",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteCmHopperBlackById",
        "tags": [
          "Cm Hopper Black"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CmHopperBlack to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/cm/hopper_final": {
      "get": {
        "summary": "Gets a list of HopperFinal",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllCmHopperFinal",
        "tags": [
          "Cm Hopper Final"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of HopperFinal",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CmHopperFinal"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of HopperFinal",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CmHopperFinal"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/cm/hopper_final/describe": {
      "get": {
        "summary": "Gets table info about HopperFinal",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeCmHopperFinal",
        "tags": [
          "Cm Hopper Final"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/cm/hopper_final/{id}": {
      "get": {
        "summary": "Gets a single HopperFinal",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getCmHopperFinalById",
        "tags": [
          "Cm Hopper Final"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CmHopperFinal to get"
          }
        ],
        "responses": {
          "200": {
            "description": "CmHopperFinal with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CmHopperFinal"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update a single hopper final",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "update",
        "tags": [
          "Cm Hopper Final"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CmHopperFinal"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new cmHopperFinal",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/cm/hopper_final/voice/queue/countAttributes/{id}": {
      "get": {
        "summary": "Return number contacts for attributes",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "countContactsQueueCampaignHopperFinal",
        "tags": [
          "Cm Hopper Final"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CmHopperFinal"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "attributes": {
                      "noSuchContacts": {
                        "type": "integer"
                      },
                      "noAnswerContacts": {
                        "type": "integer"
                      },
                      "busyContacts": {
                        "type": "integer"
                      },
                      "congestionContacts": {
                        "type": "integer"
                      },
                      "dropContacts": {
                        "type": "integer"
                      },
                      "abandonedContacts": {
                        "type": "integer"
                      },
                      "reCallContacts": {
                        "type": "integer"
                      },
                      "answeringMachine": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/cm/hopper_final/campaign/countAttributes/{id}": {
      "get": {
        "summary": "Return number contacts for attributes",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "countContactsIvrCampaignHopperFinal",
        "tags": [
          "Cm Hopper Final"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CmHopperFinal"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/cm/hopper_final/voice/queue/moveContacts/{id}": {
      "post": {
        "summary": "Move contacts in hopper",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "moveContactsQueueCampaignHopperFinal",
        "tags": [
          "Cm Hopper Final"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CmHopperFinal"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new cmHopperFinal",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/cm/hopper_final/voice/campaign/moveContacts/{id}": {
      "post": {
        "summary": "Move contacts in hopper",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "moveContactsIvrCampaignHopperFinal",
        "tags": [
          "Cm Hopper Final"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CmHopperFinal"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new cmHopperFinal",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/cm/hopper_final/checkContactHopper": {
      "post": {
        "summary": "Check if contact is in hopper",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "checkContactHopper",
        "tags": [
          "Cm Hopper Final"
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new cmHopperFinal",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/cm/hopper_history": {
      "get": {
        "summary": "Gets a list of HopperHistory",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllCmHopperHistory",
        "tags": [
          "Cm Hopper History"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of HopperHistory",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CmHopperHistory"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of HopperHistory",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CmHopperHistory"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new HopperHistory",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createCmHopperHistory",
        "tags": [
          "Cm Hopper History"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new cmHopperHistory",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "state": {
                    "type": "integer"
                  },
                  "statedesc": {
                    "type": "string"
                  },
                  "scheduledat": {
                    "type": "string"
                  },
                  "countbusyretry": {
                    "type": "integer"
                  },
                  "countcongestionretry": {
                    "type": "integer"
                  },
                  "countnoanswerretry": {
                    "type": "integer"
                  },
                  "countglobal": {
                    "type": "integer"
                  },
                  "uniqueid": {
                    "type": "string"
                  },
                  "originatecalleridnum": {
                    "type": "string"
                  },
                  "originatecalleridname": {
                    "type": "string"
                  },
                  "calleridnum": {
                    "type": "string"
                  },
                  "calleridname": {
                    "type": "string"
                  },
                  "starttime": {
                    "type": "string"
                  },
                  "responsetime": {
                    "type": "string"
                  },
                  "answertime": {
                    "type": "string"
                  },
                  "droptime": {
                    "type": "string"
                  },
                  "endtime": {
                    "type": "string"
                  },
                  "ringtime": {
                    "type": "integer"
                  },
                  "holdtime": {
                    "type": "integer"
                  },
                  "talktime": {
                    "type": "integer"
                  },
                  "followuptime": {
                    "type": "integer"
                  },
                  "dropreason": {
                    "type": "string"
                  },
                  "campaign": {
                    "type": "string"
                  },
                  "campaigntype": {
                    "type": "string"
                  },
                  "membername": {
                    "type": "string"
                  },
                  "reason": {
                    "type": "string"
                  },
                  "amd": {
                    "type": "boolean"
                  },
                  "fax": {
                    "type": "boolean"
                  },
                  "callback": {
                    "type": "boolean"
                  },
                  "callbackuniqueid": {
                    "type": "string"
                  },
                  "callbackat": {
                    "type": "string"
                  },
                  "recallme": {
                    "type": "boolean"
                  },
                  "editedat": {
                    "type": "string"
                  },
                  "edited": {
                    "type": "boolean"
                  },
                  "countnosuchnumberretry": {
                    "type": "integer"
                  },
                  "countdropretry": {
                    "type": "integer"
                  },
                  "countabandonedretry": {
                    "type": "integer"
                  },
                  "countmachineretry": {
                    "type": "integer"
                  },
                  "countagentrejectretry": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "CmHopperHistory successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CmHopperHistory"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/cm/hopper_history/describe": {
      "get": {
        "summary": "Gets table info about HopperHistory",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeCmHopperHistory",
        "tags": [
          "Cm Hopper History"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/cm/hopper_history/{id}": {
      "get": {
        "summary": "Gets a single HopperHistory",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getCmHopperHistoryById",
        "tags": [
          "Cm Hopper History"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CmHopperHistory to get"
          }
        ],
        "responses": {
          "200": {
            "description": "CmHopperHistory with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CmHopperHistory"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update a single hopper history",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "update",
        "tags": [
          "Cm Hopper History"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CmHopperHistory"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new cmHopperHistory",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/cm/lists": {
      "get": {
        "summary": "Gets a list of Lists",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllCmList",
        "tags": [
          "Cm Lists"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Lists",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CmList"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Lists",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CmList"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new List",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createCmList",
        "tags": [
          "Cm Lists"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new cmList",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "dialPrefix": {
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "CmList successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CmList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/cm/lists/describe": {
      "get": {
        "summary": "Gets table info about Lists",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeCmList",
        "tags": [
          "Cm Lists"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/cm/lists/{id}": {
      "get": {
        "summary": "Gets a single List",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getCmListById",
        "tags": [
          "Cm Lists"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CmList to get"
          }
        ],
        "responses": {
          "200": {
            "description": "CmList with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CmList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing List",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateCmListById",
        "tags": [
          "Cm Lists"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new cmList",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CmList to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing List",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteCmListById",
        "tags": [
          "Cm Lists"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CmList to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/cm/lists/{id}/dispositions": {
      "get": {
        "summary": "Gets list dispositions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getDispositions",
        "tags": [
          "Cm Lists"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CmList"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates new disposition",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addDisposition",
        "tags": [
          "Cm Lists"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CmList"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new cmList",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "dialPrefix": {
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Removes dispositions from account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeDispositions",
        "tags": [
          "Cm Lists"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CmList"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/cm/lists/{id}/contacts": {
      "get": {
        "summary": "Gets List Contacts",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getContacts",
        "tags": [
          "Cm Lists"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CmList"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates new contacts",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addContacts",
        "tags": [
          "Cm Lists"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CmList"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new cmList",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "dialPrefix": {
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        }
      }
    },
    "/cm/lists/{id}/contacts/csv": {
      "get": {
        "summary": "Gets CSV List Contacts",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getContactsCsv",
        "tags": [
          "Cm Lists"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CmList"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/cm/lists/{id}/fields": {
      "get": {
        "summary": "Gets Custom Fields",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getCustomFields",
        "tags": [
          "Cm Lists"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CmList"
          },
          {
            "in": "query",
            "name": "deletedRecordsPolicy",
            "schema": {
              "type": "enum[NODELETED, INCLUDEDELETED, ONLYDELETED]"
            },
            "required": false,
            "description": "If NODELETED, only active records will be included. If INCLUDEDELETED, soft deleted records and active records will be included alike. If ONLYDELETED, ONLY soft deleted records will be returned. Defaults to NODELETED."
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new custom field",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addCustomField",
        "tags": [
          "Cm Lists"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CmList"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new cmList",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/cm/lists/{id}/users": {
      "get": {
        "summary": "Gets agents from list",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getAgents",
        "tags": [
          "Cm Lists"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CmList"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Adds agents to a list",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addAgents",
        "tags": [
          "Cm Lists"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CmList"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new cmList",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Removes agents from a list",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeAgents",
        "tags": [
          "Cm Lists"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CmList"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/cm/lists/{id}/related-accounts": {
      "get": {
        "summary": "Gets all entities related to this list (chat websites, fax accounts, mail accounts, openchannel accounts, sms accounts, whatsapp accounts, actions from triggers)",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getRelatedAccounts",
        "tags": [
          "Cm Lists"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the CmList"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "chatWebsites": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ChatWebsite"
                      }
                    },
                    "faxAccounts": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/FaxAccount"
                      }
                    },
                    "mailAccounts": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MailAccount"
                      }
                    },
                    "openchannelAccounts": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OpenchannelAccount"
                      }
                    },
                    "smsAccounts": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SmsAccount"
                      }
                    },
                    "whatsappAccounts": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/WhatsappAccount"
                      }
                    },
                    "actions": {
                      "type": "array",
                      "items": {
                        "$refl": "#/components/schemas/Action"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/conditions/{id}": {
      "put": {
        "summary": "Update an existing Condition",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateConditionById",
        "tags": [
          "Conditions"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new condition",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Condition to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Condition",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteConditionById",
        "tags": [
          "Conditions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Condition to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/dashboards": {
      "get": {
        "summary": "Gets a list of Dashboards",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllDashboard",
        "tags": [
          "Dashboards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Dashboards",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Dashboard"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Dashboards",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Dashboard"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Dashboard",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createDashboard",
        "tags": [
          "Dashboards"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new dashboard",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Dashboard successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dashboard"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/dashboards/{id}": {
      "get": {
        "summary": "Gets a single Dashboard",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getDashboardById",
        "tags": [
          "Dashboards"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Dashboard to get"
          }
        ],
        "responses": {
          "200": {
            "description": "Dashboard with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dashboard"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Dashboard",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateDashboardById",
        "tags": [
          "Dashboards"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new dashboard",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Dashboard to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Dashboard",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteDashboardById",
        "tags": [
          "Dashboards"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Dashboard to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/dashboards/{id}/items": {
      "get": {
        "summary": "Gets items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getItems",
        "tags": [
          "Dashboards"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Dashboard"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates new item",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addItem",
        "tags": [
          "Dashboards"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Dashboard"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new dashboard",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/dashboards/clone": {
      "post": {
        "summary": "Clone an existing Dashboard",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "cloneDashboard",
        "tags": [
          "Dashboards"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new dashboard",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Dashboard successfully cloned. Returns the cloned object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dashboard"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/dashboards/items/{id}": {
      "get": {
        "summary": "Gets a single Dashboard Item",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getDashboardItemById",
        "tags": [
          "Dashboard Items"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the DashboardItem to get"
          }
        ],
        "responses": {
          "200": {
            "description": "DashboardItem with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardItem"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing item",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "update",
        "tags": [
          "Dashboard Items"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the DashboardItem"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new dashboardItem",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Dashboard Item",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteDashboardItemById",
        "tags": [
          "Dashboard Items"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the DashboardItem to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/dashboards/items": {
      "post": {
        "summary": "Create dasboard item",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "create",
        "tags": [
          "Dashboard Items"
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new dashboardItem",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/dispositions": {
      "get": {
        "summary": "Gets a list of Dispositions",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllDisposition",
        "tags": [
          "Dispositions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Dispositions",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Disposition"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Dispositions",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Disposition"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Disposition",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createDisposition",
        "tags": [
          "Dispositions"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new disposition",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "level": {
                    "type": "string",
                    "enum": [
                      "first",
                      "second",
                      "third"
                    ],
                    "default": "first"
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "level"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Disposition successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Disposition"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/dispositions/{id}": {
      "get": {
        "summary": "Gets a single Disposition",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getDispositionById",
        "tags": [
          "Dispositions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Disposition to get"
          }
        ],
        "responses": {
          "200": {
            "description": "Disposition with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Disposition"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Disposition",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateDispositionById",
        "tags": [
          "Dispositions"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new disposition",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Disposition to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Disposition",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteDispositionById",
        "tags": [
          "Dispositions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Disposition to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/fax/accounts": {
      "get": {
        "summary": "Gets a list of Accounts",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllFaxAccount",
        "tags": [
          "Fax Accounts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Accounts",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FaxAccount"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Accounts",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FaxAccount"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createFaxAccount",
        "tags": [
          "Fax Accounts"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new faxAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "ecm": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no"
                    ],
                    "default": "yes"
                  },
                  "headerinfo": {
                    "type": "string"
                  },
                  "localstationid": {
                    "type": "string"
                  },
                  "minrate": {
                    "type": "string",
                    "enum": [
                      "2400",
                      "4800",
                      "7200",
                      "9600",
                      "12000",
                      "14400"
                    ],
                    "default": "2400"
                  },
                  "maxrate": {
                    "type": "string",
                    "enum": [
                      "2400",
                      "4800",
                      "7200",
                      "9600",
                      "12000",
                      "14400"
                    ],
                    "default": "2400"
                  },
                  "modem": {
                    "type": "string"
                  },
                  "gateway": {
                    "type": "string"
                  },
                  "faxdetect": {
                    "type": "string"
                  },
                  "t38timeout": {
                    "type": "integer"
                  },
                  "tech": {
                    "type": "string",
                    "enum": [
                      "SIP",
                      "IAX",
                      "DADHI",
                      "KHOMP"
                    ],
                    "default": "SIP"
                  },
                  "key": {
                    "type": "string"
                  },
                  "notificationTemplate": {
                    "type": "string"
                  },
                  "notificationSound": {
                    "type": "boolean"
                  },
                  "notificationShake": {
                    "type": "boolean"
                  },
                  "waitForTheAssignedAgent": {
                    "type": "integer"
                  },
                  "waitForTheAssignedQueue": {
                    "type": "integer"
                  },
                  "queueTransfer": {
                    "type": "boolean"
                  },
                  "queueTransferTimeout": {
                    "type": "integer"
                  },
                  "agentTransfer": {
                    "type": "boolean"
                  },
                  "agentTransferTimeout": {
                    "type": "integer"
                  },
                  "mandatoryDispositionPauseId": {
                    "type": "integer"
                  },
                  "mandatoryDisposition": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "name",
                  "key"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "FaxAccount successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaxAccount"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/fax/accounts/describe": {
      "get": {
        "summary": "Gets table info about Accounts",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeFaxAccount",
        "tags": [
          "Fax Accounts"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/fax/accounts/{id}": {
      "get": {
        "summary": "Gets a single Account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getFaxAccountById",
        "tags": [
          "Fax Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FaxAccount to get"
          }
        ],
        "responses": {
          "200": {
            "description": "FaxAccount with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaxAccount"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateFaxAccountById",
        "tags": [
          "Fax Accounts"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new faxAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FaxAccount to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteFaxAccountById",
        "tags": [
          "Fax Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FaxAccount to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/fax/accounts/{id}/dispositions": {
      "get": {
        "summary": "Gets account dispositions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getDispositions",
        "tags": [
          "Fax Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FaxAccount"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates new disposition",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addDisposition",
        "tags": [
          "Fax Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FaxAccount"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new faxAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "ecm": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no"
                    ],
                    "default": "yes"
                  },
                  "headerinfo": {
                    "type": "string"
                  },
                  "localstationid": {
                    "type": "string"
                  },
                  "minrate": {
                    "type": "string",
                    "enum": [
                      "2400",
                      "4800",
                      "7200",
                      "9600",
                      "12000",
                      "14400"
                    ],
                    "default": "2400"
                  },
                  "maxrate": {
                    "type": "string",
                    "enum": [
                      "2400",
                      "4800",
                      "7200",
                      "9600",
                      "12000",
                      "14400"
                    ],
                    "default": "2400"
                  },
                  "modem": {
                    "type": "string"
                  },
                  "gateway": {
                    "type": "string"
                  },
                  "faxdetect": {
                    "type": "string"
                  },
                  "t38timeout": {
                    "type": "integer"
                  },
                  "tech": {
                    "type": "string",
                    "enum": [
                      "SIP",
                      "IAX",
                      "DADHI",
                      "KHOMP"
                    ],
                    "default": "SIP"
                  },
                  "key": {
                    "type": "string"
                  },
                  "notificationTemplate": {
                    "type": "string"
                  },
                  "notificationSound": {
                    "type": "boolean"
                  },
                  "notificationShake": {
                    "type": "boolean"
                  },
                  "waitForTheAssignedAgent": {
                    "type": "integer"
                  },
                  "waitForTheAssignedQueue": {
                    "type": "integer"
                  },
                  "queueTransfer": {
                    "type": "boolean"
                  },
                  "queueTransferTimeout": {
                    "type": "integer"
                  },
                  "agentTransfer": {
                    "type": "boolean"
                  },
                  "agentTransferTimeout": {
                    "type": "integer"
                  },
                  "mandatoryDispositionPauseId": {
                    "type": "integer"
                  },
                  "mandatoryDisposition": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "name",
                  "key"
                ]
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Removes dispositions from account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeDispositions",
        "tags": [
          "Fax Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FaxAccount"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/fax/accounts/{id}/canned_answers": {
      "get": {
        "summary": "Gets account canned answers",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getAnswers",
        "tags": [
          "Fax Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FaxAccount"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates new canned answer",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addAnswer",
        "tags": [
          "Fax Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FaxAccount"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new faxAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "ecm": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no"
                    ],
                    "default": "yes"
                  },
                  "headerinfo": {
                    "type": "string"
                  },
                  "localstationid": {
                    "type": "string"
                  },
                  "minrate": {
                    "type": "string",
                    "enum": [
                      "2400",
                      "4800",
                      "7200",
                      "9600",
                      "12000",
                      "14400"
                    ],
                    "default": "2400"
                  },
                  "maxrate": {
                    "type": "string",
                    "enum": [
                      "2400",
                      "4800",
                      "7200",
                      "9600",
                      "12000",
                      "14400"
                    ],
                    "default": "2400"
                  },
                  "modem": {
                    "type": "string"
                  },
                  "gateway": {
                    "type": "string"
                  },
                  "faxdetect": {
                    "type": "string"
                  },
                  "t38timeout": {
                    "type": "integer"
                  },
                  "tech": {
                    "type": "string",
                    "enum": [
                      "SIP",
                      "IAX",
                      "DADHI",
                      "KHOMP"
                    ],
                    "default": "SIP"
                  },
                  "key": {
                    "type": "string"
                  },
                  "notificationTemplate": {
                    "type": "string"
                  },
                  "notificationSound": {
                    "type": "boolean"
                  },
                  "notificationShake": {
                    "type": "boolean"
                  },
                  "waitForTheAssignedAgent": {
                    "type": "integer"
                  },
                  "waitForTheAssignedQueue": {
                    "type": "integer"
                  },
                  "queueTransfer": {
                    "type": "boolean"
                  },
                  "queueTransferTimeout": {
                    "type": "integer"
                  },
                  "agentTransfer": {
                    "type": "boolean"
                  },
                  "agentTransferTimeout": {
                    "type": "integer"
                  },
                  "mandatoryDispositionPauseId": {
                    "type": "integer"
                  },
                  "mandatoryDisposition": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "name",
                  "key"
                ]
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Removes canned answers from account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeAnswers",
        "tags": [
          "Fax Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FaxAccount"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/fax/accounts/{id}/interactions": {
      "get": {
        "summary": "Gets account interactions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getInteractions",
        "tags": [
          "Fax Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FaxAccount"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates new interactions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addInteraction",
        "tags": [
          "Fax Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FaxAccount"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new faxAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "ecm": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no"
                    ],
                    "default": "yes"
                  },
                  "headerinfo": {
                    "type": "string"
                  },
                  "localstationid": {
                    "type": "string"
                  },
                  "minrate": {
                    "type": "string",
                    "enum": [
                      "2400",
                      "4800",
                      "7200",
                      "9600",
                      "12000",
                      "14400"
                    ],
                    "default": "2400"
                  },
                  "maxrate": {
                    "type": "string",
                    "enum": [
                      "2400",
                      "4800",
                      "7200",
                      "9600",
                      "12000",
                      "14400"
                    ],
                    "default": "2400"
                  },
                  "modem": {
                    "type": "string"
                  },
                  "gateway": {
                    "type": "string"
                  },
                  "faxdetect": {
                    "type": "string"
                  },
                  "t38timeout": {
                    "type": "integer"
                  },
                  "tech": {
                    "type": "string",
                    "enum": [
                      "SIP",
                      "IAX",
                      "DADHI",
                      "KHOMP"
                    ],
                    "default": "SIP"
                  },
                  "key": {
                    "type": "string"
                  },
                  "notificationTemplate": {
                    "type": "string"
                  },
                  "notificationSound": {
                    "type": "boolean"
                  },
                  "notificationShake": {
                    "type": "boolean"
                  },
                  "waitForTheAssignedAgent": {
                    "type": "integer"
                  },
                  "waitForTheAssignedQueue": {
                    "type": "integer"
                  },
                  "queueTransfer": {
                    "type": "boolean"
                  },
                  "queueTransferTimeout": {
                    "type": "integer"
                  },
                  "agentTransfer": {
                    "type": "boolean"
                  },
                  "agentTransferTimeout": {
                    "type": "integer"
                  },
                  "mandatoryDispositionPauseId": {
                    "type": "integer"
                  },
                  "mandatoryDisposition": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "name",
                  "key"
                ]
              }
            }
          }
        }
      }
    },
    "/fax/accounts/{id}/applications": {
      "get": {
        "summary": "Gets account pplications",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getApplications",
        "tags": [
          "Fax Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FaxAccount"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates new applications",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addApplications",
        "tags": [
          "Fax Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FaxAccount"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new faxAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "ecm": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no"
                    ],
                    "default": "yes"
                  },
                  "headerinfo": {
                    "type": "string"
                  },
                  "localstationid": {
                    "type": "string"
                  },
                  "minrate": {
                    "type": "string",
                    "enum": [
                      "2400",
                      "4800",
                      "7200",
                      "9600",
                      "12000",
                      "14400"
                    ],
                    "default": "2400"
                  },
                  "maxrate": {
                    "type": "string",
                    "enum": [
                      "2400",
                      "4800",
                      "7200",
                      "9600",
                      "12000",
                      "14400"
                    ],
                    "default": "2400"
                  },
                  "modem": {
                    "type": "string"
                  },
                  "gateway": {
                    "type": "string"
                  },
                  "faxdetect": {
                    "type": "string"
                  },
                  "t38timeout": {
                    "type": "integer"
                  },
                  "tech": {
                    "type": "string",
                    "enum": [
                      "SIP",
                      "IAX",
                      "DADHI",
                      "KHOMP"
                    ],
                    "default": "SIP"
                  },
                  "key": {
                    "type": "string"
                  },
                  "notificationTemplate": {
                    "type": "string"
                  },
                  "notificationSound": {
                    "type": "boolean"
                  },
                  "notificationShake": {
                    "type": "boolean"
                  },
                  "waitForTheAssignedAgent": {
                    "type": "integer"
                  },
                  "waitForTheAssignedQueue": {
                    "type": "integer"
                  },
                  "queueTransfer": {
                    "type": "boolean"
                  },
                  "queueTransferTimeout": {
                    "type": "integer"
                  },
                  "agentTransfer": {
                    "type": "boolean"
                  },
                  "agentTransferTimeout": {
                    "type": "integer"
                  },
                  "mandatoryDispositionPauseId": {
                    "type": "integer"
                  },
                  "mandatoryDisposition": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "name",
                  "key"
                ]
              }
            }
          }
        }
      }
    },
    "/fax/accounts/{id}/messages": {
      "get": {
        "summary": "Gets account messages",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getMessages",
        "tags": [
          "Fax Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FaxAccount"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/fax/accounts/{id}/users": {
      "get": {
        "summary": "Gets agents from fax account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getAgents",
        "tags": [
          "Fax Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FaxAccount"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add agents to a fax account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addAgents",
        "tags": [
          "Fax Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FaxAccount"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new faxAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Removes agents from a fax account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeAgents",
        "tags": [
          "Fax Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FaxAccount"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/fax/accounts/addaccountapplications": {
      "post": {
        "summary": "Creates new account and applications",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addAccountApplications",
        "tags": [
          "Fax Accounts"
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new faxAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "ecm": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no"
                    ],
                    "default": "yes"
                  },
                  "headerinfo": {
                    "type": "string"
                  },
                  "localstationid": {
                    "type": "string"
                  },
                  "minrate": {
                    "type": "string",
                    "enum": [
                      "2400",
                      "4800",
                      "7200",
                      "9600",
                      "12000",
                      "14400"
                    ],
                    "default": "2400"
                  },
                  "maxrate": {
                    "type": "string",
                    "enum": [
                      "2400",
                      "4800",
                      "7200",
                      "9600",
                      "12000",
                      "14400"
                    ],
                    "default": "2400"
                  },
                  "modem": {
                    "type": "string"
                  },
                  "gateway": {
                    "type": "string"
                  },
                  "faxdetect": {
                    "type": "string"
                  },
                  "t38timeout": {
                    "type": "integer"
                  },
                  "tech": {
                    "type": "string",
                    "enum": [
                      "SIP",
                      "IAX",
                      "DADHI",
                      "KHOMP"
                    ],
                    "default": "SIP"
                  },
                  "key": {
                    "type": "string"
                  },
                  "notificationTemplate": {
                    "type": "string"
                  },
                  "notificationSound": {
                    "type": "boolean"
                  },
                  "notificationShake": {
                    "type": "boolean"
                  },
                  "waitForTheAssignedAgent": {
                    "type": "integer"
                  },
                  "waitForTheAssignedQueue": {
                    "type": "integer"
                  },
                  "queueTransfer": {
                    "type": "boolean"
                  },
                  "queueTransferTimeout": {
                    "type": "integer"
                  },
                  "agentTransfer": {
                    "type": "boolean"
                  },
                  "agentTransferTimeout": {
                    "type": "integer"
                  },
                  "mandatoryDispositionPauseId": {
                    "type": "integer"
                  },
                  "mandatoryDisposition": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "name",
                  "key"
                ]
              }
            }
          }
        }
      }
    },
    "/fax/accounts/updateaccountapplications": {
      "post": {
        "summary": "Update account and applications",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateAccountApplications",
        "tags": [
          "Fax Accounts"
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new faxAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "ecm": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no"
                    ],
                    "default": "yes"
                  },
                  "headerinfo": {
                    "type": "string"
                  },
                  "localstationid": {
                    "type": "string"
                  },
                  "minrate": {
                    "type": "string",
                    "enum": [
                      "2400",
                      "4800",
                      "7200",
                      "9600",
                      "12000",
                      "14400"
                    ],
                    "default": "2400"
                  },
                  "maxrate": {
                    "type": "string",
                    "enum": [
                      "2400",
                      "4800",
                      "7200",
                      "9600",
                      "12000",
                      "14400"
                    ],
                    "default": "2400"
                  },
                  "modem": {
                    "type": "string"
                  },
                  "gateway": {
                    "type": "string"
                  },
                  "faxdetect": {
                    "type": "string"
                  },
                  "t38timeout": {
                    "type": "integer"
                  },
                  "tech": {
                    "type": "string",
                    "enum": [
                      "SIP",
                      "IAX",
                      "DADHI",
                      "KHOMP"
                    ],
                    "default": "SIP"
                  },
                  "key": {
                    "type": "string"
                  },
                  "notificationTemplate": {
                    "type": "string"
                  },
                  "notificationSound": {
                    "type": "boolean"
                  },
                  "notificationShake": {
                    "type": "boolean"
                  },
                  "waitForTheAssignedAgent": {
                    "type": "integer"
                  },
                  "waitForTheAssignedQueue": {
                    "type": "integer"
                  },
                  "queueTransfer": {
                    "type": "boolean"
                  },
                  "queueTransferTimeout": {
                    "type": "integer"
                  },
                  "agentTransfer": {
                    "type": "boolean"
                  },
                  "agentTransferTimeout": {
                    "type": "integer"
                  },
                  "mandatoryDispositionPauseId": {
                    "type": "integer"
                  },
                  "mandatoryDisposition": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "name",
                  "key"
                ]
              }
            }
          }
        }
      }
    },
    "/fax/accounts/{id}/send": {
      "post": {
        "summary": "Send new fax",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "send",
        "tags": [
          "Fax Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FaxAccount"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new faxAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/fax/applications": {
      "get": {
        "summary": "Gets a list of Applications",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllFaxApplication",
        "tags": [
          "Fax Applications"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Applications",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FaxApplication"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Applications",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FaxApplication"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Application",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createFaxApplication",
        "tags": [
          "Fax Applications"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new faxApplication",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "priority": {
                    "type": "integer"
                  },
                  "app": {
                    "type": "string"
                  },
                  "appdata": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "interval": {
                    "type": "string"
                  }
                },
                "required": [
                  "priority",
                  "app"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "FaxApplication successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaxApplication"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/fax/applications/{id}": {
      "get": {
        "summary": "Gets a single Application",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getFaxApplicationById",
        "tags": [
          "Fax Applications"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FaxApplication to get"
          }
        ],
        "responses": {
          "200": {
            "description": "FaxApplication with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaxApplication"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Application",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateFaxApplicationById",
        "tags": [
          "Fax Applications"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new faxApplication",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FaxApplication to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Application",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteFaxApplicationById",
        "tags": [
          "Fax Applications"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FaxApplication to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/fax/interactions": {
      "get": {
        "summary": "Gets a list of Interactions",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllFaxInteraction",
        "tags": [
          "Fax Interactions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Interactions",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FaxInteraction"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Interactions",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FaxInteraction"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Interaction",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createFaxInteraction",
        "tags": [
          "Fax Interactions"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new faxInteraction",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "closed": {
                    "type": "boolean"
                  },
                  "closedAt": {
                    "type": "string"
                  },
                  "disposition": {
                    "type": "string"
                  },
                  "secondDisposition": {
                    "type": "string"
                  },
                  "thirdDisposition": {
                    "type": "string"
                  },
                  "note": {
                    "type": "string"
                  },
                  "read1stAt": {
                    "type": "string"
                  },
                  "fax": {
                    "type": "string"
                  },
                  "firstMsgDirection": {
                    "type": "string",
                    "enum": [
                      "in",
                      "out"
                    ],
                    "default": "in"
                  },
                  "lastMsgAt": {
                    "type": "string"
                  },
                  "lastMsgDirection": {
                    "type": "string",
                    "enum": [
                      "in",
                      "out"
                    ],
                    "default": "in"
                  }
                },
                "required": [
                  "firstMsgDirection",
                  "lastMsgDirection"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "FaxInteraction successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaxInteraction"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/fax/interactions/describe": {
      "get": {
        "summary": "Gets table info about Interactions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeFaxInteraction",
        "tags": [
          "Fax Interactions"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/fax/interactions/counters": {
      "get": {
        "summary": "Gets counters info about Interactions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "tags": [
          "Fax Interactions"
        ],
        "operationId": "countFaxInteraction",
        "parameters": [
          {
            "in": "query",
            "name": "FaxAccountId",
            "schema": {
              "type": "integer"
            },
            "description": "Filter by FaxAccountId"
          },
          {
            "in": "query",
            "name": "createdAt.gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "This stands for 'greater or equal'. It select all the records created after the date specified.",
            "example": "2022-01-01-T00:00:00Z"
          },
          {
            "in": "query",
            "name": "createdAt.lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "This stands for 'less or equal'. It select all the records created before the date specified.",
            "example": "2022-01-01-T00:00:00Z"
          }
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve counters informations grouped by FaxAccountId",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "results count",
                      "default": 0
                    },
                    "rows": {
                      "description": "FaxInteraction counters",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Counter"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/fax/interactions/{id}": {
      "get": {
        "summary": "Gets a single Interaction",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getFaxInteractionById",
        "tags": [
          "Fax Interactions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FaxInteraction to get"
          }
        ],
        "responses": {
          "200": {
            "description": "FaxInteraction with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaxInteraction"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Interaction",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateFaxInteractionById",
        "tags": [
          "Fax Interactions"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new faxInteraction",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FaxInteraction to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Interaction",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteFaxInteractionById",
        "tags": [
          "Fax Interactions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FaxInteraction to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/fax/interactions/{id}/messages": {
      "get": {
        "summary": "Gets interaction messages",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getMessages",
        "tags": [
          "Fax Interactions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FaxInteraction"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates new messages",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addMessage",
        "tags": [
          "Fax Interactions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FaxInteraction"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new faxInteraction",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "closed": {
                    "type": "boolean"
                  },
                  "closedAt": {
                    "type": "string"
                  },
                  "disposition": {
                    "type": "string"
                  },
                  "secondDisposition": {
                    "type": "string"
                  },
                  "thirdDisposition": {
                    "type": "string"
                  },
                  "note": {
                    "type": "string"
                  },
                  "read1stAt": {
                    "type": "string"
                  },
                  "fax": {
                    "type": "string"
                  },
                  "firstMsgDirection": {
                    "type": "string",
                    "enum": [
                      "in",
                      "out"
                    ],
                    "default": "in"
                  },
                  "lastMsgAt": {
                    "type": "string"
                  },
                  "lastMsgDirection": {
                    "type": "string",
                    "enum": [
                      "in",
                      "out"
                    ],
                    "default": "in"
                  }
                },
                "required": [
                  "firstMsgDirection",
                  "lastMsgDirection"
                ]
              }
            }
          }
        }
      }
    },
    "/fax/interactions/{id}/download": {
      "get": {
        "summary": "Get interactions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "download",
        "tags": [
          "Fax Interactions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FaxInteraction"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/fax/interactions/{id}/tags": {
      "post": {
        "summary": "Add tags to the interaction",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addTags",
        "tags": [
          "Fax Interactions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FaxInteraction"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new faxInteraction",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Removes tags from interaction",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeTags",
        "tags": [
          "Fax Interactions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FaxInteraction"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/fax/messages": {
      "get": {
        "summary": "Gets a list of Messages",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllFaxMessage",
        "tags": [
          "Fax Messages"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Messages",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FaxMessage"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Messages",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FaxMessage"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/fax/messages/describe": {
      "get": {
        "summary": "Gets table info about Messages",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeFaxMessage",
        "tags": [
          "Fax Messages"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/fax/messages/{id}": {
      "get": {
        "summary": "Gets a single Message",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getFaxMessageById",
        "tags": [
          "Fax Messages"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FaxMessage to get"
          }
        ],
        "responses": {
          "200": {
            "description": "FaxMessage with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaxMessage"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Message",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateFaxMessageById",
        "tags": [
          "Fax Messages"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new faxMessage",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FaxMessage to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Message",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteFaxMessageById",
        "tags": [
          "Fax Messages"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FaxMessage to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/fax/messages/{id}/download": {
      "get": {
        "summary": "Get message",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "download",
        "tags": [
          "Fax Message"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FaxMessage"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/fax/messages/{id}/accept": {
      "put": {
        "summary": "Accepts message",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "accept",
        "tags": [
          "Fax Messages"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FaxMessage"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new faxMessage",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/fax/messages/{id}/reject": {
      "put": {
        "summary": "Rejects message",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "reject",
        "tags": [
          "Fax Messages"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FaxMessage"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new faxMessage",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/fax/queues": {
      "get": {
        "summary": "Gets a list of Queues",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllFaxQueue",
        "tags": [
          "Fax Queues"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Queues",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FaxQueue"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Queues",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FaxQueue"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createFaxQueue",
        "tags": [
          "Fax Queues"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new faxQueue",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "timeout": {
                    "type": "integer"
                  },
                  "strategy": {
                    "type": "string",
                    "enum": [
                      "rrmemory",
                      "beepall",
                      "roundrobin"
                    ],
                    "default": "rrmemory"
                  },
                  "lastAgent": {
                    "type": "integer"
                  }
                },
                "required": [
                  "name",
                  "timeout",
                  "strategy"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "FaxQueue successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaxQueue"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/fax/queues/describe": {
      "get": {
        "summary": "Gets table info about Queues",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeFaxQueue",
        "tags": [
          "Fax Queues"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/fax/queues/{id}": {
      "get": {
        "summary": "Gets a single Queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getFaxQueueById",
        "tags": [
          "Fax Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FaxQueue to get"
          }
        ],
        "responses": {
          "200": {
            "description": "FaxQueue with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaxQueue"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateFaxQueueById",
        "tags": [
          "Fax Queues"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new faxQueue",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FaxQueue to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteFaxQueueById",
        "tags": [
          "Fax Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FaxQueue to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/fax/queues/{id}/members": {
      "get": {
        "summary": "GetMembers",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getMembers",
        "tags": [
          "Fax Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FaxQueue"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/fax/queues/{id}/teams": {
      "get": {
        "summary": "Gets queues list",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getTeams",
        "tags": [
          "Fax Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FaxQueue"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add teams to a queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addTeams",
        "tags": [
          "Fax Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FaxQueue"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new faxQueue",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Remove teams from a queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeTeams",
        "tags": [
          "Teams"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FaxQueue"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/fax/queues/{id}/users": {
      "get": {
        "summary": "Gets queue agents",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getAgents",
        "tags": [
          "Fax Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FaxQueue"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add agents to a queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addAgents",
        "tags": [
          "Fax Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FaxQueue"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new faxQueue",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Removes agents from a queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeAgents",
        "tags": [
          "Fax Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FaxQueue"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/fax/queues/{id}/profiles": {
      "get": {
        "summary": "Gets queue profiles",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getProfiles",
        "tags": [
          "Fax Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FaxQueue"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add profiles to a queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addProfiles",
        "tags": [
          "Fax Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FaxQueue"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new faxQueue",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Removes profiles from a queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeProfiles",
        "tags": [
          "Fax Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FaxQueue"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/fax/reports/queue": {
      "get": {
        "summary": "Gets a list of Fax Queue Reports",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllFaxQueueReport",
        "tags": [
          "Fax Queue Reports"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Fax Queue Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FaxQueueReport"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Fax Queue Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FaxQueueReport"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Fax Queue Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createFaxQueueReport",
        "tags": [
          "Fax Queue Reports"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new faxQueueReport",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "uniqueid": {
                    "type": "string"
                  },
                  "from": {
                    "type": "string"
                  },
                  "joinAt": {
                    "type": "string"
                  },
                  "leaveAt": {
                    "type": "string"
                  },
                  "acceptAt": {
                    "type": "string"
                  },
                  "exitAt": {
                    "type": "string"
                  },
                  "reason": {
                    "type": "string"
                  }
                },
                "required": [
                  "uniqueid"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "FaxQueueReport successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaxQueueReport"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/fax/reports/queue/describe": {
      "get": {
        "summary": "Gets table info about Fax Queue Reports",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeFaxQueueReport",
        "tags": [
          "Fax Queue Reports"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/fax/reports/queue/{id}": {
      "get": {
        "summary": "Gets a single Fax Queue Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getFaxQueueReportById",
        "tags": [
          "Fax Queue Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FaxQueueReport to get"
          }
        ],
        "responses": {
          "200": {
            "description": "FaxQueueReport with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaxQueueReport"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Fax Queue Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateFaxQueueReportById",
        "tags": [
          "Fax Queue Reports"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new faxQueueReport",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FaxQueueReport to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Fax Queue Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteFaxQueueReportById",
        "tags": [
          "Fax Queue Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FaxQueueReport to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/fax/reports/transfer": {
      "get": {
        "summary": "Gets a list of Fax Transfer Reports",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllFaxTransferReport",
        "tags": [
          "Fax Transfer Reports"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Fax Transfer Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FaxTransferReport"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Fax Transfer Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FaxTransferReport"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Fax Transfer Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createFaxTransferReport",
        "tags": [
          "Fax Transfer Reports"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new faxTransferReport",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "uniqueid": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "account",
                      "agent",
                      "queue"
                    ],
                    "default": "account"
                  },
                  "transferredAt": {
                    "type": "string"
                  }
                },
                "required": [
                  "uniqueid",
                  "type",
                  "transferredAt"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "FaxTransferReport successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaxTransferReport"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/fax/reports/transfer/describe": {
      "get": {
        "summary": "Gets table info about Fax Transfer Reports",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeFaxTransferReport",
        "tags": [
          "Fax Transfer Reports"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/fax/reports/transfer/{id}": {
      "get": {
        "summary": "Gets a single Fax Transfer Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getFaxTransferReportById",
        "tags": [
          "Fax Transfer Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FaxTransferReport to get"
          }
        ],
        "responses": {
          "200": {
            "description": "FaxTransferReport with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaxTransferReport"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Fax Transfer Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateFaxTransferReportById",
        "tags": [
          "Fax Transfer Reports"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new faxTransferReport",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FaxTransferReport to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Fax Transfer Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteFaxTransferReportById",
        "tags": [
          "Fax Transfer Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FaxTransferReport to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/dynamics365/accounts": {
      "get": {
        "summary": "Gets a list of Dynamics365 Accounts",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllDynamics365Account",
        "tags": [
          "Dynamics365 Accounts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Dynamics365 Accounts",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Dynamics365Account"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Dynamics365 Accounts",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Dynamics365Account"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Dynamics365 Account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createDynamics365Account",
        "tags": [
          "Dynamics365 Accounts"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new intDynamics365Account",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "username": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "remoteUri": {
                    "type": "string"
                  },
                  "tenantId": {
                    "type": "string"
                  },
                  "clientId": {
                    "type": "string"
                  },
                  "clientSecret": {
                    "type": "string"
                  },
                  "serverUrl": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "required": [
                  "serverUrl"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Dynamics365Account successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dynamics365Account"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/dynamics365/accounts/{id}": {
      "get": {
        "summary": "Gets a single Dynamics365 Account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getDynamics365AccountById",
        "tags": [
          "Dynamics365 Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Dynamics365Account to get"
          }
        ],
        "responses": {
          "200": {
            "description": "Dynamics365Account with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dynamics365Account"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Dynamics365 Account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateDynamics365AccountById",
        "tags": [
          "Dynamics365 Accounts"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new intDynamics365Account",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Dynamics365Account to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Dynamics365 Account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteDynamics365AccountById",
        "tags": [
          "Dynamics365 Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Dynamics365Account to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/dynamics365/accounts/{id}/configurations": {
      "get": {
        "summary": "Gets account configurations",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getConfigurations",
        "tags": [
          "Dynamics365 Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Dynamics365Account"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates new configuration",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addConfiguration",
        "tags": [
          "Dynamics365 Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Dynamics365Account"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new intDynamics365Account",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/integrations/dynamics365/accounts/{id}/fields": {
      "get": {
        "summary": "Gets account fields",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getFields",
        "tags": [
          "Dynamics365 Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Dynamics365Account"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/dynamics365/configurations": {
      "get": {
        "summary": "Gets a list of Dynamics365 Configurations",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllDynamics365Configuration",
        "tags": [
          "Dynamics365 Configurations"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Dynamics365 Configurations",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Dynamics365Configuration"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Dynamics365 Configurations",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Dynamics365Configuration"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Dynamics365 Configuration",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createDynamics365Configuration",
        "tags": [
          "Dynamics365 Configurations"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new intDynamics365Configuration",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "ticketType": {
                    "type": "string",
                    "enum": [
                      "incident",
                      "phonecall"
                    ],
                    "default": "incident"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Dynamics365Configuration successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dynamics365Configuration"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/dynamics365/configurations/{id}": {
      "get": {
        "summary": "Gets a single Dynamics365 Configuration",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getDynamics365ConfigurationById",
        "tags": [
          "Dynamics365 Configurations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Dynamics365Configuration to get"
          }
        ],
        "responses": {
          "200": {
            "description": "Dynamics365Configuration with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dynamics365Configuration"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Dynamics365 Configuration",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateDynamics365ConfigurationById",
        "tags": [
          "Dynamics365 Configurations"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new intDynamics365Configuration",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Dynamics365Configuration to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Dynamics365 Configuration",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteDynamics365ConfigurationById",
        "tags": [
          "Dynamics365 Configurations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Dynamics365Configuration to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/dynamics365/configurations/{id}/fields": {
      "get": {
        "summary": "Gets configurations fields",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getFields",
        "tags": [
          "Dynamics365 Configurations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Dynamics365Configuration"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/dynamics365/configurations/{id}/subjects": {
      "get": {
        "summary": "Gets configurations subjects",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getSubjects",
        "tags": [
          "Dynamics365 Configurations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Dynamics365Configuration"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/dynamics365/configurations/{id}/descriptions": {
      "get": {
        "summary": "Gets configurations descriptions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getDescriptions",
        "tags": [
          "Dynamics365 Configurations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Dynamics365Configuration"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/dynamics365/fields": {
      "get": {
        "summary": "Gets a list of Dynamics365 Fields",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllDynamics365Field",
        "tags": [
          "Dynamics365 Fields"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Dynamics365 Fields",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Dynamics365Field"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Dynamics365 Fields",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Dynamics365Field"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Dynamics365 Field",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createDynamics365Field",
        "tags": [
          "Dynamics365 Fields"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new intDynamics365Field",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "string",
                      "variable",
                      "customVariable",
                      "keyValue",
                      "picklist"
                    ],
                    "default": "string"
                  },
                  "content": {
                    "type": "string"
                  },
                  "key": {
                    "type": "string"
                  },
                  "keyType": {
                    "type": "string",
                    "enum": [
                      "string",
                      "variable",
                      "customVariable"
                    ],
                    "default": "string"
                  },
                  "keyContent": {
                    "type": "string"
                  },
                  "idField": {
                    "type": "string"
                  },
                  "nameField": {
                    "type": "string"
                  },
                  "customField": {
                    "type": "boolean"
                  },
                  "variableName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Dynamics365Field successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dynamics365Field"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/dynamics365/fields/{id}": {
      "get": {
        "summary": "Gets a single Dynamics365 Field",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getDynamics365FieldById",
        "tags": [
          "Dynamics365 Fields"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Dynamics365Field to get"
          }
        ],
        "responses": {
          "200": {
            "description": "Dynamics365Field with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dynamics365Field"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Dynamics365 Field",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateDynamics365FieldById",
        "tags": [
          "Dynamics365 Fields"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new intDynamics365Field",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Dynamics365Field to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Dynamics365 Field",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteDynamics365FieldById",
        "tags": [
          "Dynamics365 Fields"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Dynamics365Field to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations": {
      "get": {
        "summary": "Gets a list of Integrations",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllIntegration",
        "tags": [
          "Integrations"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Integrations",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Integration"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Integrations",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Integration"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Integration",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createIntegration",
        "tags": [
          "Integrations"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new integration",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "version": {
                    "type": "string"
                  },
                  "main": {
                    "type": "string"
                  },
                  "filename": {
                    "type": "string"
                  },
                  "path": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "size": {
                    "type": "integer"
                  },
                  "active": {
                    "type": "boolean"
                  },
                  "author": {
                    "type": "string"
                  },
                  "logo": {
                    "type": "string"
                  },
                  "state": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "title": {
                    "type": "string"
                  },
                  "remoteUri": {
                    "type": "string"
                  },
                  "link": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "version"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Integration successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integration"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/{id}": {
      "get": {
        "summary": "Gets a single Integration",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getIntegrationById",
        "tags": [
          "Integrations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Integration to get"
          }
        ],
        "responses": {
          "200": {
            "description": "Integration with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integration"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Integration",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateIntegrationById",
        "tags": [
          "Integrations"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new integration",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Integration to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Integration",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteIntegrationById",
        "tags": [
          "Integrations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Integration to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/reports": {
      "get": {
        "summary": "Gets a list of Integration Reports",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllIntegrationReport",
        "tags": [
          "Integration Reports"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Integration Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IntegrationReport"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Integration Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IntegrationReport"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Integration Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createIntegrationReport",
        "tags": [
          "Integration Reports"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new integrationReport",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "integration": {
                    "type": "string"
                  },
                  "eventChannel": {
                    "type": "string"
                  },
                  "exitStatus": {
                    "type": "string"
                  },
                  "ticketId": {
                    "type": "string"
                  },
                  "integrationId": {
                    "type": "integer"
                  },
                  "contacts": {
                    "type": "string"
                  },
                  "uniqueid": {
                    "type": "string"
                  },
                  "calleridnum": {
                    "type": "string"
                  },
                  "calleridname": {
                    "type": "string"
                  },
                  "queue": {
                    "type": "string"
                  },
                  "interface": {
                    "type": "string"
                  },
                  "membername": {
                    "type": "string"
                  },
                  "agentcalledAt": {
                    "type": "string"
                  },
                  "agentconnectAt": {
                    "type": "string"
                  },
                  "holdtime": {
                    "type": "integer"
                  },
                  "agentcomplete": {
                    "type": "boolean"
                  },
                  "agentcompleteAt": {
                    "type": "string"
                  },
                  "talktime": {
                    "type": "integer"
                  },
                  "agentacw": {
                    "type": "boolean"
                  },
                  "acwtime": {
                    "type": "integer"
                  },
                  "reason": {
                    "type": "string"
                  },
                  "agentringnoanswer": {
                    "type": "boolean"
                  },
                  "agentringnoanswerAt": {
                    "type": "string"
                  },
                  "agentdump": {
                    "type": "boolean"
                  },
                  "agentdumpAt": {
                    "type": "string"
                  },
                  "lastevent": {
                    "type": "string"
                  },
                  "channel": {
                    "type": "string"
                  },
                  "channelstate": {
                    "type": "integer"
                  },
                  "channelstatedesc": {
                    "type": "string"
                  },
                  "connectedlinenum": {
                    "type": "string"
                  },
                  "connectedlinename": {
                    "type": "string"
                  },
                  "language": {
                    "type": "string"
                  },
                  "accountcode": {
                    "type": "string"
                  },
                  "context": {
                    "type": "string"
                  },
                  "exten": {
                    "type": "string"
                  },
                  "priority": {
                    "type": "string"
                  },
                  "destchannel": {
                    "type": "string"
                  },
                  "destchannelstate": {
                    "type": "integer"
                  },
                  "destchannelstatedesc": {
                    "type": "string"
                  },
                  "destcalleridnum": {
                    "type": "string"
                  },
                  "destcalleridname": {
                    "type": "string"
                  },
                  "destconnectedlinenum": {
                    "type": "string"
                  },
                  "destconnectedlinename": {
                    "type": "string"
                  },
                  "destlanguage": {
                    "type": "string"
                  },
                  "destaccountcode": {
                    "type": "string"
                  },
                  "destcontext": {
                    "type": "string"
                  },
                  "destexten": {
                    "type": "string"
                  },
                  "destpriority": {
                    "type": "string"
                  },
                  "destuniqueid": {
                    "type": "string"
                  },
                  "messageId": {
                    "type": "string"
                  },
                  "inReplyTo": {
                    "type": "string"
                  },
                  "subject": {
                    "type": "string"
                  },
                  "from": {
                    "type": "string"
                  },
                  "to": {
                    "type": "string"
                  },
                  "cc": {
                    "type": "string"
                  },
                  "attachment": {
                    "type": "string"
                  },
                  "html": {
                    "type": "string"
                  },
                  "text": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "SENT",
                      "SENDING",
                      "RECEIVED",
                      "FAILED"
                    ],
                    "default": "SENT"
                  },
                  "url": {
                    "type": "string"
                  },
                  "app": {
                    "type": "string"
                  },
                  "appdata": {
                    "type": "string"
                  },
                  "projectId": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "IntegrationReport successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationReport"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/reports/describe": {
      "get": {
        "summary": "Gets table info about Integration Reports",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeIntegrationReport",
        "tags": [
          "Integration Reports"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/reports/{id}": {
      "get": {
        "summary": "Gets a single Integration Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getIntegrationReportById",
        "tags": [
          "Integration Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the IntegrationReport to get"
          }
        ],
        "responses": {
          "200": {
            "description": "IntegrationReport with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationReport"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Integration Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateIntegrationReportById",
        "tags": [
          "Integration Reports"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new integrationReport",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the IntegrationReport to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Integration Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteIntegrationReportById",
        "tags": [
          "Integration Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the IntegrationReport to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/interaction/close-tabs": {
      "get": {
        "summary": "Close one or more open tabs for a specific agent",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "closeTabs",
        "tags": [
          "Interaction"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tabIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/intervals": {
      "get": {
        "summary": "Gets a list of Intervals",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllInterval",
        "tags": [
          "Intervals"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Intervals",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Interval"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Intervals",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Interval"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Interval",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createInterval",
        "tags": [
          "Intervals"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new interval",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "interval": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Interval successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Interval"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/intervals/{id}": {
      "get": {
        "summary": "Gets a single Interval",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getIntervalById",
        "tags": [
          "Intervals"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Interval to get"
          }
        ],
        "responses": {
          "200": {
            "description": "Interval with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Interval"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Interval",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateIntervalById",
        "tags": [
          "Intervals"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new interval",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Interval to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Interval",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteIntervalById",
        "tags": [
          "Intervals"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Interval to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/intervals/{id}/sub_intervals": {
      "get": {
        "summary": "Get sub intervals set",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getIntervals",
        "tags": [
          "Intervals"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Interval"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new sub interval",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addInterval",
        "tags": [
          "Intervals"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Interval"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new interval",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/intervals/{id}/sub_intervals/create_many": {
      "post": {
        "summary": "Create new sub intervals set",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addIntervals",
        "tags": [
          "Intervals"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Interval"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new interval",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/integrations/freshdesk/accounts": {
      "get": {
        "summary": "Gets a list of Freshdesk Accounts",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllFreshdeskAccount",
        "tags": [
          "Freshdesk Accounts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Freshdesk Accounts",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FreshdeskAccount"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Freshdesk Accounts",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FreshdeskAccount"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Freshdesk Account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createFreshdeskAccount",
        "tags": [
          "Freshdesk Accounts"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new intFreshdeskAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "username": {
                    "type": "string"
                  },
                  "apiKey": {
                    "type": "string"
                  },
                  "remoteUri": {
                    "type": "string"
                  },
                  "serverUrl": {
                    "type": "string"
                  }
                },
                "required": [
                  "serverUrl"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "FreshdeskAccount successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FreshdeskAccount"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/freshdesk/accounts/{id}": {
      "get": {
        "summary": "Gets a single Freshdesk Account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getFreshdeskAccountById",
        "tags": [
          "Freshdesk Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FreshdeskAccount to get"
          }
        ],
        "responses": {
          "200": {
            "description": "FreshdeskAccount with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FreshdeskAccount"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Freshdesk Account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateFreshdeskAccountById",
        "tags": [
          "Freshdesk Accounts"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new intFreshdeskAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FreshdeskAccount to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Freshdesk Account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteFreshdeskAccountById",
        "tags": [
          "Freshdesk Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FreshdeskAccount to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/freshdesk/accounts/{id}/configurations": {
      "get": {
        "summary": "Gets account configurations",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getConfigurations",
        "tags": [
          "Freshdesk Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FreshdeskAccount"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates new configuration",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addConfiguration",
        "tags": [
          "Freshdesk Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FreshdeskAccount"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new intFreshdeskAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/integrations/freshdesk/accounts/{id}/fields": {
      "get": {
        "summary": "Gets account fields",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getFields",
        "tags": [
          "Freshdesk Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FreshdeskAccount"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/freshdesk/configurations": {
      "get": {
        "summary": "Gets a list of Freshdesk Configurations",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllFreshdeskConfiguration",
        "tags": [
          "Freshdesk Configurations"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Freshdesk Configurations",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FreshdeskConfiguration"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Freshdesk Configurations",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FreshdeskConfiguration"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Freshdesk Configuration",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createFreshdeskConfiguration",
        "tags": [
          "Freshdesk Configurations"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new intFreshdeskConfiguration",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "FreshdeskConfiguration successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FreshdeskConfiguration"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/freshdesk/configurations/{id}": {
      "get": {
        "summary": "Gets a single Freshdesk Configuration",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getFreshdeskConfigurationById",
        "tags": [
          "Freshdesk Configurations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FreshdeskConfiguration to get"
          }
        ],
        "responses": {
          "200": {
            "description": "FreshdeskConfiguration with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FreshdeskConfiguration"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Freshdesk Configuration",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateFreshdeskConfigurationById",
        "tags": [
          "Freshdesk Configurations"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new intFreshdeskConfiguration",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FreshdeskConfiguration to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Freshdesk Configuration",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteFreshdeskConfigurationById",
        "tags": [
          "Freshdesk Configurations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FreshdeskConfiguration to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/freshdesk/configurations/{id}/fields": {
      "get": {
        "summary": "Gets configurations fields",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getFields",
        "tags": [
          "Freshdesk Configurations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FreshdeskConfiguration"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/freshdesk/configurations/{id}/subjects": {
      "get": {
        "summary": "Gets configurations subjects",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getSubjects",
        "tags": [
          "Freshdesk Configurations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FreshdeskConfiguration"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/freshdesk/configurations/{id}/descriptions": {
      "get": {
        "summary": "Gets configurations descriptions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getDescriptions",
        "tags": [
          "Freshdesk Configurations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FreshdeskConfiguration"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/freshdesk/configurations/{id}/tags": {
      "get": {
        "summary": "Gets configurations tags",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getTags",
        "tags": [
          "Freshdesk Configurations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FreshdeskConfiguration"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Sets new tags",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "setTags",
        "tags": [
          "Freshdesk Configurations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FreshdeskConfiguration"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new intFreshdeskConfiguration",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/integrations/freshdesk/fields": {
      "get": {
        "summary": "Gets a list of Freshdesk Fields",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllFreshdeskField",
        "tags": [
          "Freshdesk Fields"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Freshdesk Fields",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FreshdeskField"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Freshdesk Fields",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FreshdeskField"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Freshdesk Field",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createFreshdeskField",
        "tags": [
          "Freshdesk Fields"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new intFreshdeskField",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "string",
                      "variable",
                      "customVariable",
                      "keyValue",
                      "picklist"
                    ],
                    "default": "string"
                  },
                  "content": {
                    "type": "string"
                  },
                  "key": {
                    "type": "string"
                  },
                  "keyType": {
                    "type": "string",
                    "enum": [
                      "string",
                      "variable",
                      "customVariable"
                    ],
                    "default": "string"
                  },
                  "keyContent": {
                    "type": "string"
                  },
                  "idField": {
                    "type": "string"
                  },
                  "nameField": {
                    "type": "string"
                  },
                  "customField": {
                    "type": "boolean"
                  },
                  "variableName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "FreshdeskField successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FreshdeskField"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/freshdesk/fields/{id}": {
      "get": {
        "summary": "Gets a single Freshdesk Field",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getFreshdeskFieldById",
        "tags": [
          "Freshdesk Fields"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FreshdeskField to get"
          }
        ],
        "responses": {
          "200": {
            "description": "FreshdeskField with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FreshdeskField"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Freshdesk Field",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateFreshdeskFieldById",
        "tags": [
          "Freshdesk Fields"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new intFreshdeskField",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FreshdeskField to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Freshdesk Field",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteFreshdeskFieldById",
        "tags": [
          "Freshdesk Fields"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FreshdeskField to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/freshsales/accounts": {
      "get": {
        "summary": "Gets a list of Freshsales Accounts",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllFreshsalesAccount",
        "tags": [
          "Freshsales Accounts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Freshsales Accounts",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FreshsalesAccount"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Freshsales Accounts",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FreshsalesAccount"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Freshsales Account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createFreshsalesAccount",
        "tags": [
          "Freshsales Accounts"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new intFreshsalesAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "username": {
                    "type": "string"
                  },
                  "apiKey": {
                    "type": "string"
                  },
                  "remoteUri": {
                    "type": "string"
                  },
                  "serverUrl": {
                    "type": "string"
                  }
                },
                "required": [
                  "serverUrl"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "FreshsalesAccount successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FreshsalesAccount"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/freshsales/accounts/{id}": {
      "get": {
        "summary": "Gets a single Freshsales Account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getFreshsalesAccountById",
        "tags": [
          "Freshsales Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FreshsalesAccount to get"
          }
        ],
        "responses": {
          "200": {
            "description": "FreshsalesAccount with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FreshsalesAccount"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Freshsales Account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateFreshsalesAccountById",
        "tags": [
          "Freshsales Accounts"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new intFreshsalesAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FreshsalesAccount to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Freshsales Account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteFreshsalesAccountById",
        "tags": [
          "Freshsales Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FreshsalesAccount to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/freshsales/accounts/{id}/configurations": {
      "get": {
        "summary": "Gets account configurations",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getConfigurations",
        "tags": [
          "Freshsales Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FreshsalesAccount"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates new configuration",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addConfiguration",
        "tags": [
          "Freshsales Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FreshsalesAccount"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new intFreshsalesAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/integrations/freshsales/accounts/{id}/fields": {
      "get": {
        "summary": "Gets account fields",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getFields",
        "tags": [
          "Freshsales Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FreshsalesAccount"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/freshsales/configurations": {
      "get": {
        "summary": "Gets a list of Freshsales Configurations",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllFreshsalesConfiguration",
        "tags": [
          "Freshsales Configurations"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Freshsales Configurations",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FreshsalesConfiguration"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Freshsales Configurations",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FreshsalesConfiguration"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Freshsales Configuration",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createFreshsalesConfiguration",
        "tags": [
          "Freshsales Configurations"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new intFreshsalesConfiguration",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "FreshsalesConfiguration successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FreshsalesConfiguration"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/freshsales/configurations/{id}": {
      "get": {
        "summary": "Gets a single Freshsales Configuration",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getFreshsalesConfigurationById",
        "tags": [
          "Freshsales Configurations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FreshsalesConfiguration to get"
          }
        ],
        "responses": {
          "200": {
            "description": "FreshsalesConfiguration with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FreshsalesConfiguration"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Freshsales Configuration",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateFreshsalesConfigurationById",
        "tags": [
          "Freshsales Configurations"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new intFreshsalesConfiguration",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FreshsalesConfiguration to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Freshsales Configuration",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteFreshsalesConfigurationById",
        "tags": [
          "Freshsales Configurations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FreshsalesConfiguration to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/freshsales/configurations/{id}/subjects": {
      "get": {
        "summary": "Gets configurations subjects",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getSubjects",
        "tags": [
          "Freshsales Configurations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FreshsalesConfiguration"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/freshsales/configurations/{id}/descriptions": {
      "get": {
        "summary": "Gets configurations descriptions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getDescriptions",
        "tags": [
          "Freshsales Configurations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FreshsalesConfiguration"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/freshsales/configurations/{id}/fields": {
      "get": {
        "summary": "Gets configurations fields",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getFields",
        "tags": [
          "Freshsales Configurations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FreshsalesConfiguration"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/freshsales/fields": {
      "get": {
        "summary": "Gets a list of Freshsales Fields",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllFreshsalesField",
        "tags": [
          "Freshsales Fields"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Freshsales Fields",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FreshsalesField"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Freshsales Fields",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FreshsalesField"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Freshsales Field",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createFreshsalesField",
        "tags": [
          "Freshsales Fields"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new intFreshsalesField",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "string",
                      "variable",
                      "customVariable",
                      "keyValue",
                      "picklist"
                    ],
                    "default": "string"
                  },
                  "content": {
                    "type": "string"
                  },
                  "key": {
                    "type": "string"
                  },
                  "keyType": {
                    "type": "string",
                    "enum": [
                      "string",
                      "variable",
                      "customVariable"
                    ],
                    "default": "string"
                  },
                  "keyContent": {
                    "type": "string"
                  },
                  "idField": {
                    "type": "string"
                  },
                  "nameField": {
                    "type": "string"
                  },
                  "customField": {
                    "type": "boolean"
                  },
                  "variableName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "FreshsalesField successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FreshsalesField"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/freshsales/fields/{id}": {
      "get": {
        "summary": "Gets a single Freshsales Field",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getFreshsalesFieldById",
        "tags": [
          "Freshsales Fields"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FreshsalesField to get"
          }
        ],
        "responses": {
          "200": {
            "description": "FreshsalesField with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FreshsalesField"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Freshsales Field",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateFreshsalesFieldById",
        "tags": [
          "Freshsales Fields"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new intFreshsalesField",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FreshsalesField to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Freshsales Field",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteFreshsalesFieldById",
        "tags": [
          "Freshsales Fields"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the FreshsalesField to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "openapi": {
      "0": "3",
      "1": ".",
      "2": "0",
      "3": ".",
      "4": "1"
    },
    "info": {
      "title": "WhatsappMessage API",
      "version": "1.1.0"
    },
    "/integrations/salesforce/accounts": {
      "get": {
        "summary": "Gets a list of Salesforce Accounts",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllSalesforceAccount",
        "tags": [
          "Salesforce Accounts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Salesforce Accounts",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SalesforceAccount"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Salesforce Accounts",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SalesforceAccount"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Salesforce Account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createSalesforceAccount",
        "tags": [
          "Salesforce Accounts"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new intSalesforceAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "username": {
                    "type": "string"
                  },
                  "remoteUri": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "clientId": {
                    "type": "string"
                  },
                  "clientSecret": {
                    "type": "string"
                  },
                  "securityToken": {
                    "type": "string"
                  },
                  "serverUrl": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "integrationTab",
                      "newTab"
                    ],
                    "default": "integrationTab"
                  }
                },
                "required": [
                  "serverUrl"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "SalesforceAccount successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalesforceAccount"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/salesforce/accounts/{id}": {
      "get": {
        "summary": "Gets a single Salesforce Account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getSalesforceAccountById",
        "tags": [
          "Salesforce Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SalesforceAccount to get"
          }
        ],
        "responses": {
          "200": {
            "description": "SalesforceAccount with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalesforceAccount"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Salesforce Account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateSalesforceAccountById",
        "tags": [
          "Salesforce Accounts"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new intSalesforceAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SalesforceAccount to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Salesforce Account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteSalesforceAccountById",
        "tags": [
          "Salesforce Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SalesforceAccount to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/salesforce/accounts/{id}/configurations": {
      "get": {
        "summary": "Gets account configurations",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getConfigurations",
        "tags": [
          "Salesforce Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SalesforceAccount"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates new configuration",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addConfiguration",
        "tags": [
          "Salesforce Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SalesforceAccount"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new intSalesforceAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/integrations/salesforce/accounts/{id}/fields": {
      "get": {
        "summary": "Gets account fields",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getFields",
        "tags": [
          "Salesforce Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SalesforceAccount"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/salesforce/accounts/{id}/test-connection": {
      "post": {
        "summary": "Test connection to Salesforce account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          }
        ],
        "operationId": "testSalesforceAccountConnection",
        "tags": [
          "Salesforce Accounts"
        ],
        "responses": {
          "200": {
            "description": "Salesforce connection test successfull.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalesforceAccount"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/salesforce/configurations": {
      "get": {
        "summary": "Gets a list of Salesforce Configurations",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllSalesforceConfiguration",
        "tags": [
          "Salesforce Configurations"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Salesforce Configurations",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SalesforceConfiguration"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Salesforce Configurations",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SalesforceConfiguration"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Salesforce Configuration",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createSalesforceConfiguration",
        "tags": [
          "Salesforce Configurations"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new intSalesforceConfiguration",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "ticketType": {
                    "type": "string",
                    "enum": [
                      "Task",
                      "Case"
                    ],
                    "default": "Task"
                  },
                  "moduleSearch": {
                    "type": "string",
                    "enum": [
                      "contact_lead",
                      "contact",
                      "lead",
                      "account_contact_lead",
                      "account"
                    ],
                    "default": "contact_lead"
                  },
                  "moduleCreate": {
                    "type": "string",
                    "enum": [
                      "nothing",
                      "contact",
                      "lead",
                      "account"
                    ],
                    "default": "nothing"
                  },
                  "leadId": {
                    "type": "string"
                  },
                  "additionalSearchAccount": {
                    "type": "string"
                  },
                  "additionalSearchContact": {
                    "type": "string"
                  },
                  "additionalSearchLead": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "SalesforceConfiguration successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalesforceConfiguration"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/salesforce/configurations/{id}": {
      "get": {
        "summary": "Gets a single Salesforce Configuration",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getSalesforceConfigurationById",
        "tags": [
          "Salesforce Configurations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SalesforceConfiguration to get"
          }
        ],
        "responses": {
          "200": {
            "description": "SalesforceConfiguration with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalesforceConfiguration"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Salesforce Configuration",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateSalesforceConfigurationById",
        "tags": [
          "Salesforce Configurations"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new intSalesforceConfiguration",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SalesforceConfiguration to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Salesforce Configuration",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteSalesforceConfigurationById",
        "tags": [
          "Salesforce Configurations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SalesforceConfiguration to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/salesforce/configurations/{id}/fields": {
      "get": {
        "summary": "Gets configurations fields",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getFields",
        "tags": [
          "Salesforce Configurations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SalesforceConfiguration"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/salesforce/configurations/{id}/subjects": {
      "get": {
        "summary": "Gets configurations subjects",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getSubjects",
        "tags": [
          "Salesforce Configurations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SalesforceConfiguration"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/salesforce/configurations/{id}/descriptions": {
      "get": {
        "summary": "Gets configurations descriptions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getDescriptions",
        "tags": [
          "Salesforce Configurations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SalesforceConfiguration"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/salesforce/fields": {
      "get": {
        "summary": "Gets a list of Salesforce Fields",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllSalesforceField",
        "tags": [
          "Salesforce Fields"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Salesforce Fields",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SalesforceField"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Salesforce Fields",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SalesforceField"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Salesforce Field",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createSalesforceField",
        "tags": [
          "Salesforce Fields"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new intSalesforceField",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "string",
                      "variable",
                      "customVariable",
                      "keyValue",
                      "picklist"
                    ],
                    "default": "string"
                  },
                  "content": {
                    "type": "string"
                  },
                  "key": {
                    "type": "string"
                  },
                  "keyType": {
                    "type": "string",
                    "enum": [
                      "string",
                      "variable",
                      "customVariable"
                    ],
                    "default": "string"
                  },
                  "keyContent": {
                    "type": "string"
                  },
                  "idField": {
                    "type": "string"
                  },
                  "variableName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "SalesforceField successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalesforceField"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/salesforce/fields/{id}": {
      "get": {
        "summary": "Gets a single Salesforce Field",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getSalesforceFieldById",
        "tags": [
          "Salesforce Fields"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SalesforceField to get"
          }
        ],
        "responses": {
          "200": {
            "description": "SalesforceField with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalesforceField"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Salesforce Field",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateSalesforceFieldById",
        "tags": [
          "Salesforce Fields"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new intSalesforceField",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SalesforceField to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Salesforce Field",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteSalesforceFieldById",
        "tags": [
          "Salesforce Fields"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SalesforceField to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/servicenow/accounts": {
      "get": {
        "summary": "Gets a list of Servicenow Accounts",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllServicenowAccount",
        "tags": [
          "Servicenow Accounts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Servicenow Accounts",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServicenowAccount"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Servicenow Accounts",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServicenowAccount"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Servicenow Account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createServicenowAccount",
        "tags": [
          "Servicenow Accounts"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new intServicenowAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "username": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "remoteUri": {
                    "type": "string"
                  },
                  "serverUrl": {
                    "type": "string"
                  }
                },
                "required": [
                  "serverUrl"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "ServicenowAccount successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicenowAccount"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/servicenow/accounts/{id}": {
      "get": {
        "summary": "Gets a single Servicenow Account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getServicenowAccountById",
        "tags": [
          "Servicenow Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ServicenowAccount to get"
          }
        ],
        "responses": {
          "200": {
            "description": "ServicenowAccount with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicenowAccount"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Servicenow Account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateServicenowAccountById",
        "tags": [
          "Servicenow Accounts"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new intServicenowAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ServicenowAccount to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Servicenow Account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteServicenowAccountById",
        "tags": [
          "Servicenow Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ServicenowAccount to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/servicenow/accounts/{id}/configurations": {
      "get": {
        "summary": "Gets account configurations",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getConfigurations",
        "tags": [
          "Servicenow Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ServicenowAccount"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates new configuration",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addConfiguration",
        "tags": [
          "Servicenow Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ServicenowAccount"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new intServicenowAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/integrations/servicenow/accounts/{id}/fields": {
      "get": {
        "summary": "Gets account fields",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getFields",
        "tags": [
          "Servicenow Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ServicenowAccount"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/servicenow/configurations": {
      "get": {
        "summary": "Gets a list of Servicenow Configurations",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllServicenowConfiguration",
        "tags": [
          "Servicenow Configurations"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Servicenow Configurations",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServicenowConfiguration"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Servicenow Configurations",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServicenowConfiguration"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Servicenow Configuration",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createServicenowConfiguration",
        "tags": [
          "Servicenow Configurations"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new intServicenowConfiguration",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "ServicenowConfiguration successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicenowConfiguration"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/servicenow/configurations/{id}": {
      "get": {
        "summary": "Gets a single Servicenow Configuration",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getServicenowConfigurationById",
        "tags": [
          "Servicenow Configurations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ServicenowConfiguration to get"
          }
        ],
        "responses": {
          "200": {
            "description": "ServicenowConfiguration with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicenowConfiguration"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Servicenow Configuration",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateServicenowConfigurationById",
        "tags": [
          "Servicenow Configurations"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new intServicenowConfiguration",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ServicenowConfiguration to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Servicenow Configuration",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteServicenowConfigurationById",
        "tags": [
          "Servicenow Configurations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ServicenowConfiguration to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/servicenow/configurations/{id}/fields": {
      "get": {
        "summary": "Gets configurations fields",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getFields",
        "tags": [
          "Servicenow Configurations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ServicenowConfiguration"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/servicenow/configurations/{id}/subjects": {
      "get": {
        "summary": "Gets configurations subjects",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getSubjects",
        "tags": [
          "Servicenow Configurations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ServicenowConfiguration"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/servicenow/configurations/{id}/descriptions": {
      "get": {
        "summary": "Gets configurations descriptions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getDescriptions",
        "tags": [
          "Servicenow Configurations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ServicenowConfiguration"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/servicenow/fields": {
      "get": {
        "summary": "Gets a list of Servicenow Fields",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllServicenowField",
        "tags": [
          "Servicenow Fields"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Servicenow Fields",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServicenowField"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Servicenow Fields",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServicenowField"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Servicenow Field",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createServicenowField",
        "tags": [
          "Servicenow Fields"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new intServicenowField",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "string",
                      "variable",
                      "customVariable",
                      "keyValue",
                      "picklist"
                    ],
                    "default": "string"
                  },
                  "content": {
                    "type": "string"
                  },
                  "key": {
                    "type": "string"
                  },
                  "keyType": {
                    "type": "string",
                    "enum": [
                      "string",
                      "variable",
                      "customVariable"
                    ],
                    "default": "string"
                  },
                  "keyContent": {
                    "type": "string"
                  },
                  "idField": {
                    "type": "string"
                  },
                  "nameField": {
                    "type": "string"
                  },
                  "customField": {
                    "type": "boolean"
                  },
                  "variableName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "ServicenowField successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicenowField"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/servicenow/fields/{id}": {
      "get": {
        "summary": "Gets a single Servicenow Field",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getServicenowFieldById",
        "tags": [
          "Servicenow Fields"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ServicenowField to get"
          }
        ],
        "responses": {
          "200": {
            "description": "ServicenowField with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicenowField"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Servicenow Field",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateServicenowFieldById",
        "tags": [
          "Servicenow Fields"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new intServicenowField",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ServicenowField to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Servicenow Field",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteServicenowFieldById",
        "tags": [
          "Servicenow Fields"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ServicenowField to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/sugarcrm/accounts": {
      "get": {
        "summary": "Gets a list of Sugarcrm Accounts",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllSugarcrmAccount",
        "tags": [
          "Sugarcrm Accounts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Sugarcrm Accounts",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SugarcrmAccount"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Sugarcrm Accounts",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SugarcrmAccount"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Sugarcrm Account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createSugarcrmAccount",
        "tags": [
          "Sugarcrm Accounts"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new intSugarcrmAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "username": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "remoteUri": {
                    "type": "string"
                  },
                  "serverUrl": {
                    "type": "string"
                  }
                },
                "required": [
                  "serverUrl"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "SugarcrmAccount successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SugarcrmAccount"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/sugarcrm/accounts/{id}": {
      "get": {
        "summary": "Gets a single Sugarcrm Account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getSugarcrmAccountById",
        "tags": [
          "Sugarcrm Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SugarcrmAccount to get"
          }
        ],
        "responses": {
          "200": {
            "description": "SugarcrmAccount with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SugarcrmAccount"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Sugarcrm Account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateSugarcrmAccountById",
        "tags": [
          "Sugarcrm Accounts"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new intSugarcrmAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SugarcrmAccount to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Sugarcrm Account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteSugarcrmAccountById",
        "tags": [
          "Sugarcrm Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SugarcrmAccount to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/sugarcrm/accounts/{id}/configurations": {
      "get": {
        "summary": "Gets account configurations",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getConfigurations",
        "tags": [
          "Sugarcrm Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SugarcrmAccount"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates new configuration",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addConfiguration",
        "tags": [
          "Sugarcrm Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SugarcrmAccount"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new intSugarcrmAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/integrations/sugarcrm/accounts/{id}/fields": {
      "get": {
        "summary": "Gets account fields",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getFields",
        "tags": [
          "Sugarcrm Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SugarcrmAccount"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/sugarcrm/configurations": {
      "get": {
        "summary": "Gets a list of SugarCRM Configurations",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllSugarcrmConfiguration",
        "tags": [
          "SugarCRM Configurations"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of SugarCRM Configurations",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SugarcrmConfiguration"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of SugarCRM Configurations",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SugarcrmConfiguration"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new SugarCRM Configuration",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createSugarcrmConfiguration",
        "tags": [
          "SugarCRM Configurations"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new intSugarcrmConfiguration",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "SugarcrmConfiguration successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SugarcrmConfiguration"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/sugarcrm/configurations/{id}": {
      "get": {
        "summary": "Gets a single SugarCRM Configuration",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getSugarcrmConfigurationById",
        "tags": [
          "SugarCRM Configurations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SugarcrmConfiguration to get"
          }
        ],
        "responses": {
          "200": {
            "description": "SugarcrmConfiguration with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SugarcrmConfiguration"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing SugarCRM Configuration",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateSugarcrmConfigurationById",
        "tags": [
          "SugarCRM Configurations"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new intSugarcrmConfiguration",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SugarcrmConfiguration to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing SugarCRM Configuration",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteSugarcrmConfigurationById",
        "tags": [
          "SugarCRM Configurations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SugarcrmConfiguration to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/sugarcrm/configurations/{id}/fields": {
      "get": {
        "summary": "Gets configurations fields",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getFields",
        "tags": [
          "Sugarcrm Configurations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SugarcrmConfiguration"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/sugarcrm/configurations/{id}/subjects": {
      "get": {
        "summary": "Gets configurations subjects",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getSubjects",
        "tags": [
          "Sugarcrm Configurations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SugarcrmConfiguration"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/sugarcrm/configurations/{id}/descriptions": {
      "get": {
        "summary": "Gets configurations descriptions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getDescriptions",
        "tags": [
          "Sugarcrm Configurations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SugarcrmConfiguration"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/sugarcrm/fields": {
      "get": {
        "summary": "Gets a list of Sugarcrm Fields",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllSugarcrmField",
        "tags": [
          "Sugarcrm Fields"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Sugarcrm Fields",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SugarcrmField"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Sugarcrm Fields",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SugarcrmField"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Sugarcrm Field",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createSugarcrmField",
        "tags": [
          "Sugarcrm Fields"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new intSugarcrmField",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "string",
                      "variable",
                      "customVariable",
                      "keyValue",
                      "picklist"
                    ],
                    "default": "string"
                  },
                  "content": {
                    "type": "string"
                  },
                  "key": {
                    "type": "string"
                  },
                  "keyType": {
                    "type": "string",
                    "enum": [
                      "string",
                      "variable",
                      "customVariable"
                    ],
                    "default": "string"
                  },
                  "keyContent": {
                    "type": "string"
                  },
                  "idField": {
                    "type": "string"
                  },
                  "nameField": {
                    "type": "string"
                  },
                  "customField": {
                    "type": "boolean"
                  },
                  "variableName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "SugarcrmField successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SugarcrmField"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/sugarcrm/fields/{id}": {
      "get": {
        "summary": "Gets a single Sugarcrm Field",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getSugarcrmFieldById",
        "tags": [
          "Sugarcrm Fields"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SugarcrmField to get"
          }
        ],
        "responses": {
          "200": {
            "description": "SugarcrmField with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SugarcrmField"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Sugarcrm Field",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateSugarcrmFieldById",
        "tags": [
          "Sugarcrm Fields"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new intSugarcrmField",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SugarcrmField to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Sugarcrm Field",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteSugarcrmFieldById",
        "tags": [
          "Sugarcrm Fields"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SugarcrmField to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/vtiger/accounts": {
      "get": {
        "summary": "Gets a list of Vtiger Accounts",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllVtigerAccount",
        "tags": [
          "Vtiger Accounts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Vtiger Accounts",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VtigerAccount"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Vtiger Accounts",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VtigerAccount"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Vtiger Account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createVtigerAccount",
        "tags": [
          "Vtiger Accounts"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new intVtigerAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "username": {
                    "type": "string"
                  },
                  "moduleName": {
                    "type": "string"
                  },
                  "remoteUri": {
                    "type": "string"
                  },
                  "serverUrl": {
                    "type": "string"
                  },
                  "accessKey": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "username",
                  "moduleName",
                  "remoteUri",
                  "serverUrl",
                  "accessKey"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "VtigerAccount successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VtigerAccount"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/vtiger/accounts/{id}": {
      "get": {
        "summary": "Gets a single Vtiger Account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getVtigerAccountById",
        "tags": [
          "Vtiger Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VtigerAccount to get"
          }
        ],
        "responses": {
          "200": {
            "description": "VtigerAccount with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VtigerAccount"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Vtiger Account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateVtigerAccountById",
        "tags": [
          "Vtiger Accounts"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new intVtigerAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VtigerAccount to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Vtiger Account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteVtigerAccountById",
        "tags": [
          "Vtiger Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VtigerAccount to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/vtiger/accounts/{id}/configurations": {
      "get": {
        "summary": "Gets account configurations",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getConfigurations",
        "tags": [
          "Vtiger Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VtigerAccount"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates new configuration",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addConfiguration",
        "tags": [
          "Vtiger Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VtigerAccount"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new intVtigerAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/integrations/vtiger/accounts/{id}/fields": {
      "get": {
        "summary": "Gets account fields",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getFields",
        "tags": [
          "Vtiger Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VtigerAccount"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/vtiger/configurations": {
      "get": {
        "summary": "Gets a list of Vtiger Configurations",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllVtigerConfiguration",
        "tags": [
          "Vtiger Configurations"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Vtiger Configurations",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VtigerConfiguration"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Vtiger Configurations",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VtigerConfiguration"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Vtiger Configuration",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createVtigerConfiguration",
        "tags": [
          "Vtiger Configurations"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new intVtigerConfiguration",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "VtigerConfiguration successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VtigerConfiguration"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/vtiger/configurations/{id}": {
      "get": {
        "summary": "Gets a single Vtiger Configuration",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getVtigerConfigurationById",
        "tags": [
          "Vtiger Configurations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VtigerConfiguration to get"
          }
        ],
        "responses": {
          "200": {
            "description": "VtigerConfiguration with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VtigerConfiguration"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Vtiger Configuration",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateVtigerConfigurationById",
        "tags": [
          "Vtiger Configurations"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new intVtigerConfiguration",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VtigerConfiguration to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Vtiger Configuration",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteVtigerConfigurationById",
        "tags": [
          "Vtiger Configurations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VtigerConfiguration to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/vtiger/configurations/{id}/fields": {
      "get": {
        "summary": "Gets configurations fields",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getFields",
        "tags": [
          "Vtiger Configurations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VtigerConfiguration"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/vtiger/configurations/{id}/subjects": {
      "get": {
        "summary": "Gets configurations subjects",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getSubjects",
        "tags": [
          "Vtiger Configurations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VtigerConfiguration"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/vtiger/configurations/{id}/descriptions": {
      "get": {
        "summary": "Gets configurations descriptions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getDescriptions",
        "tags": [
          "Vtiger Configurations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VtigerConfiguration"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/vtiger/fields": {
      "get": {
        "summary": "Gets a list of Vtiger Fields",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllVtigerField",
        "tags": [
          "Vtiger Fields"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Vtiger Fields",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VtigerField"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Vtiger Fields",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VtigerField"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Vtiger Field",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createVtigerField",
        "tags": [
          "Vtiger Fields"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new intVtigerField",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "string",
                      "variable",
                      "customVariable",
                      "keyValue",
                      "picklist"
                    ],
                    "default": "string"
                  },
                  "content": {
                    "type": "string"
                  },
                  "key": {
                    "type": "string"
                  },
                  "keyType": {
                    "type": "string",
                    "enum": [
                      "string",
                      "variable",
                      "customVariable"
                    ],
                    "default": "string"
                  },
                  "keyContent": {
                    "type": "string"
                  },
                  "idField": {
                    "type": "string"
                  },
                  "nameField": {
                    "type": "string"
                  },
                  "customField": {
                    "type": "boolean"
                  },
                  "variableName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "VtigerField successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VtigerField"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/vtiger/fields/{id}": {
      "get": {
        "summary": "Gets a single Vtiger Field",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getVtigerFieldById",
        "tags": [
          "Vtiger Fields"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VtigerField to get"
          }
        ],
        "responses": {
          "200": {
            "description": "VtigerField with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VtigerField"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Vtiger Field",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateVtigerFieldById",
        "tags": [
          "Vtiger Fields"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new intVtigerField",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VtigerField to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Vtiger Field",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteVtigerFieldById",
        "tags": [
          "Vtiger Fields"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VtigerField to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/zendesk/accounts": {
      "get": {
        "summary": "Gets a list of Zendesk Accounts",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllZendeskAccount",
        "tags": [
          "Zendesk Accounts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Zendesk Accounts",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ZendeskAccount"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Zendesk Accounts",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ZendeskAccount"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Zendesk Account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createZendeskAccount",
        "tags": [
          "Zendesk Accounts"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new intZendeskAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "username": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "token": {
                    "type": "string"
                  },
                  "remoteUri": {
                    "type": "string"
                  },
                  "authType": {
                    "type": "string",
                    "enum": [
                      "password",
                      "token"
                    ],
                    "default": "password"
                  },
                  "serverUrl": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "integrationTab",
                      "newTab"
                    ],
                    "default": "integrationTab"
                  }
                },
                "required": [
                  "serverUrl"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "ZendeskAccount successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ZendeskAccount"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/zendesk/accounts/{id}": {
      "get": {
        "summary": "Gets a single Zendesk Account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getZendeskAccountById",
        "tags": [
          "Zendesk Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ZendeskAccount to get"
          }
        ],
        "responses": {
          "200": {
            "description": "ZendeskAccount with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ZendeskAccount"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Zendesk Account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateZendeskAccountById",
        "tags": [
          "Zendesk Accounts"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new intZendeskAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ZendeskAccount to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Zendesk Account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteZendeskAccountById",
        "tags": [
          "Zendesk Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ZendeskAccount to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/zendesk/accounts/{id}/configurations": {
      "get": {
        "summary": "Gets account configurations",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getConfigurations",
        "tags": [
          "Zendesk Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ZendeskAccount"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates new configuration",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addConfiguration",
        "tags": [
          "Zendesk Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ZendeskAccount"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new intZendeskAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/integrations/zendesk/accounts/{id}/fields": {
      "get": {
        "summary": "Gets account fields",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getFields",
        "tags": [
          "Zendesk Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ZendeskAccount"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/zendesk/accounts/{id}/test-connection": {
      "post": {
        "summary": "Test connection to Zendesk account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          }
        ],
        "operationId": "testZendeskAccountConnection",
        "tags": [
          "Zendesk Accounts"
        ],
        "responses": {
          "200": {
            "description": "Zendesk connection test successfull.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ZendeskAccount"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/zendesk/configurations": {
      "get": {
        "summary": "Gets a list of Zendesk Configurations",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllZendeskConfiguration",
        "tags": [
          "Zendesk Configurations"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Zendesk Configurations",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ZendeskConfiguration"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Zendesk Configurations",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ZendeskConfiguration"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Zendesk Configuration",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createZendeskConfiguration",
        "tags": [
          "Zendesk Configurations"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new intZendeskConfiguration",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "ZendeskConfiguration successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ZendeskConfiguration"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/zendesk/configurations/{id}": {
      "get": {
        "summary": "Gets a single Zendesk Configuration",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getZendeskConfigurationById",
        "tags": [
          "Zendesk Configurations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ZendeskConfiguration to get"
          }
        ],
        "responses": {
          "200": {
            "description": "ZendeskConfiguration with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ZendeskConfiguration"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Zendesk Configuration",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateZendeskConfigurationById",
        "tags": [
          "Zendesk Configurations"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new intZendeskConfiguration",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ZendeskConfiguration to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Zendesk Configuration",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteZendeskConfigurationById",
        "tags": [
          "Zendesk Configurations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ZendeskConfiguration to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/zendesk/configurations/{id}/fields": {
      "get": {
        "summary": "Gets configurations fields",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getFields",
        "tags": [
          "Zendesk Configurations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ZendeskConfiguration"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/zendesk/configurations/{id}/subjects": {
      "get": {
        "summary": "Gets configurations subjects",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getSubjects",
        "tags": [
          "Zendesk Configurations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ZendeskConfiguration"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/zendesk/configurations/{id}/descriptions": {
      "get": {
        "summary": "Gets configurations descriptions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getDescriptions",
        "tags": [
          "Zendesk Configurations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ZendeskConfiguration"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/zendesk/configurations/{id}/tags": {
      "get": {
        "summary": "Gets configurations tags",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getTags",
        "tags": [
          "Zendesk Configurations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ZendeskConfiguration"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Sets new tags",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "setTags",
        "tags": [
          "Zendesk Configurations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ZendeskConfiguration"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new intZendeskConfiguration",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/integrations/zendesk/fields": {
      "get": {
        "summary": "Gets a list of Zendesk Fields",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllZendeskField",
        "tags": [
          "Zendesk Fields"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Zendesk Fields",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ZendeskField"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Zendesk Fields",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ZendeskField"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Zendesk Field",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createZendeskField",
        "tags": [
          "Zendesk Fields"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new intZendeskField",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "string",
                      "variable",
                      "customVariable",
                      "keyValue",
                      "picklist"
                    ],
                    "default": "string"
                  },
                  "content": {
                    "type": "string"
                  },
                  "key": {
                    "type": "string"
                  },
                  "keyType": {
                    "type": "string",
                    "enum": [
                      "string",
                      "variable",
                      "customVariable"
                    ],
                    "default": "string"
                  },
                  "keyContent": {
                    "type": "string"
                  },
                  "idField": {
                    "type": "string"
                  },
                  "nameField": {
                    "type": "string"
                  },
                  "customField": {
                    "type": "boolean"
                  },
                  "variableName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "ZendeskField successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ZendeskField"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/zendesk/fields/{id}": {
      "get": {
        "summary": "Gets a single Zendesk Field",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getZendeskFieldById",
        "tags": [
          "Zendesk Fields"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ZendeskField to get"
          }
        ],
        "responses": {
          "200": {
            "description": "ZendeskField with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ZendeskField"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Zendesk Field",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateZendeskFieldById",
        "tags": [
          "Zendesk Fields"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new intZendeskField",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ZendeskField to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Zendesk Field",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteZendeskFieldById",
        "tags": [
          "Zendesk Fields"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ZendeskField to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/zoho/accounts": {
      "get": {
        "summary": "Gets a list of Zoho Accounts",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllZohoAccount",
        "tags": [
          "Zoho Accounts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Zoho Accounts",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ZohoAccount"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Zoho Accounts",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ZohoAccount"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Zoho Account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createZohoAccount",
        "tags": [
          "Zoho Accounts"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new intZohoAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "host": {
                    "type": "string"
                  },
                  "zone": {
                    "type": "string"
                  },
                  "clientId": {
                    "type": "string"
                  },
                  "clientSecret": {
                    "type": "string"
                  },
                  "serverUrl": {
                    "type": "string"
                  },
                  "code": {
                    "type": "string"
                  },
                  "refreshToken": {
                    "type": "string"
                  }
                },
                "required": [
                  "serverUrl"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "ZohoAccount successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ZohoAccount"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/zoho/accounts/{id}": {
      "get": {
        "summary": "Gets a single Zoho Account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getZohoAccountById",
        "tags": [
          "Zoho Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ZohoAccount to get"
          }
        ],
        "responses": {
          "200": {
            "description": "ZohoAccount with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ZohoAccount"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Zoho Account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateZohoAccountById",
        "tags": [
          "Zoho Accounts"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new intZohoAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ZohoAccount to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Zoho Account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteZohoAccountById",
        "tags": [
          "Zoho Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ZohoAccount to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/zoho/accounts/{id}/configurations": {
      "get": {
        "summary": "Gets account configurations",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getConfigurations",
        "tags": [
          "Zoho Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ZohoAccount"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates new configuration",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addConfiguration",
        "tags": [
          "Zoho Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ZohoAccount"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new intZohoAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/integrations/zoho/accounts/{id}/fields": {
      "get": {
        "summary": "Gets account fields",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getFields",
        "tags": [
          "Zoho Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ZohoAccount"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/zoho/configurations": {
      "get": {
        "summary": "Gets a list of Zoho Configurations",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllZohoConfiguration",
        "tags": [
          "Zoho Configurations"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Zoho Configurations",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ZohoConfiguration"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Zoho Configurations",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ZohoConfiguration"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Zoho Configuration",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createZohoConfiguration",
        "tags": [
          "Zoho Configurations"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new intZohoConfiguration",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "moduleCreate": {
                    "type": "string",
                    "enum": [
                      "lead",
                      "contact",
                      "nothing"
                    ],
                    "default": "lead"
                  },
                  "moduleSearch": {
                    "type": "string",
                    "enum": [
                      "contact_lead",
                      "contact",
                      "lead"
                    ],
                    "default": "contact_lead"
                  },
                  "description": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "ZohoConfiguration successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ZohoConfiguration"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/zoho/configurations/{id}": {
      "get": {
        "summary": "Gets a single Zoho Configuration",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getZohoConfigurationById",
        "tags": [
          "Zoho Configurations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ZohoConfiguration to get"
          }
        ],
        "responses": {
          "200": {
            "description": "ZohoConfiguration with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ZohoConfiguration"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Zoho Configuration",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateZohoConfigurationById",
        "tags": [
          "Zoho Configurations"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new intZohoConfiguration",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ZohoConfiguration to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Zoho Configuration",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteZohoConfigurationById",
        "tags": [
          "Zoho Configurations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ZohoConfiguration to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/zoho/configurations/{id}/fields": {
      "get": {
        "summary": "Gets configurations fields",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getFields",
        "tags": [
          "Zoho Configurations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ZohoConfiguration"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/zoho/configurations/{id}/subjects": {
      "get": {
        "summary": "Gets configurations subjects",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getSubjects",
        "tags": [
          "Zoho Configurations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ZohoConfiguration"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/zoho/configurations/{id}/descriptions": {
      "get": {
        "summary": "Gets configurations descriptions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getDescriptions",
        "tags": [
          "Zoho Configurations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ZohoConfiguration"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/zoho/fields": {
      "get": {
        "summary": "Gets a list of Zoho Fields",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllZohoField",
        "tags": [
          "Zoho Fields"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Zoho Fields",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ZohoField"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Zoho Fields",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ZohoField"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Zoho Field",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createZohoField",
        "tags": [
          "Zoho Fields"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new intZohoField",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "string",
                      "variable",
                      "customVariable",
                      "keyValue",
                      "picklist"
                    ],
                    "default": "string"
                  },
                  "content": {
                    "type": "string"
                  },
                  "key": {
                    "type": "string"
                  },
                  "keyType": {
                    "type": "string",
                    "enum": [
                      "string",
                      "variable",
                      "customVariable"
                    ],
                    "default": "string"
                  },
                  "keyContent": {
                    "type": "string"
                  },
                  "idField": {
                    "type": "string"
                  },
                  "nameField": {
                    "type": "string"
                  },
                  "customField": {
                    "type": "boolean"
                  },
                  "variableName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "ZohoField successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ZohoField"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/zoho/fields/{id}": {
      "get": {
        "summary": "Gets a single Zoho Field",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getZohoFieldById",
        "tags": [
          "Zoho Fields"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ZohoField to get"
          }
        ],
        "responses": {
          "200": {
            "description": "ZohoField with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ZohoField"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Zoho Field",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateZohoFieldById",
        "tags": [
          "Zoho Fields"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new intZohoField",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ZohoField to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Zoho Field",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteZohoFieldById",
        "tags": [
          "Zoho Fields"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ZohoField to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/jscripty/answers/reports": {
      "get": {
        "summary": "Gets a list of Reports",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllJscriptyAnswerReport",
        "tags": [
          "JscriptyAnswerReport"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JscriptyAnswerReport"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JscriptyAnswerReport"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createJscriptyAnswerReport",
        "tags": [
          "JscriptyAnswerReport"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new jscriptyAnswerReport",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "question": {
                    "type": "string"
                  },
                  "answer": {
                    "type": "string"
                  },
                  "membername": {
                    "type": "string"
                  },
                  "projectname": {
                    "type": "string"
                  },
                  "queue": {
                    "type": "string"
                  },
                  "uniqueid": {
                    "type": "string"
                  },
                  "calleridname": {
                    "type": "string"
                  },
                  "calleridnum": {
                    "type": "string"
                  },
                  "questionId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "JscriptyAnswerReport successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JscriptyAnswerReport"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/jscripty/answers/reports/describe": {
      "get": {
        "summary": "Gets table info about Reports",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeJscriptyAnswerReport",
        "tags": [
          "JscriptyAnswerReport"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/jscripty/answers/reports/{id}": {
      "get": {
        "summary": "Gets a single Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getJscriptyAnswerReportById",
        "tags": [
          "JscriptyAnswerReport"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the JscriptyAnswerReport to get"
          }
        ],
        "responses": {
          "200": {
            "description": "JscriptyAnswerReport with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JscriptyAnswerReport"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateJscriptyAnswerReportById",
        "tags": [
          "JscriptyAnswerReport"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new jscriptyAnswerReport",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the JscriptyAnswerReport to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteJscriptyAnswerReportById",
        "tags": [
          "JscriptyAnswerReport"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the JscriptyAnswerReport to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/jscripty/projects": {
      "get": {
        "summary": "Gets a list of Projects",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllJscriptyProject",
        "tags": [
          "Jscripty Projects"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Projects",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JscriptyProject"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Projects",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JscriptyProject"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Project",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createJscriptyProject",
        "tags": [
          "Jscripty Projects"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new jscriptyProject",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "formData": {
                    "type": "string"
                  },
                  "enableUncompleteSave": {
                    "type": "boolean"
                  },
                  "sendUnpauseOnSubmit": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "JscriptyProject successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JscriptyProject"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/jscripty/projects/{id}": {
      "get": {
        "summary": "Gets a single Project",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getJscriptyProjectById",
        "tags": [
          "Jscripty Projects"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the JscriptyProject to get"
          }
        ],
        "responses": {
          "200": {
            "description": "JscriptyProject with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JscriptyProject"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Project",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateJscriptyProjectById",
        "tags": [
          "Jscripty Projects"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new jscriptyProject",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the JscriptyProject to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Project",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteJscriptyProjectById",
        "tags": [
          "Jscripty Projects"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the JscriptyProject to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/jscripty/projects/{id}/sessions": {
      "get": {
        "summary": "Gets jscripty project sessions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getSessions",
        "tags": [
          "Jscripty Projects"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the JscriptyProject"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/jscripty/projects/{id}/answers": {
      "get": {
        "summary": "Gets jscripty project answers",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getAnswers",
        "tags": [
          "Jscripty Projects"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the JscriptyProject"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/jscripty/projects/{id}/summary": {
      "get": {
        "summary": "Gets jscripty project summary",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getSummary",
        "tags": [
          "Jscripty Projects"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the JscriptyProject"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/jscripty/projects/clone": {
      "post": {
        "summary": "Clone an existing Project",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "cloneJscriptyProject",
        "tags": [
          "Jscripty Projects"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new jscriptyProject",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "JscriptyProject successfully cloned. Returns the cloned object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JscriptyProject"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/jscripty/questions/reports": {
      "get": {
        "summary": "Gets a list of Reports",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllJscriptyQuestionReport",
        "tags": [
          "JscriptyQuestionReport"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JscriptyQuestionReport"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JscriptyQuestionReport"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createJscriptyQuestionReport",
        "tags": [
          "JscriptyQuestionReport"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new jscriptyQuestionReport",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "question": {
                    "type": "string"
                  },
                  "answer": {
                    "type": "string"
                  },
                  "membername": {
                    "type": "string"
                  },
                  "projectname": {
                    "type": "string"
                  },
                  "queue": {
                    "type": "string"
                  },
                  "uniqueid": {
                    "type": "string"
                  },
                  "calleridname": {
                    "type": "string"
                  },
                  "calleridnum": {
                    "type": "string"
                  },
                  "questionId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "JscriptyQuestionReport successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JscriptyQuestionReport"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/jscripty/questions/reports/describe": {
      "get": {
        "summary": "Gets table info about Reports",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeJscriptyQuestionReport",
        "tags": [
          "JscriptyQuestionReport"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/jscripty/questions/reports/{id}": {
      "get": {
        "summary": "Gets a single Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getJscriptyQuestionReportById",
        "tags": [
          "JscriptyQuestionReport"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the JscriptyQuestionReport to get"
          }
        ],
        "responses": {
          "200": {
            "description": "JscriptyQuestionReport with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JscriptyQuestionReport"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateJscriptyQuestionReportById",
        "tags": [
          "JscriptyQuestionReport"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new jscriptyQuestionReport",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the JscriptyQuestionReport to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteJscriptyQuestionReportById",
        "tags": [
          "JscriptyQuestionReport"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the JscriptyQuestionReport to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/jscripty/sessions/reports": {
      "get": {
        "summary": "Gets a list of Reports",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllJscriptySessionReport",
        "tags": [
          "JscriptySessionReport"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JscriptySessionReport"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JscriptySessionReport"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createJscriptySessionReport",
        "tags": [
          "JscriptySessionReport"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new jscriptySessionReport",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "starttime": {
                    "type": "string"
                  },
                  "endtime": {
                    "type": "string"
                  },
                  "membername": {
                    "type": "string"
                  },
                  "projectname": {
                    "type": "string"
                  },
                  "queue": {
                    "type": "string"
                  },
                  "uniqueid": {
                    "type": "string"
                  },
                  "calleridname": {
                    "type": "string"
                  },
                  "calleridnum": {
                    "type": "string"
                  },
                  "completed": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "JscriptySessionReport successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JscriptySessionReport"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/jscripty/sessions/reports/describe": {
      "get": {
        "summary": "Gets table info about Reports",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeJscriptySessionReport",
        "tags": [
          "JscriptySessionReport"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/jscripty/sessions/reports/{id}": {
      "get": {
        "summary": "Gets a single Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getJscriptySessionReportById",
        "tags": [
          "JscriptySessionReport"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the JscriptySessionReport to get"
          }
        ],
        "responses": {
          "200": {
            "description": "JscriptySessionReport with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JscriptySessionReport"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateJscriptySessionReportById",
        "tags": [
          "JscriptySessionReport"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new jscriptySessionReport",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the JscriptySessionReport to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteJscriptySessionReportById",
        "tags": [
          "JscriptySessionReport"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the JscriptySessionReport to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/jscripty/sessions/reports/{id}/questions": {
      "get": {
        "summary": "Gets Jscripty Session questions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getQuestions",
        "tags": [
          "JscriptySessionReport"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the JscriptySessionReport"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/license": {
      "get": {
        "summary": "Gets License Info",
        "operationId": "index",
        "tags": [
          "License"
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/license/{id}": {
      "put": {
        "summary": "Update License Info",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "update",
        "tags": [
          "License"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the License"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new license",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/license/download_log_file": {
      "get": {
        "summary": "Download log file",
        "operationId": "downloadLogFile",
        "tags": [
          "License"
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/mail/accounts": {
      "get": {
        "summary": "Gets a list of Accounts",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllMailAccount",
        "tags": [
          "Mail Accounts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Accounts",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MailAccount"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Accounts",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MailAccount"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Create a mail account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "create",
        "tags": [
          "Mail Accounts"
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new mailAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/mail/accounts/describe": {
      "get": {
        "summary": "Gets table info about Accounts",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeMailAccount",
        "tags": [
          "Mail Accounts"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/mail/accounts/{id}": {
      "get": {
        "summary": "Gets a single Account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getMailAccountById",
        "tags": [
          "Mail Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailAccount to get"
          }
        ],
        "responses": {
          "200": {
            "description": "MailAccount with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailAccount"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateMailAccountById",
        "tags": [
          "Mail Accounts"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new mailAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailAccount to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Deletes a mail account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "destroy",
        "tags": [
          "Mail Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailAccount"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/mail/accounts/{id}/dispositions": {
      "get": {
        "summary": "Gets account dispositions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getDispositions",
        "tags": [
          "Mail Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailAccount"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates new disposition",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addDisposition",
        "tags": [
          "Mail Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailAccount"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new mailAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "service": {
                    "type": "boolean"
                  },
                  "email": {
                    "type": "string"
                  },
                  "active": {
                    "type": "boolean"
                  },
                  "key": {
                    "type": "string"
                  },
                  "template": {
                    "type": "string"
                  },
                  "markAsUnread": {
                    "type": "boolean"
                  },
                  "fontFamily": {
                    "type": "string"
                  },
                  "fontSize": {
                    "type": "integer"
                  },
                  "notificationTemplate": {
                    "type": "string"
                  },
                  "notificationSound": {
                    "type": "boolean"
                  },
                  "notificationShake": {
                    "type": "boolean"
                  },
                  "waitForTheAssignedAgent": {
                    "type": "integer"
                  },
                  "waitForTheAssignedQueue": {
                    "type": "integer"
                  },
                  "queueTransfer": {
                    "type": "boolean"
                  },
                  "queueTransferTimeout": {
                    "type": "integer"
                  },
                  "agentTransfer": {
                    "type": "boolean"
                  },
                  "agentTransferTimeout": {
                    "type": "integer"
                  },
                  "mandatoryDispositionPauseId": {
                    "type": "integer"
                  },
                  "mandatoryDisposition": {
                    "type": "boolean"
                  },
                  "aiAssistantId": {
                    "type": "string"
                  },
                  "aiProviderId": {
                    "type": "integer"
                  }
                },
                "required": [
                  "name",
                  "key",
                  "fontFamily"
                ]
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Removes dispositions from account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeDispositions",
        "tags": [
          "Mail Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailAccount"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/mail/accounts/{id}/canned_answers": {
      "get": {
        "summary": "Gets account canned answers",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getAnswers",
        "tags": [
          "Mail Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailAccount"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates new canned answer",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addAnswer",
        "tags": [
          "Mail Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailAccount"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new mailAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "service": {
                    "type": "boolean"
                  },
                  "email": {
                    "type": "string"
                  },
                  "active": {
                    "type": "boolean"
                  },
                  "key": {
                    "type": "string"
                  },
                  "template": {
                    "type": "string"
                  },
                  "markAsUnread": {
                    "type": "boolean"
                  },
                  "fontFamily": {
                    "type": "string"
                  },
                  "fontSize": {
                    "type": "integer"
                  },
                  "notificationTemplate": {
                    "type": "string"
                  },
                  "notificationSound": {
                    "type": "boolean"
                  },
                  "notificationShake": {
                    "type": "boolean"
                  },
                  "waitForTheAssignedAgent": {
                    "type": "integer"
                  },
                  "waitForTheAssignedQueue": {
                    "type": "integer"
                  },
                  "queueTransfer": {
                    "type": "boolean"
                  },
                  "queueTransferTimeout": {
                    "type": "integer"
                  },
                  "agentTransfer": {
                    "type": "boolean"
                  },
                  "agentTransferTimeout": {
                    "type": "integer"
                  },
                  "mandatoryDispositionPauseId": {
                    "type": "integer"
                  },
                  "mandatoryDisposition": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "name",
                  "key",
                  "fontFamily"
                ]
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Removes canned answers from account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeAnswers",
        "tags": [
          "Mail Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailAccount"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/mail/accounts/{id}/in_servers": {
      "get": {
        "summary": "Gets account IMAP server",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getImap",
        "tags": [
          "Mail Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailAccount"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new IMAP server",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addImap",
        "tags": [
          "Mail Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailAccount"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new mailAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "service": {
                    "type": "boolean"
                  },
                  "email": {
                    "type": "string"
                  },
                  "active": {
                    "type": "boolean"
                  },
                  "key": {
                    "type": "string"
                  },
                  "template": {
                    "type": "string"
                  },
                  "markAsUnread": {
                    "type": "boolean"
                  },
                  "fontFamily": {
                    "type": "string"
                  },
                  "fontSize": {
                    "type": "integer"
                  },
                  "notificationTemplate": {
                    "type": "string"
                  },
                  "notificationSound": {
                    "type": "boolean"
                  },
                  "notificationShake": {
                    "type": "boolean"
                  },
                  "waitForTheAssignedAgent": {
                    "type": "integer"
                  },
                  "waitForTheAssignedQueue": {
                    "type": "integer"
                  },
                  "queueTransfer": {
                    "type": "boolean"
                  },
                  "queueTransferTimeout": {
                    "type": "integer"
                  },
                  "agentTransfer": {
                    "type": "boolean"
                  },
                  "agentTransferTimeout": {
                    "type": "integer"
                  },
                  "mandatoryDispositionPauseId": {
                    "type": "integer"
                  },
                  "mandatoryDisposition": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "name",
                  "key",
                  "fontFamily"
                ]
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Removes IMAP server from an account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeImap",
        "tags": [
          "Mail Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailAccount"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/mail/accounts/{id}/out_servers": {
      "get": {
        "summary": "Gets account SMTP server",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getSmtp",
        "tags": [
          "Mail Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailAccount"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new SMTP server",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addSmtp",
        "tags": [
          "Mail Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailAccount"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new mailAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "service": {
                    "type": "boolean"
                  },
                  "email": {
                    "type": "string"
                  },
                  "active": {
                    "type": "boolean"
                  },
                  "key": {
                    "type": "string"
                  },
                  "template": {
                    "type": "string"
                  },
                  "markAsUnread": {
                    "type": "boolean"
                  },
                  "fontFamily": {
                    "type": "string"
                  },
                  "fontSize": {
                    "type": "integer"
                  },
                  "notificationTemplate": {
                    "type": "string"
                  },
                  "notificationSound": {
                    "type": "boolean"
                  },
                  "notificationShake": {
                    "type": "boolean"
                  },
                  "waitForTheAssignedAgent": {
                    "type": "integer"
                  },
                  "waitForTheAssignedQueue": {
                    "type": "integer"
                  },
                  "queueTransfer": {
                    "type": "boolean"
                  },
                  "queueTransferTimeout": {
                    "type": "integer"
                  },
                  "agentTransfer": {
                    "type": "boolean"
                  },
                  "agentTransferTimeout": {
                    "type": "integer"
                  },
                  "mandatoryDispositionPauseId": {
                    "type": "integer"
                  },
                  "mandatoryDisposition": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "name",
                  "key",
                  "fontFamily"
                ]
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Removes SMTP server from an account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeSmtp",
        "tags": [
          "Mail Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailAccount"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/mail/accounts/{id}/interactions": {
      "get": {
        "summary": "Gets account interactions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getInteractions",
        "tags": [
          "Mail Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailAccount"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates new interactions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addInteraction",
        "tags": [
          "Mail Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailAccount"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new mailAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "closed": {
                    "type": "boolean"
                  },
                  "closedAt": {
                    "type": "string"
                  },
                  "disposition": {
                    "type": "string"
                  },
                  "secondDisposition": {
                    "type": "string"
                  },
                  "thirdDisposition": {
                    "type": "string"
                  },
                  "note": {
                    "type": "string"
                  },
                  "inReplyTo": {
                    "type": "string"
                  },
                  "to": {
                    "type": "string"
                  },
                  "cc": {
                    "type": "string"
                  },
                  "subject": {
                    "type": "string"
                  },
                  "attach": {
                    "type": "boolean"
                  },
                  "read1stAt": {
                    "type": "string"
                  },
                  "substatus": {
                    "type": "string"
                  },
                  "substatusAt": {
                    "type": "string"
                  },
                  "firstMsgDirection": {
                    "type": "string",
                    "enum": [
                      "in",
                      "out"
                    ],
                    "default": "in"
                  },
                  "lastMsgAt": {
                    "type": "string"
                  },
                  "lastMsgDirection": {
                    "type": "string",
                    "enum": [
                      "in",
                      "out"
                    ],
                    "default": "in"
                  },
                  "autoreplyExecuted": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "firstMsgDirection",
                  "lastMsgDirection"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/mail/accounts/{id}/applications": {
      "get": {
        "summary": "Gets account applications",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getApplications",
        "tags": [
          "Mail Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailAccount"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates new applications",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addApplications",
        "tags": [
          "Mail Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailAccount"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new mailAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "service": {
                    "type": "boolean"
                  },
                  "email": {
                    "type": "string"
                  },
                  "active": {
                    "type": "boolean"
                  },
                  "key": {
                    "type": "string"
                  },
                  "template": {
                    "type": "string"
                  },
                  "markAsUnread": {
                    "type": "boolean"
                  },
                  "fontFamily": {
                    "type": "string"
                  },
                  "fontSize": {
                    "type": "integer"
                  },
                  "notificationTemplate": {
                    "type": "string"
                  },
                  "notificationSound": {
                    "type": "boolean"
                  },
                  "notificationShake": {
                    "type": "boolean"
                  },
                  "waitForTheAssignedAgent": {
                    "type": "integer"
                  },
                  "waitForTheAssignedQueue": {
                    "type": "integer"
                  },
                  "queueTransfer": {
                    "type": "boolean"
                  },
                  "queueTransferTimeout": {
                    "type": "integer"
                  },
                  "agentTransfer": {
                    "type": "boolean"
                  },
                  "agentTransferTimeout": {
                    "type": "integer"
                  },
                  "mandatoryDispositionPauseId": {
                    "type": "integer"
                  },
                  "mandatoryDisposition": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "name",
                  "key",
                  "fontFamily"
                ]
              }
            }
          }
        }
      }
    },
    "/mail/accounts/{id}/messages": {
      "get": {
        "summary": "Gets account messages",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getMessages",
        "tags": [
          "Mail Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailAccount"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/mail/accounts/{id}/verify": {
      "get": {
        "summary": "Verify mail account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "verifySmtp",
        "tags": [
          "Mail Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailAccount"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/mail/accounts/{id}/users": {
      "get": {
        "summary": "Gets agents from mail account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getAgents",
        "tags": [
          "Mail Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailAccount"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add agents to a mail account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addAgents",
        "tags": [
          "Mail Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailAccount"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new mailAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Removes agents from a mail account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeAgents",
        "tags": [
          "Mail Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailAccount"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/mail/accounts/{id}/send": {
      "post": {
        "summary": "Send new mail",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "send",
        "tags": [
          "Mail Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailAccount"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new mailAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/mail/accounts/{id}/send-template-mail-to-users": {
      "post": {
        "summary": "Send the given canned answer to all given Motion users",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "sendTemplateMailToUsers",
        "tags": [
          "Mail Accounts",
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailAccount to send the emails from"
          }
        ],
        "responses": {
          "200": {
            "description": "Mail was senti succesfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accepted": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "description": "Email address of the recipients who received the mail"
                      }
                    },
                    "rejected": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "description": "Email address of the recipients who didn't receive the mail"
                      }
                    },
                    "envelopeTime": {
                      "type": "integer"
                    },
                    "messageTime": {
                      "type": "integer"
                    },
                    "messageSize": {
                      "type": "integer"
                    },
                    "response": {
                      "type": "string"
                    },
                    "envelope": {
                      "type": "object",
                      "properties": {
                        "from": {
                          "type": "string",
                          "description": "Email address of the sender"
                        },
                        "to": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "description": "Email address of the recipients"
                          }
                        }
                      }
                    },
                    "messageId": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "Send the given template mail to users with the given ids. Invitation mails can't be sent to yourself or to the superadmin",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "cannedAnswerId": {
                    "type": "integer",
                    "description": "id of the canned answer to use"
                  },
                  "userIds": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    },
                    "description": "If \"withIncludes\" contains the value \"invitationLink\", you won't be able to send the mail to yourself or to a superadmin"
                  },
                  "withIncludes": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "INVITATIONLINK"
                      ],
                      "description": "\\\"INVITATIONLINK\\\" will render {{invitationLink}} in the mail subject\\body"
                    },
                    "description": "Additional parameters used while rendering body and subject of the given canned answer. Currently supporting \"invitationLink\" only."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/mail/applications/{id}": {
      "get": {
        "summary": "Gets a single Application",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getMailApplicationById",
        "tags": [
          "Mail Applications"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailApplication to get"
          }
        ],
        "responses": {
          "200": {
            "description": "MailApplication with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailApplication"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Application",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateMailApplicationById",
        "tags": [
          "Mail Applications"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new mailApplication",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailApplication to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Application",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteMailApplicationById",
        "tags": [
          "Mail Applications"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailApplication to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/mail/interactions": {
      "get": {
        "summary": "Gets a list of Interactions",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllMailInteraction",
        "tags": [
          "Mail Interactions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Interactions",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "unreadMessages": {
                        "type": "string"
                      },
                      "Account": {
                        "type": "object",
                        "properties": {
                          "key": {
                            "type": "string"
                          },
                          "mandatoryDisposition": {
                            "type": "boolean"
                          },
                          "email": {
                            "type": "string"
                          }
                        }
                      },
                      "contactName": {
                        "type": "string"
                      },
                      "id": {
                        "type": "integer"
                      },
                      "createdAt": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "closed": {
                        "type": "boolean"
                      },
                      "closedAt": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "attach": {
                        "type": "integer"
                      },
                      "lastMsgAt": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "lastMsgDirection": {
                        "type": "string"
                      },
                      "subject": {
                        "type": "string"
                      },
                      "disposition": {
                        "type": "string"
                      },
                      "secondDisposition": {
                        "type": "string"
                      },
                      "thirdDisposition": {
                        "type": "string"
                      },
                      "substatus": {
                        "type": "string"
                      },
                      "to": {
                        "type": "string"
                      },
                      "ContactId": {
                        "type": "integer"
                      },
                      "MailAccountId": {
                        "type": "integer"
                      },
                      "UserId": {
                        "type": "integer"
                      },
                      "Contact": {
                        "type": "object",
                        "properties": {
                          "firstName": {
                            "type": "string"
                          },
                          "lastName": {
                            "type": "string"
                          },
                          "email": {
                            "type": "string"
                          },
                          "phone": {
                            "type": "string"
                          },
                          "mobile": {
                            "type": "string"
                          },
                          "fax": {
                            "type": "string"
                          }
                        }
                      },
                      "Owner": {
                        "type": "object",
                        "properties": {
                          "fullname": {
                            "type": "string"
                          },
                          "internal": {
                            "type": "integer"
                          }
                        }
                      },
                      "Users": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "integer"
                            },
                            "fullname": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "Tags": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "integer"
                            },
                            "name": {
                              "type": "string"
                            },
                            "color": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "waiting": {
                        "type": "integer"
                      },
                      "talking": {
                        "type": "integer"
                      },
                      "answered": {
                        "type": "integer"
                      },
                      "unmanaged": {
                        "type": "integer"
                      },
                      "abandoned": {
                        "type": "integer"
                      },
                      "total": {
                        "type": "integer"
                      },
                      "lastMsgText": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Interactions",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MailInteraction"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Interaction",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createMailInteraction",
        "tags": [
          "Mail Interactions"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new mailInteraction",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "closed": {
                    "type": "boolean"
                  },
                  "closedAt": {
                    "type": "string"
                  },
                  "disposition": {
                    "type": "string"
                  },
                  "secondDisposition": {
                    "type": "string"
                  },
                  "thirdDisposition": {
                    "type": "string"
                  },
                  "note": {
                    "type": "string"
                  },
                  "inReplyTo": {
                    "type": "string"
                  },
                  "to": {
                    "type": "string"
                  },
                  "cc": {
                    "type": "string"
                  },
                  "subject": {
                    "type": "string"
                  },
                  "attach": {
                    "type": "boolean"
                  },
                  "read1stAt": {
                    "type": "string"
                  },
                  "substatus": {
                    "type": "string"
                  },
                  "substatusAt": {
                    "type": "string"
                  },
                  "firstMsgDirection": {
                    "type": "string",
                    "enum": [
                      "in",
                      "out"
                    ],
                    "default": "in"
                  },
                  "lastMsgAt": {
                    "type": "string"
                  },
                  "lastMsgDirection": {
                    "type": "string",
                    "enum": [
                      "in",
                      "out"
                    ],
                    "default": "in"
                  },
                  "autoreplyExecuted": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "firstMsgDirection",
                  "lastMsgDirection"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "MailInteraction successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailInteraction"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/mail/interactions/describe": {
      "get": {
        "summary": "Gets table info about Interactions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeMailInteraction",
        "tags": [
          "Mail Interactions"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/mail/interactions/counters": {
      "get": {
        "summary": "Gets counters info about Interactions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "tags": [
          "Mail Interactions"
        ],
        "operationId": "countMailInteraction",
        "parameters": [
          {
            "in": "query",
            "name": "MailAccountId",
            "schema": {
              "type": "integer"
            },
            "description": "Filter by MailAccountId"
          },
          {
            "in": "query",
            "name": "createdAt.gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "This stands for 'greater or equal'. It select all the records created after the date specified.",
            "example": "2022-01-01-T00:00:00Z"
          },
          {
            "in": "query",
            "name": "createdAt.lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "This stands for 'less or equal'. It select all the records created before the date specified.",
            "example": "2022-01-01-T00:00:00Z"
          }
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve counters informations grouped by MailAccountId",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "results count",
                      "default": 0
                    },
                    "rows": {
                      "description": "MailInteraction counters",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Counter"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/mail/interactions/{id}": {
      "get": {
        "summary": "Gets a single Interaction",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getMailInteractionById",
        "tags": [
          "Mail Interactions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailInteraction to get"
          }
        ],
        "responses": {
          "200": {
            "description": "MailInteraction with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailInteraction"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Interaction",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateMailInteractionById",
        "tags": [
          "Mail Interactions"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new mailInteraction",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailInteraction to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Interaction",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteMailInteractionById",
        "tags": [
          "Mail Interactions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailInteraction to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/mail/interactions/{id}/messages": {
      "get": {
        "summary": "Gets interaction messages",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getMessages",
        "tags": [
          "Mail Interactions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailInteraction"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates new message",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addMessage",
        "tags": [
          "Mail Interactions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailInteraction"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new mailInteraction",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "string"
                  },
                  "plainBody": {
                    "type": "string"
                  },
                  "read": {
                    "type": "boolean"
                  },
                  "direction": {
                    "type": "string",
                    "enum": [
                      "in",
                      "out"
                    ],
                    "default": "in"
                  },
                  "messageId": {
                    "type": "string"
                  },
                  "from": {
                    "type": "string"
                  },
                  "to": {
                    "type": "string"
                  },
                  "cc": {
                    "type": "string"
                  },
                  "bcc": {
                    "type": "string"
                  },
                  "subject": {
                    "type": "string"
                  },
                  "sentAt": {
                    "type": "string"
                  },
                  "attach": {
                    "type": "integer"
                  },
                  "secret": {
                    "type": "boolean"
                  },
                  "readAt": {
                    "type": "string"
                  },
                  "originTo": {
                    "type": "string"
                  },
                  "originCc": {
                    "type": "string"
                  },
                  "originChannel": {
                    "type": "string",
                    "enum": [
                      "Email",
                      "Chat"
                    ],
                    "default": "Email"
                  }
                },
                "required": [
                  "body",
                  "direction",
                  "originChannel"
                ]
              }
            }
          }
        }
      }
    },
    "/mail/interactions/{id}/download": {
      "get": {
        "summary": "Gets interaction",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "download",
        "tags": [
          "Mail Interactions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailInteraction"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/mail/interactions/{id}/tags": {
      "post": {
        "summary": "Add tags to the interaction",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addTags",
        "tags": [
          "Mail Interactions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailInteraction"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new mailInteraction",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Removes tags from interaction",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeTags",
        "tags": [
          "Mail Interactions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailInteraction"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/mail/interactions/{id}/transfer": {
      "post": {
        "summary": "Transfer interaction",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "transfer",
        "tags": [
          "Mail Interactions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailInteraction"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Ok"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "MailAccountId": {
                    "type": "integer",
                    "description": "Id of the account to transfer the interaction"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/mail_interaction_has_tags/describe": {
      "get": {
        "summary": "Gets table info about Mail Interactions Has Tags",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeMailInteractionHasTags",
        "tags": [
          "Mail Interactions Has Tags"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/mail/messages": {
      "get": {
        "summary": "Gets a list of Messages",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllMailMessage",
        "tags": [
          "Mail Messages"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Messages",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MailMessage"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Messages",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MailMessage"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Create a message",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "create",
        "tags": [
          "Mail Messages"
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new mailMessage",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/mail/messages/describe": {
      "get": {
        "summary": "Gets table info about Messages",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeMailMessage",
        "tags": [
          "Mail Messages"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/mail/messages/{id}": {
      "get": {
        "summary": "Gets a single Message",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getMailMessageById",
        "tags": [
          "Mail Messages"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailMessage to get"
          }
        ],
        "responses": {
          "200": {
            "description": "MailMessage with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailMessage"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Message",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateMailMessageById",
        "tags": [
          "Mail Messages"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new mailMessage",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailMessage to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Message",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteMailMessageById",
        "tags": [
          "Mail Messages"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailMessage to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/mail/messages/{id}/download": {
      "get": {
        "summary": "Gets message",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "download",
        "tags": [
          "Mail Messages"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailMessage"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/mail/messages/{id}/accept": {
      "put": {
        "summary": "Accepts message",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "accept",
        "tags": [
          "Mail Messages"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailMessage"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new mailMessage",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/mail/messages/{id}/reject": {
      "put": {
        "summary": "Rejects message",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "reject",
        "tags": [
          "Mail Messages"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailMessage"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new mailMessage",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/mail/queues": {
      "get": {
        "summary": "Gets a list of Queues",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllMailQueue",
        "tags": [
          "Mail Queues"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Queues",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MailQueue"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Queues",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MailQueue"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createMailQueue",
        "tags": [
          "Mail Queues"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new mailQueue",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "timeout": {
                    "type": "integer"
                  },
                  "strategy": {
                    "type": "string",
                    "enum": [
                      "rrmemory",
                      "beepall",
                      "roundrobin"
                    ],
                    "default": "rrmemory"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "MailQueue successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailQueue"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/mail/queues/describe": {
      "get": {
        "summary": "Gets table info about Queues",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeMailQueue",
        "tags": [
          "Mail Queues"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/mail/queues/{id}": {
      "get": {
        "summary": "Gets a single Queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getMailQueueById",
        "tags": [
          "Mail Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailQueue to get"
          }
        ],
        "responses": {
          "200": {
            "description": "MailQueue with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailQueue"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateMailQueueById",
        "tags": [
          "Mail Queues"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new mailQueue",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailQueue to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteMailQueueById",
        "tags": [
          "Mail Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailQueue to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/mail/queues/{id}/members": {
      "get": {
        "summary": "GetMembers",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getMembers",
        "tags": [
          "Mail Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailQueue"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/mail/queues/{id}/teams": {
      "get": {
        "summary": "Gets queues list",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getTeams",
        "tags": [
          "Mail Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailQueue"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add teams to a queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addTeams",
        "tags": [
          "Mail Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailQueue"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new mailQueue",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Remove teams from a queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeTeams",
        "tags": [
          "Teams"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailQueue"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/mail/queues/{id}/users": {
      "get": {
        "summary": "Gets queue agents",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getAgents",
        "tags": [
          "Mail Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailQueue"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add agents to a queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addAgents",
        "tags": [
          "Mail Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailQueue"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new mailQueue",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Removes agents from a queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeAgents",
        "tags": [
          "Mail Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailQueue"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/mail/queues/{id}/profiles": {
      "get": {
        "summary": "Gets queue profiles",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getProfiles",
        "tags": [
          "Mail Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailQueue"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add profiles to a queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addProfiles",
        "tags": [
          "Mail Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailQueue"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new mailQueue",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Removes profiles from a queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeProfiles",
        "tags": [
          "Mail Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailQueue"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/mail/reports/queue": {
      "get": {
        "summary": "Gets a list of Mail Queue Reports",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllMailQueueReport",
        "tags": [
          "Mail Queue Reports"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Mail Queue Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MailQueueReport"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Mail Queue Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MailQueueReport"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Mail Queue Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createMailQueueReport",
        "tags": [
          "Mail Queue Reports"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new mailQueueReport",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "uniqueid": {
                    "type": "string"
                  },
                  "from": {
                    "type": "string"
                  },
                  "joinAt": {
                    "type": "string"
                  },
                  "leaveAt": {
                    "type": "string"
                  },
                  "acceptAt": {
                    "type": "string"
                  },
                  "exitAt": {
                    "type": "string"
                  },
                  "reason": {
                    "type": "string"
                  }
                },
                "required": [
                  "uniqueid"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "MailQueueReport successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailQueueReport"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/mail/reports/queue/describe": {
      "get": {
        "summary": "Gets table info about Mail Queue Reports",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeMailQueueReport",
        "tags": [
          "Mail Queue Reports"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/mail/reports/queue/{id}": {
      "get": {
        "summary": "Gets a single Mail Queue Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getMailQueueReportById",
        "tags": [
          "Mail Queue Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailQueueReport to get"
          }
        ],
        "responses": {
          "200": {
            "description": "MailQueueReport with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailQueueReport"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Mail Queue Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateMailQueueReportById",
        "tags": [
          "Mail Queue Reports"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new mailQueueReport",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailQueueReport to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Mail Queue Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteMailQueueReportById",
        "tags": [
          "Mail Queue Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailQueueReport to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/mail/out_servers": {
      "get": {
        "summary": "Gets a list of SMTPs",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllMailServerOut",
        "tags": [
          "Mail SMTP"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of SMTPs",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MailServerOut"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of SMTPs",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MailServerOut"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new SMTP",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createMailServerOut",
        "tags": [
          "Mail SMTP"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new mailServerOut",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "host": {
                    "type": "string"
                  },
                  "user": {
                    "type": "string"
                  },
                  "pass": {
                    "type": "string"
                  },
                  "port": {
                    "type": "integer"
                  },
                  "secure": {
                    "type": "boolean"
                  },
                  "service": {
                    "type": "string"
                  },
                  "authentication": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "MailServerOut successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailServerOut"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/mail/out_servers/{id}": {
      "get": {
        "summary": "Gets a single SMTP",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getMailServerOutById",
        "tags": [
          "Mail SMTP"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailServerOut to get"
          }
        ],
        "responses": {
          "200": {
            "description": "MailServerOut with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailServerOut"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing SMTP",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateMailServerOutById",
        "tags": [
          "Mail SMTP"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new mailServerOut",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailServerOut to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing SMTP",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteMailServerOutById",
        "tags": [
          "Mail SMTP"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailServerOut to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/mail/substatuses": {
      "get": {
        "summary": "Gets a list of Substatuses",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllMailSubstatus",
        "tags": [
          "Mail Substatuses"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Substatuses",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MailSubstatus"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Substatuses",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MailSubstatus"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createMailSubstatus",
        "tags": [
          "Mail Substatuses"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new mailSubstatus",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "MailSubstatus successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailSubstatus"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/mail/substatuses/describe": {
      "get": {
        "summary": "Gets table info about Substatuses",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeMailSubstatus",
        "tags": [
          "Mail Substatuses"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/mail/substatuses/{id}": {
      "get": {
        "summary": "Gets a single Queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getMailSubstatusById",
        "tags": [
          "Mail Substatuses"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailSubstatus to get"
          }
        ],
        "responses": {
          "200": {
            "description": "MailSubstatus with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailSubstatus"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateMailSubstatusById",
        "tags": [
          "Mail Substatuses"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new mailSubstatus",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailSubstatus to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteMailSubstatusById",
        "tags": [
          "Mail Substatuses"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailSubstatus to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/mail/reports/transfer": {
      "get": {
        "summary": "Gets a list of Mail Transfer Reports",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllMailTransferReport",
        "tags": [
          "Mail Transfer Reports"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Mail Transfer Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MailTransferReport"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Mail Transfer Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MailTransferReport"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Mail Transfer Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createMailTransferReport",
        "tags": [
          "Mail Transfer Reports"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new mailTransferReport",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "uniqueid": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "account",
                      "agent",
                      "queue"
                    ],
                    "default": "account"
                  },
                  "transferredAt": {
                    "type": "string"
                  }
                },
                "required": [
                  "uniqueid",
                  "type",
                  "transferredAt"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "MailTransferReport successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailTransferReport"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/mail/reports/transfer/describe": {
      "get": {
        "summary": "Gets table info about Mail Transfer Reports",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeMailTransferReport",
        "tags": [
          "Mail Transfer Reports"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/mail/reports/transfer/{id}": {
      "get": {
        "summary": "Gets a single Mail Transfer Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getMailTransferReportById",
        "tags": [
          "Mail Transfer Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailTransferReport to get"
          }
        ],
        "responses": {
          "200": {
            "description": "MailTransferReport with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailTransferReport"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Mail Transfer Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateMailTransferReportById",
        "tags": [
          "Mail Transfer Reports"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new mailTransferReport",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailTransferReport to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Mail Transfer Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteMailTransferReportById",
        "tags": [
          "Mail Transfer Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MailTransferReport to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/members/reports": {
      "get": {
        "summary": "Gets a list of Member Reports",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllMemberReport",
        "tags": [
          "Member Reports"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Member Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MemberReport"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Member Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MemberReport"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/members/reports/describe": {
      "get": {
        "summary": "Gets table info about Member Reports",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeMemberReport",
        "tags": [
          "Member Reports"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/members/reports/{id}": {
      "get": {
        "summary": "Gets a single Member Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getMemberReportById",
        "tags": [
          "Member Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the MemberReport to get"
          }
        ],
        "responses": {
          "200": {
            "description": "MemberReport with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberReport"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/migrations": {
      "get": {
        "summary": "Gets a list of Migrations",
        "description": "List paged, sorted, filtered items",
        "operationId": "listAllMigration",
        "tags": [
          "Migrations"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Migrations",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Migration"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Migrations",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Migration"
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/networks": {
      "get": {
        "summary": "Gets a list of Networks",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllNetwork",
        "tags": [
          "Networks"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Networks",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Network"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Networks",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Network"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Create a new network",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "create",
        "tags": [
          "Networks"
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new network",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/networks/{id}": {
      "get": {
        "summary": "Gets a single Network",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getNetworkById",
        "tags": [
          "Networks"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Network to get"
          }
        ],
        "responses": {
          "200": {
            "description": "Network with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Network"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing network",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "update",
        "tags": [
          "Networks"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Network"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new network",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Deletes a network",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "destroy",
        "tags": [
          "Networks"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Network"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/openaiBots": {
      "get": {
        "summary": "Gets a list of OpenaiBots",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllOpenaiBot",
        "tags": [
          "OpenaiBots"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of OpenaiBots",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OpenaiBot"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of OpenaiBots",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OpenaiBot"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new OpenaiBot",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createOpenaiBot",
        "tags": [
          "OpenaiBots"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new OpenaiBot",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "welcomeMessage": {
                    "type": "string"
                  },
                  "prompt": {
                    "type": "string"
                  },
                  "errorMessage": {
                    "type": "string"
                  },
                  "exitPhrase": {
                    "type": "string"
                  },
                  "redirectMessage": {
                    "type": "string"
                  },
                  "maxTokens": {
                    "type": "integer",
                    "default": 2000
                  },
                  "analyzeChatPrompt": {
                    "type": "string"
                  },
                  "model": {
                    "type": "string",
                    "default": "gpt-3.5-turbo"
                  },
                  "AssistantId": {
                    "type": "integer"
                  }
                },
                "required": [
                  "welcomeMessage",
                  "errorMessage"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OpenaiBot successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenaiBot"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/openaiBots/{id}": {
      "get": {
        "summary": "Gets a single OpenaiBot",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getOpenaiBotById",
        "tags": [
          "OpenaiBots"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenaiBot to get"
          }
        ],
        "responses": {
          "200": {
            "description": "OpenaiBot with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenaiBot"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing OpenaiBot",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateOpenaiBotById",
        "tags": [
          "OpenaiBots"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new OpenaiBot",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenaiBot to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing OpenaiBot",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteOpenaiBotById",
        "tags": [
          "OpenaiBots"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenaiBot to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/openchannel/accounts": {
      "get": {
        "summary": "Gets a list of Accounts",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllOpenchannelAccount",
        "tags": [
          "Openchannel Accounts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Accounts",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OpenchannelAccount"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Accounts",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OpenchannelAccount"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createOpenchannelAccount",
        "tags": [
          "Openchannel Accounts"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new openchannelAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "token": {
                    "type": "string"
                  },
                  "replyUri": {
                    "type": "string"
                  },
                  "key": {
                    "type": "string"
                  },
                  "notificationTemplate": {
                    "type": "string"
                  },
                  "notificationSound": {
                    "type": "boolean"
                  },
                  "notificationShake": {
                    "type": "boolean"
                  },
                  "waitForTheAssignedAgent": {
                    "type": "integer"
                  },
                  "waitForTheAssignedQueue": {
                    "type": "integer"
                  },
                  "mapKey": {
                    "type": "string"
                  },
                  "queueTransfer": {
                    "type": "boolean"
                  },
                  "queueTransferTimeout": {
                    "type": "integer"
                  },
                  "agentTransfer": {
                    "type": "boolean"
                  },
                  "agentTransferTimeout": {
                    "type": "integer"
                  },
                  "mandatoryDispositionPauseId": {
                    "type": "integer"
                  },
                  "mandatoryDisposition": {
                    "type": "boolean"
                  },
                  "aiAssistantId": {
                    "type": "string"
                  },
                  "aiProviderId": {
                    "type": "integer"
                  }
                },
                "required": [
                  "name",
                  "key"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OpenchannelAccount successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenchannelAccount"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/openchannel/accounts/describe": {
      "get": {
        "summary": "Gets table info about Accounts",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeOpenchannelAccount",
        "tags": [
          "Openchannel Accounts"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/openchannel/accounts/{id}": {
      "get": {
        "summary": "Gets a single Account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getOpenchannelAccountById",
        "tags": [
          "Openchannel Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenchannelAccount to get"
          }
        ],
        "responses": {
          "200": {
            "description": "OpenchannelAccount with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenchannelAccount"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateOpenchannelAccountById",
        "tags": [
          "Openchannel Accounts"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new openchannelAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenchannelAccount to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteOpenchannelAccountById",
        "tags": [
          "Openchannel Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenchannelAccount to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/openchannel/accounts/{id}/dispositions": {
      "get": {
        "summary": "Gets account dispositions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getDispositions",
        "tags": [
          "Openchannel Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenchannelAccount"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates new disposition",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addDisposition",
        "tags": [
          "Openchannel Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenchannelAccount"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new openchannelAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "token": {
                    "type": "string"
                  },
                  "replyUri": {
                    "type": "string"
                  },
                  "key": {
                    "type": "string"
                  },
                  "notificationTemplate": {
                    "type": "string"
                  },
                  "notificationSound": {
                    "type": "boolean"
                  },
                  "notificationShake": {
                    "type": "boolean"
                  },
                  "waitForTheAssignedAgent": {
                    "type": "integer"
                  },
                  "waitForTheAssignedQueue": {
                    "type": "integer"
                  },
                  "mapKey": {
                    "type": "string"
                  },
                  "queueTransfer": {
                    "type": "boolean"
                  },
                  "queueTransferTimeout": {
                    "type": "integer"
                  },
                  "agentTransfer": {
                    "type": "boolean"
                  },
                  "agentTransferTimeout": {
                    "type": "integer"
                  },
                  "mandatoryDispositionPauseId": {
                    "type": "integer"
                  },
                  "mandatoryDisposition": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "name",
                  "key"
                ]
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Removes dispositions from account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeDispositions",
        "tags": [
          "Openchannel Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenchannelAccount"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/openchannel/accounts/{id}/canned_answers": {
      "get": {
        "summary": "Gets account canned answers",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getAnswers",
        "tags": [
          "Openchannel Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenchannelAccount"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates new canned answer",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addAnswer",
        "tags": [
          "Openchannel Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenchannelAccount"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new openchannelAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "token": {
                    "type": "string"
                  },
                  "replyUri": {
                    "type": "string"
                  },
                  "key": {
                    "type": "string"
                  },
                  "notificationTemplate": {
                    "type": "string"
                  },
                  "notificationSound": {
                    "type": "boolean"
                  },
                  "notificationShake": {
                    "type": "boolean"
                  },
                  "waitForTheAssignedAgent": {
                    "type": "integer"
                  },
                  "waitForTheAssignedQueue": {
                    "type": "integer"
                  },
                  "mapKey": {
                    "type": "string"
                  },
                  "queueTransfer": {
                    "type": "boolean"
                  },
                  "queueTransferTimeout": {
                    "type": "integer"
                  },
                  "agentTransfer": {
                    "type": "boolean"
                  },
                  "agentTransferTimeout": {
                    "type": "integer"
                  },
                  "mandatoryDispositionPauseId": {
                    "type": "integer"
                  },
                  "mandatoryDisposition": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "name",
                  "key"
                ]
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Removes canned answers from account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeAnswers",
        "tags": [
          "Openchannel Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenchannelAccount"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/openchannel/accounts/{id}/applications": {
      "get": {
        "summary": "Gets account applications",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getApplications",
        "tags": [
          "Openchannel Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenchannelAccount"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates new applications",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addApplications",
        "tags": [
          "Openchannel Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenchannelAccount"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new openchannelAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "token": {
                    "type": "string"
                  },
                  "replyUri": {
                    "type": "string"
                  },
                  "key": {
                    "type": "string"
                  },
                  "notificationTemplate": {
                    "type": "string"
                  },
                  "notificationSound": {
                    "type": "boolean"
                  },
                  "notificationShake": {
                    "type": "boolean"
                  },
                  "waitForTheAssignedAgent": {
                    "type": "integer"
                  },
                  "waitForTheAssignedQueue": {
                    "type": "integer"
                  },
                  "mapKey": {
                    "type": "string"
                  },
                  "queueTransfer": {
                    "type": "boolean"
                  },
                  "queueTransferTimeout": {
                    "type": "integer"
                  },
                  "agentTransfer": {
                    "type": "boolean"
                  },
                  "agentTransferTimeout": {
                    "type": "integer"
                  },
                  "mandatoryDispositionPauseId": {
                    "type": "integer"
                  },
                  "mandatoryDisposition": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "name",
                  "key"
                ]
              }
            }
          }
        }
      }
    },
    "/openchannel/accounts/{id}/interactions": {
      "get": {
        "summary": "Gets Openchannel Account Interactions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getInteractions",
        "tags": [
          "Openchannel Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenchannelAccount"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/openchannel/accounts/{id}/users": {
      "get": {
        "summary": "Gets agents from openchannel account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getAgents",
        "tags": [
          "Openchannel Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenchannelAccount"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add agents to a openchannel account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addAgents",
        "tags": [
          "Openchannel Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenchannelAccount"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new openchannelAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Removes agents from a openchannel account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeAgents",
        "tags": [
          "Openchannel Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenchannelAccount"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/openchannel/accounts/{id}/notify": {
      "post": {
        "summary": "Notify new message",
        "operationId": "notify",
        "tags": [
          "Openchannel Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenchannelAccount"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new openchannelAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/openchannel/accounts/{id}/send": {
      "post": {
        "summary": "Send new openchannel message",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "send",
        "tags": [
          "Openchannel Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenchannelAccount"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new openchannelAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/openchannel/applications": {
      "get": {
        "summary": "Gets a list of Applications",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllOpenchannelApplication",
        "tags": [
          "Openchannel Applications"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Applications",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OpenchannelApplication"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Applications",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OpenchannelApplication"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Application",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createOpenchannelApplication",
        "tags": [
          "Openchannel Applications"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new openchannelApplication",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "priority": {
                    "type": "integer"
                  },
                  "app": {
                    "type": "string"
                  },
                  "appdata": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "interval": {
                    "type": "string"
                  }
                },
                "required": [
                  "priority",
                  "app"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OpenchannelApplication successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenchannelApplication"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/openchannel/applications/{id}": {
      "get": {
        "summary": "Gets a single Application",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getOpenchannelApplicationById",
        "tags": [
          "Openchannel Applications"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenchannelApplication to get"
          }
        ],
        "responses": {
          "200": {
            "description": "OpenchannelApplication with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenchannelApplication"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Application",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateOpenchannelApplicationById",
        "tags": [
          "Openchannel Applications"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new openchannelApplication",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenchannelApplication to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Application",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteOpenchannelApplicationById",
        "tags": [
          "Openchannel Applications"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenchannelApplication to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/openchannel/interactions": {
      "get": {
        "summary": "Gets a list of Interactions",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllOpenchannelInteraction",
        "tags": [
          "Openchannel Interactions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Interactions",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OpenchannelInteraction"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Interactions",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OpenchannelInteraction"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Interaction",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createOpenchannelInteraction",
        "tags": [
          "Openchannel Interactions"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new openchannelInteraction",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "closed": {
                    "type": "boolean"
                  },
                  "closedAt": {
                    "type": "string"
                  },
                  "disposition": {
                    "type": "string"
                  },
                  "secondDisposition": {
                    "type": "string"
                  },
                  "thirdDisposition": {
                    "type": "string"
                  },
                  "note": {
                    "type": "string"
                  },
                  "read1stAt": {
                    "type": "string"
                  },
                  "threadId": {
                    "type": "string"
                  },
                  "externalUrl": {
                    "type": "string"
                  },
                  "lastMsgAt": {
                    "type": "string"
                  },
                  "lastMsgDirection": {
                    "type": "string",
                    "enum": [
                      "in",
                      "out"
                    ],
                    "default": "in"
                  },
                  "from": {
                    "type": "string"
                  },
                  "autoreplyExecuted": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "lastMsgDirection"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OpenchannelInteraction successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenchannelInteraction"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/openchannel/interactions/describe": {
      "get": {
        "summary": "Gets table info about Interactions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeOpenchannelInteraction",
        "tags": [
          "Openchannel Interactions"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/openchannel/interactions/counters": {
      "get": {
        "summary": "Gets counters info about Interactions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "tags": [
          "Openchannel Interactions"
        ],
        "operationId": "countOpenchannelInteraction",
        "parameters": [
          {
            "in": "query",
            "name": "OpenchannelAccountId",
            "schema": {
              "type": "integer"
            },
            "description": "Filter by OpenchannelAccountId"
          },
          {
            "in": "query",
            "name": "createdAt.gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "This stands for 'greater or equal'. It select all the records created after the date specified.",
            "example": "2022-01-01-T00:00:00Z"
          },
          {
            "in": "query",
            "name": "createdAt.lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "This stands for 'less or equal'. It select all the records created before the date specified.",
            "example": "2022-01-01-T00:00:00Z"
          }
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve counters informations grouped by OpenchannelAccountId",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "results count",
                      "default": 0
                    },
                    "rows": {
                      "description": "OpenchannelInteraction counters",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Counter"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/openchannel/interactions/{id}": {
      "get": {
        "summary": "Gets a single Interaction",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getOpenchannelInteractionById",
        "tags": [
          "Openchannel Interactions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenchannelInteraction to get"
          }
        ],
        "responses": {
          "200": {
            "description": "OpenchannelInteraction with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenchannelInteraction"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Interaction",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateOpenchannelInteractionById",
        "tags": [
          "Openchannel Interactions"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new openchannelInteraction",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenchannelInteraction to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Interaction",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteOpenchannelInteractionById",
        "tags": [
          "Openchannel Interactions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenchannelInteraction to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/openchannel/interactions/{id}/messages": {
      "get": {
        "summary": "Gets interaction messages",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getMessages",
        "tags": [
          "Openchannel Interactions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenchannelInteraction"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates new messages",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addMessage",
        "tags": [
          "Openchannel Interactions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenchannelInteraction"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new openchannelInteraction",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "closed": {
                    "type": "boolean"
                  },
                  "closedAt": {
                    "type": "string"
                  },
                  "disposition": {
                    "type": "string"
                  },
                  "secondDisposition": {
                    "type": "string"
                  },
                  "thirdDisposition": {
                    "type": "string"
                  },
                  "note": {
                    "type": "string"
                  },
                  "read1stAt": {
                    "type": "string"
                  },
                  "threadId": {
                    "type": "string"
                  },
                  "externalUrl": {
                    "type": "string"
                  },
                  "lastMsgAt": {
                    "type": "string"
                  },
                  "lastMsgDirection": {
                    "type": "string",
                    "enum": [
                      "in",
                      "out"
                    ],
                    "default": "in"
                  },
                  "from": {
                    "type": "string"
                  }
                },
                "required": [
                  "lastMsgDirection"
                ]
              }
            }
          }
        }
      }
    },
    "/openchannel/interactions/{id}/download": {
      "get": {
        "summary": "Gets interaction",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "download",
        "tags": [
          "Openchannel Interactions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenchannelInteraction"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/openchannel/interactions/{id}/tags": {
      "post": {
        "summary": "Add tags to the interaction",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addTags",
        "tags": [
          "Openchannel Interactions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenchannelInteraction"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new openchannelInteraction",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Removes tags from interaction",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeTags",
        "tags": [
          "Openchannel Interactions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenchannelInteraction"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/openchannel/messages": {
      "get": {
        "summary": "Gets a list of Messages",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllOpenchannelMessage",
        "tags": [
          "Openchannel Messages"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Messages",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OpenchannelMessage"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Messages",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OpenchannelMessage"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Message",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createOpenchannelMessage",
        "tags": [
          "Openchannel Messages"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new openchannelMessage",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "string"
                  },
                  "read": {
                    "type": "boolean"
                  },
                  "secret": {
                    "type": "boolean"
                  },
                  "direction": {
                    "type": "string",
                    "enum": [
                      "in",
                      "out"
                    ],
                    "default": "in"
                  },
                  "readAt": {
                    "type": "string"
                  },
                  "providerName": {
                    "type": "string"
                  },
                  "providerResponse": {
                    "type": "string"
                  }
                },
                "required": [
                  "body",
                  "direction"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OpenchannelMessage successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenchannelMessage"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/openchannel/messages/describe": {
      "get": {
        "summary": "Gets table info about Messages",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeOpenchannelMessage",
        "tags": [
          "Openchannel Messages"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/openchannel/messages/{id}": {
      "get": {
        "summary": "Gets a single Message",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getOpenchannelMessageById",
        "tags": [
          "Openchannel Messages"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenchannelMessage to get"
          }
        ],
        "responses": {
          "200": {
            "description": "OpenchannelMessage with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenchannelMessage"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Message",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateOpenchannelMessageById",
        "tags": [
          "Openchannel Messages"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new openchannelMessage",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenchannelMessage to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Message",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteOpenchannelMessageById",
        "tags": [
          "Openchannel Messages"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenchannelMessage to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/openchannel/messages/{id}/accept": {
      "put": {
        "summary": "Accepts message",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "accept",
        "tags": [
          "Openchannel Messages"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenchannelMessage"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new openchannelMessage",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/openchannel/messages/{id}/reject": {
      "put": {
        "summary": "Rejects message",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "reject",
        "tags": [
          "Openchannel Messages"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenchannelMessage"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new openchannelMessage",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/openchannel/queues": {
      "get": {
        "summary": "Gets a list of Queues",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllOpenchannelQueue",
        "tags": [
          "Openchannel Queues"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Queues",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OpenchannelQueue"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Queues",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OpenchannelQueue"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createOpenchannelQueue",
        "tags": [
          "Openchannel Queues"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new openchannelQueue",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "timeout": {
                    "type": "integer"
                  },
                  "strategy": {
                    "type": "string",
                    "enum": [
                      "rrmemory",
                      "beepall",
                      "roundrobin"
                    ],
                    "default": "rrmemory"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OpenchannelQueue successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenchannelQueue"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/openchannel/queues/describe": {
      "get": {
        "summary": "Gets table info about Queues",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeOpenchannelQueue",
        "tags": [
          "Openchannel Queues"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/openchannel/queues/{id}": {
      "get": {
        "summary": "Gets a single Queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getOpenchannelQueueById",
        "tags": [
          "Openchannel Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenchannelQueue to get"
          }
        ],
        "responses": {
          "200": {
            "description": "OpenchannelQueue with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenchannelQueue"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateOpenchannelQueueById",
        "tags": [
          "Openchannel Queues"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new openchannelQueue",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenchannelQueue to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteOpenchannelQueueById",
        "tags": [
          "Openchannel Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenchannelQueue to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/openchannel/queues/{id}/members": {
      "get": {
        "summary": "GetMembers",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getMembers",
        "tags": [
          "Openchannel Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenchannelQueue"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/openchannel/queues/{id}/teams": {
      "get": {
        "summary": "Gets queues list",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getTeams",
        "tags": [
          "Openchannel Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenchannelQueue"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add teams to a queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addTeams",
        "tags": [
          "Openchannel Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenchannelQueue"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new openchannelQueue",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Remove teams from a queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeTeams",
        "tags": [
          "Teams"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenchannelQueue"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/openchannel/queues/{id}/users": {
      "get": {
        "summary": "Gets queue agents",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getAgents",
        "tags": [
          "Openchannel Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenchannelQueue"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add agents to a queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addAgents",
        "tags": [
          "Openchannel Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenchannelQueue"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new openchannelQueue",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Removes agents from a queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeAgents",
        "tags": [
          "Openchannel Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenchannelQueue"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/openchannel/queues/{id}/profiles": {
      "get": {
        "summary": "Gets queue profiles",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getProfiles",
        "tags": [
          "Openchannel Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenchannelQueue"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add profiles to a queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addProfiles",
        "tags": [
          "Openchannel Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenchannelQueue"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new openchannelQueue",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Removes profiles from a queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeProfiles",
        "tags": [
          "Openchannel Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenchannelQueue"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/openchannel/reports/queue": {
      "get": {
        "summary": "Gets a list of Openchannel Queue Reports",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllOpenchannelQueueReport",
        "tags": [
          "Openchannel Queue Reports"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Openchannel Queue Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OpenchannelQueueReport"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Openchannel Queue Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OpenchannelQueueReport"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Openchannel Queue Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createOpenchannelQueueReport",
        "tags": [
          "Openchannel Queue Reports"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new openchannelQueueReport",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "uniqueid": {
                    "type": "string"
                  },
                  "from": {
                    "type": "string"
                  },
                  "joinAt": {
                    "type": "string"
                  },
                  "leaveAt": {
                    "type": "string"
                  },
                  "acceptAt": {
                    "type": "string"
                  },
                  "exitAt": {
                    "type": "string"
                  },
                  "reason": {
                    "type": "string"
                  }
                },
                "required": [
                  "uniqueid"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OpenchannelQueueReport successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenchannelQueueReport"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/openchannel/reports/queue/describe": {
      "get": {
        "summary": "Gets table info about Openchannel Queue Reports",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeOpenchannelQueueReport",
        "tags": [
          "Openchannel Queue Reports"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/openchannel/reports/queue/{id}": {
      "get": {
        "summary": "Gets a single Openchannel Queue Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getOpenchannelQueueReportById",
        "tags": [
          "Openchannel Queue Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenchannelQueueReport to get"
          }
        ],
        "responses": {
          "200": {
            "description": "OpenchannelQueueReport with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenchannelQueueReport"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Openchannel Queue Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateOpenchannelQueueReportById",
        "tags": [
          "Openchannel Queue Reports"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new openchannelQueueReport",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenchannelQueueReport to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Openchannel Queue Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteOpenchannelQueueReportById",
        "tags": [
          "Openchannel Queue Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenchannelQueueReport to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/openchannel/reports/transfer": {
      "get": {
        "summary": "Gets a list of Openchannel Transfer Reports",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllOpenchannelTransferReport",
        "tags": [
          "Openchannel Transfer Reports"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Openchannel Transfer Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OpenchannelTransferReport"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Openchannel Transfer Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OpenchannelTransferReport"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Openchannel Transfer Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createOpenchannelTransferReport",
        "tags": [
          "Openchannel Transfer Reports"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new openchannelTransferReport",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "uniqueid": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "account",
                      "agent",
                      "queue"
                    ],
                    "default": "account"
                  },
                  "transferredAt": {
                    "type": "string"
                  }
                },
                "required": [
                  "uniqueid",
                  "type",
                  "transferredAt"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OpenchannelTransferReport successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenchannelTransferReport"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/openchannel/reports/transfer/describe": {
      "get": {
        "summary": "Gets table info about Openchannel Transfer Reports",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeOpenchannelTransferReport",
        "tags": [
          "Openchannel Transfer Reports"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/openchannel/reports/transfer/{id}": {
      "get": {
        "summary": "Gets a single Openchannel Transfer Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getOpenchannelTransferReportById",
        "tags": [
          "Openchannel Transfer Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenchannelTransferReport to get"
          }
        ],
        "responses": {
          "200": {
            "description": "OpenchannelTransferReport with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenchannelTransferReport"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Openchannel Transfer Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateOpenchannelTransferReportById",
        "tags": [
          "Openchannel Transfer Reports"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new openchannelTransferReport",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenchannelTransferReport to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Openchannel Transfer Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteOpenchannelTransferReportById",
        "tags": [
          "Openchannel Transfer Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the OpenchannelTransferReport to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/pauses": {
      "get": {
        "summary": "Gets a list of Pauses",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllPause",
        "tags": [
          "Pauses"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Pauses",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    },
                    "rows": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Pause"
                      }
                    }
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Pauses",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pause"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Pause",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createPause",
        "tags": [
          "Pauses"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new pause",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Pause successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pause"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/pauses/deletemany": {
      "post": {
        "summary": "Pauses mass delete",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "massDeletePause",
        "tags": [
          "Pauses"
        ],
        "requestBody": {
          "required": true,
          "description": "data for removing the pauses",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Pauses successfully removed"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/pauses/{id}": {
      "get": {
        "summary": "Gets a single Pause",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getPauseById",
        "tags": [
          "Pauses"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Pause to get"
          },
          {
            "$ref": "#/components/parameters/fieldsParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Pause with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pause"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Pause",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updatePauseById",
        "tags": [
          "Pauses"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new pause",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PauseReason"
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Pause to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Pause",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deletePauseById",
        "tags": [
          "Pauses"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Pause to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/pauses/{id}/reasons": {
      "get": {
        "summary": "Gets the list of reasons this pause is allowed to use",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getReasonsOfPause",
        "tags": [
          "Pauses"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the pause with the reasons to retrieve"
          },
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "List of reasons allowed to be used with this pause",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    },
                    "rows": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PauseReason"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Allow the given reason to be usable with this pause",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addReasonsToPause",
        "tags": [
          "Pauses"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the pause to which the reasons will be assigned"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Ids of the reasons to assign to the pause",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "The given reasons will not be eligible to be used with this pause anymore",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeReasonsFromPause",
        "tags": [
          "Pauses"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the pause from which the reasons will be removed"
          },
          {
            "in": "query",
            "name": "ids",
            "allowReserved": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "description": "ids of the reasons to be removed",
            "examples": {
              "fields": {
                "value": "1,2,3",
                "summary": "remove reasons with id=1 OR id=2 OR id=3"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/pause_reasons": {
      "get": {
        "summary": "Gets a list of pause Reasons",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllPauseReasons",
        "tags": [
          "PauseReasons"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of pause Reasons",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    },
                    "rows": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PauseReason"
                      }
                    }
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of PauseReasons",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PauseReason"
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Pause Reason",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createPauseReason",
        "tags": [
          "PauseReasons"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new pause reason",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Pause reason successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PauseReason"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/pause_reasons/deletemany": {
      "post": {
        "summary": "Pause reasons mass delete",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "massDeletePause",
        "tags": [
          "PauseReasons"
        ],
        "requestBody": {
          "required": true,
          "description": "data for removing the pause reasons",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Pause reasons successfully removed"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/pause_reasons/{id}": {
      "get": {
        "summary": "Gets a single pause Reason",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getPauseReasonById",
        "tags": [
          "PauseReasons"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the pause reason to get"
          },
          {
            "$ref": "#/components/parameters/fieldsParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Pause reason with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PauseReason"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Pause Reason",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updatePauseReasonById",
        "tags": [
          "PauseReasons"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new pause reason",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PauseReason"
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Pause Reason to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Pause Reason",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deletePauseReasonById",
        "tags": [
          "PauseReasons"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Pause Reason to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/pause_reasons/{id}/pauses": {
      "get": {
        "summary": "Gets the list of pauses using this Pause Reason",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getPausesOfPauseReason",
        "tags": [
          "PauseReasons"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the pause reason with the pauses to retrieve"
          },
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "List of pauses allowed to be resolved with this reason",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    },
                    "rows": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Pause"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Allow the given pauses to be usable with this reason",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addPausesToPauseReason",
        "tags": [
          "PauseReasons"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the pause reason to which the pauses will be assigned"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Ids of the pauses to assign to the pause reason",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Pause Reason",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "Removes a list of pauses from this individual reason",
        "tags": [
          "PauseReasons"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the pause reason from which the pauses will be removed"
          },
          {
            "in": "query",
            "name": "ids",
            "allowReserved": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "description": "ids of the pauses to be removed",
            "examples": {
              "fields": {
                "value": "1,2,3",
                "summary": "remove pauses with id=1 OR id=2 OR id=3"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/plugins": {
      "get": {
        "summary": "Gets a list of Plugins",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllPlugin",
        "tags": [
          "Plugins"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Plugins",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Plugin"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Plugins",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Plugin"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Upload new plugin",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "postupload",
        "tags": [
          "Plugins"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new plugin",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "success."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/plugins/webhook": {
      "get": {
        "summary": "Redirect a plugin request to the specified path",
        "operationId": "webhookGet",
        "tags": [
          "Plugins"
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Redirect a plugin request to the specified path",
        "operationId": "webhookPost",
        "tags": [
          "Plugins"
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new plugin",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/plugins/{id}": {
      "get": {
        "summary": "Gets a single Plugin",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getPluginById",
        "tags": [
          "Plugins"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Plugin to get"
          }
        ],
        "responses": {
          "200": {
            "description": "Plugin with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plugin"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing plugin",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "update",
        "tags": [
          "Plugins"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Plugin"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new plugin",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a plugin",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "delete",
        "tags": [
          "Plugins"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Plugin"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/plugins/{id}/download": {
      "get": {
        "summary": "Download plugin source code",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "download",
        "tags": [
          "Plugins"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Plugin"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/pm2": {
      "get": {
        "summary": "Gets pm2 processes",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getPm2Processes",
        "tags": [
          "Pm2"
        ],
        "responses": {
          "200": {
            "description": "list of processes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/pm2/{id}": {
      "get": {
        "summary": "Gets a single pm2 process by id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getPm2Process",
        "tags": [
          "Pm2"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the process"
          }
        ],
        "responses": {
          "200": {
            "description": "process information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Start a single pm2 process",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "startPm2Process",
        "tags": [
          "Pm2"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the process"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "data for starting the plugin",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "script": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "script"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "successfully started"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing process",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updatePm2Process",
        "tags": [
          "Pm2"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the process"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new pm2",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Delete an existing process by id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deletePm2Process",
        "tags": [
          "Pm2"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the process"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/profiles": {
      "get": {
        "summary": "Gets a list of all profiles",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllProfiles",
        "tags": [
          "List Profiles"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Profiles",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Profile"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Profiles",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Profile"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Profile",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createProfile",
        "tags": [
          "Profile Create"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new Profile",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Profile successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Profile"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Mass Delete Profiles",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "massDeleteProfile",
        "tags": [
          "Profile Mass Delete"
        ],
        "requestBody": {
          "required": true,
          "description": "IDs of all the profiles to delete",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": "number"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Profile successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Profile"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/profiles/{profileId}": {
      "get": {
        "summary": "Gets a single Profile",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getProfileById",
        "tags": [
          "Profile Detail"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "profileId",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Profile to get"
          }
        ],
        "responses": {
          "200": {
            "description": "Profile with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Profile"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Profile",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateProfileById",
        "tags": [
          "Profiles"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new Profile",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "profileId",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Profile to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Delete an existing Profile",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteProfileById",
        "tags": [
          "Profiles"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "profileId",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Profile to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/profiles/{profileId}/{channelType}Queues": {
      "get": {
        "summary": "Get all the queues of the given type related to the given profile",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getQueuesRelatedToAGivenProfile",
        "tags": [
          "Profile Queues List"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "profileId",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Profile to get"
          },
          {
            "in": "path",
            "name": "channelType",
            "schema": {
              "type": "string",
              "enum": [
                "chat",
                "fax",
                "mail",
                "openchannel",
                "sms",
                "voice",
                "whatsapp"
              ]
            },
            "required": true,
            "description": "Retrieve queues belonging to the given profile"
          }
        ],
        "responses": {
          "200": {
            "description": "Profile with matching id, and the related queues",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Profile"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Link a list of queues to the given profile",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "profileAddUQueues",
        "tags": [
          "Profile Queues Add"
        ],
        "requestBody": {
          "required": true,
          "description": "Add users with the given ids to",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Relationship successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Profile"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Remove a list of queues of the given type from the given profile",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "profileRemoveQueues",
        "tags": [
          "Profile Remove Queues"
        ],
        "requestBody": {
          "required": true,
          "description": "Remove queues with the given ids and the given type from the current profile",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Relationships successfully removed."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/profiles/{profileId}/users": {
      "get": {
        "summary": "Gets a single Profile, and include data regarding all of its related users",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getProfileWithQueuesById",
        "tags": [
          "Profile Detail Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Profile to get"
          }
        ],
        "responses": {
          "200": {
            "description": "Profile with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Profile"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Link a list of users to a given profile",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "profileAddUsers",
        "tags": [
          "Profile Add Users"
        ],
        "requestBody": {
          "required": true,
          "description": "Add users with the given ids to",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Profile successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Profile"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Remove a list of users from the given profile",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "profileRemoveUsers",
        "tags": [
          "Profile Remove Users"
        ],
        "requestBody": {
          "required": true,
          "description": "Remove users with the given ids from the current profile",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Relationships successfully removed."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/realtime/agents": {
      "get": {
        "summary": "Returns a list of realtime agents",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getRealtimeAgents",
        "tags": [
          "Realtime"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "channel",
            "description": "The specific channel for filtering realtime agents.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "chat",
                "fax",
                "mail",
                "openchannel",
                "sms",
                "voice",
                "whatsapp"
              ],
              "default": "voice"
            }
          },
          {
            "in": "query",
            "name": "globalQueueFilter",
            "description": "The queue(s) ID(s) for filtering realtime agents. \n\nWhen provided, only agents associated with the specified queue(s) will be retrieved. \n\nMultiple queue IDs can be provided as a comma-separated list.\n",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "in": "query",
            "name": "globalStatusFilter",
            "description": "The agent status across all channels.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "pause",
                "*pause",
                "busy",
                "idle"
              ]
            }
          },
          {
            "in": "query",
            "name": "pauseTypeFilter",
            "description": "The specific pause type for filtering realtime agents who are currently paused.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "online",
            "description": "The agent online status.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with a list of Realtime Agents specific to a channel.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "The total number of Realtime Agents in the response.\n\nDefaults to 0 if no items are found.\n",
                      "default": 0
                    },
                    "rows": {
                      "description": "List of Realtime Agents containing detailed information.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RealtimeAgent"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/realtime/queues": {
      "get": {
        "summary": "Returns a list of realtime queues",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getRealtimeQueues",
        "tags": [
          "Realtime"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "channel",
            "description": "The specific channel for filtering realtime queues.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "chat",
                "fax",
                "mail",
                "openchannel",
                "sms",
                "voice",
                "whatsapp"
              ],
              "default": "voice"
            }
          },
          {
            "in": "query",
            "name": "type",
            "description": "The voice queue type for filtering realtime queues.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "inbound",
                "outbound"
              ],
              "default": "inbound"
            }
          },
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with a list of Realtime Queues specific to a channel.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "The total number of Realtime Queues in the response.\n\nDefaults to 0 if no items are found.\n",
                      "default": 0
                    },
                    "rows": {
                      "description": "List of Realtime Queues containing detailed information.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RealtimeQueue"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/rpc/voice/channels": {
      "get": {
        "summary": "Gets a list of realtime voice channels",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getRealtimeVoiceChannels",
        "tags": [
          "RPC Realtime"
        ],
        "parameters": [
          {
            "name": "abandoned",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false"
              ]
            }
          },
          {
            "name": "accountcode",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "answertime",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "answered",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false"
              ]
            }
          },
          {
            "name": "billableseconds",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channel",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "callerid",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "calleridname",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "calleridnum",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "calleridpreview",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "connectedlinename",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "connectedlinenum",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "context",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "destination",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "destinationchannel",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "disposition",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "duration",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endtime",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "exten",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "holdtime",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastapplication",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastdata",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "linkedid",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "membername",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "monitor",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false"
              ]
            }
          },
          {
            "name": "monitorFilename",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mohstarttime",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mohtime",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "originatecalleridnum",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "queue",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "queuegroupid",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "routealias",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sipcalllinkedid",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sipcalluniqueid",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "starttime",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tag",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transfercalleridnum",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transferconnectedlinenum",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transferType",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "ATTENDED",
                "BLIND"
              ]
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "inbound",
                "internal",
                "outbound"
              ]
            }
          },
          {
            "name": "uniqueid",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "unmanaged",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false"
              ]
            }
          },
          {
            "name": "UserId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "useORFiltering",
            "in": "query",
            "description": "Flag to enable or disable OR filtering",
            "schema": {
              "type": "string",
              "default": "false",
              "enum": [
                "true",
                "false"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "list of realtimeVoiceChannels",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/rpc/mail/queues/{id}/notify": {
      "post": {
        "summary": "Notify message to a specific mail queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "postMailQueueNotify",
        "tags": [
          "RPC Realtime"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the agent"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new rpc",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Notification",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/rpc/mail/queues/{id}": {
      "get": {
        "summary": "Gets a single RTMailQueue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getRTMailQueue",
        "tags": [
          "RPC Realtime"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the queue"
          }
        ],
        "responses": {
          "200": {
            "description": "Queue",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/rpc/chat/queues/{id}/notify": {
      "post": {
        "summary": "Notify message to a specific chat queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "postChatQueueNotify",
        "tags": [
          "RPC Realtime"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the agent"
          }
        ],
        "responses": {
          "200": {
            "description": "Notification",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new rpc",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/rpc/chat/queues/{id}": {
      "get": {
        "summary": "Gets a single RTChatQueue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getRTChatQueue",
        "tags": [
          "RPC Realtime"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the queue"
          }
        ],
        "responses": {
          "200": {
            "description": "Queue",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/rpc/fax/queues/{id}/notify": {
      "post": {
        "summary": "Notify message to a specific fax queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "postFaxQueueNotify",
        "tags": [
          "RPC Realtime"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the queue"
          }
        ],
        "responses": {
          "200": {
            "description": "Notification",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new rpc",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/rpc/fax/queues/{id}": {
      "get": {
        "summary": "Gets a single RTFaxQueue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getRTFaxQueue",
        "tags": [
          "RPC Realtime"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the queue"
          }
        ],
        "responses": {
          "200": {
            "description": "Queue",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/rpc/openchannel/queues/{id}/notify": {
      "post": {
        "summary": "Notify message to a specific openchannel queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "postOpenchannelQueueNotify",
        "tags": [
          "RPC Realtime"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the queue"
          }
        ],
        "responses": {
          "200": {
            "description": "Notification",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new rpc",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/rpc/openchannel/queues/{id}": {
      "get": {
        "summary": "Gets a single RTOpenchannelQueue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getRTOpenchannelQueue",
        "tags": [
          "RPC Realtime"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the queue"
          }
        ],
        "responses": {
          "200": {
            "description": "Queue",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/rpc/sms/queues/{id}/notify": {
      "post": {
        "summary": "Notify message to a specific sms queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "postSmsQueueNotify",
        "tags": [
          "RPC Realtime"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the queue"
          }
        ],
        "responses": {
          "200": {
            "description": "Notification",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new rpc",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/rpc/whatsapp/queues/{id}/notify": {
      "post": {
        "summary": "Notify message to a specific whatsapp queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "postWhatsappQueueNotify",
        "tags": [
          "RPC Realtime"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the queue"
          }
        ],
        "responses": {
          "200": {
            "description": "Notification",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new rpc",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/rpc/sms/queues/{id}": {
      "get": {
        "summary": "Gets a single RTSmsQueue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getRTSmsQueue",
        "tags": [
          "RPC Realtime"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the queue"
          }
        ],
        "responses": {
          "200": {
            "description": "Queue",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/rpc/whatsapp/queues/{id}": {
      "get": {
        "summary": "Gets a single RTWhatsappQueue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getRTWhatsappQueue",
        "tags": [
          "RPC Realtime"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the queue"
          }
        ],
        "responses": {
          "200": {
            "description": "Queue",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/rpc/agents/{id}/notify": {
      "post": {
        "summary": "Notify message to a specific agent",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "postAgentNotify",
        "tags": [
          "RPC Realtime"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the agent"
          }
        ],
        "responses": {
          "200": {
            "description": "Notification",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new rpc",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/schedules": {
      "get": {
        "summary": "Gets a list of Schedules",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllSchedule",
        "tags": [
          "Schedules"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Schedules",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Schedule"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Schedules",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Schedule"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Schedule",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createSchedule",
        "tags": [
          "Schedules"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new schedule",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "active": {
                    "type": "boolean"
                  },
                  "cron": {
                    "type": "string"
                  },
                  "startAt": {
                    "type": "string"
                  },
                  "endAt": {
                    "type": "string"
                  },
                  "subtractNumber": {
                    "type": "integer"
                  },
                  "subtractUnit": {
                    "type": "string",
                    "enum": [
                      "years",
                      "quarters",
                      "months",
                      "weeks",
                      "days",
                      "hours",
                      "minutes"
                    ],
                    "default": "years"
                  },
                  "output": {
                    "type": "string",
                    "enum": [
                      "csv",
                      "pdf",
                      "xlsx"
                    ],
                    "default": "csv"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "custom",
                      "default"
                    ],
                    "default": "custom"
                  },
                  "sendMail": {
                    "type": "boolean"
                  },
                  "email": {
                    "type": "string"
                  },
                  "cc": {
                    "type": "string"
                  },
                  "bcc": {
                    "type": "string"
                  },
                  "sendIfEmpty": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "name",
                  "active",
                  "cron",
                  "startAt",
                  "endAt",
                  "subtractNumber",
                  "subtractUnit",
                  "output",
                  "type"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Schedule successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Schedule"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/schedules/{id}": {
      "get": {
        "summary": "Gets a single Schedule",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getScheduleById",
        "tags": [
          "Schedules"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Schedule to get"
          }
        ],
        "responses": {
          "200": {
            "description": "Schedule with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Schedule"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Schedule",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateScheduleById",
        "tags": [
          "Schedules"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new schedule",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Schedule to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Schedule",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteScheduleById",
        "tags": [
          "Schedules"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Schedule to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/schedules/{id}/run": {
      "get": {
        "summary": "Run Scheduler",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "run",
        "tags": [
          "Schedules"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Schedule"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/screen/recordings": {
      "get": {
        "summary": "Gets a list of Recordings",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllScreenRecording",
        "tags": [
          "Screen Recordings"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Recordings",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScreenRecording"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Recordings",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScreenRecording"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Recording",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createScreenRecording",
        "tags": [
          "Screen Recordings"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new screenRecording",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "format": {
                    "type": "string"
                  },
                  "interactionid": {
                    "type": "string"
                  },
                  "channel": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  },
                  "rating": {
                    "type": "integer"
                  },
                  "duration": {
                    "type": "integer"
                  },
                  "startedAt": {
                    "type": "string"
                  },
                  "closedAt": {
                    "type": "string"
                  },
                  "createdAt": {
                    "type": "string"
                  },
                  "updatedAt": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "ScreenRecording successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScreenRecording"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/screen/recordings/describe": {
      "get": {
        "summary": "Gets table info about Recordings",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeScreenRecording",
        "tags": [
          "Screen Recordings"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/screen/recordings/{id}": {
      "get": {
        "summary": "Gets a single Recording",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getScreenRecordingById",
        "tags": [
          "Screen Recordings"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ScreenRecording to get"
          }
        ],
        "responses": {
          "200": {
            "description": "ScreenRecording with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScreenRecording"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Recording",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateScreenRecordingById",
        "tags": [
          "Screen Recordings"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new screenRecording",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ScreenRecording to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Delete screen recording",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "destroy",
        "tags": [
          "Screen Recordings"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ScreenRecording"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/screen/recordings/{id}/download": {
      "get": {
        "summary": "Download Recording",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "download",
        "tags": [
          "Screen Recordings"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ScreenRecording"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/settings": {
      "get": {
        "summary": "Gets a list of Settings",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllSetting",
        "tags": [
          "Settings"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Settings",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Setting"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Settings",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Setting"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/settings/now": {
      "get": {
        "summary": "Get Server Current Date",
        "operationId": "getDate",
        "tags": [
          "Settings"
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/settings/{id}": {
      "get": {
        "summary": "Gets a single Setting",
        "operationId": "getSettingById",
        "tags": [
          "Settings"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Setting to get"
          }
        ],
        "responses": {
          "200": {
            "description": "Setting with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Setting"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Setting",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateSettingById",
        "tags": [
          "Settings"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new setting",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Setting to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/settings/{id}/logo": {
      "get": {
        "summary": "Get logo",
        "operationId": "getLogo",
        "tags": [
          "Settings"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Setting"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add logo",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "postaddLogo",
        "tags": [
          "Settings"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Setting"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new setting",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "success."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/settings/{id}/logo_login": {
      "get": {
        "summary": "Get logo login",
        "operationId": "getLogoLogin",
        "tags": [
          "Settings"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Setting"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add logo login",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "postaddLogoLogin",
        "tags": [
          "Settings"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Setting"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new setting",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "success."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/settings/{id}/gdpr": {
      "get": {
        "summary": "Get gdpr settings",
        "operationId": "gdpr",
        "tags": [
          "Settings"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Setting"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/settings/{id}/preferred": {
      "get": {
        "summary": "Get Preferred",
        "operationId": "getPreferred",
        "tags": [
          "Settings"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Setting"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add Preferred",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "postaddPreferred",
        "tags": [
          "Settings"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Setting"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new setting",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "success."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/settings/{id}/favicon": {
      "get": {
        "summary": "Get Favicon",
        "operationId": "getFavicon",
        "tags": [
          "Settings"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Setting"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add Favicon",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "postaddFavicon",
        "tags": [
          "Settings"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Setting"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new setting",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "success."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/settings/env/": {
      "get": {
        "summary": "Get environment valriables",
        "operationId": "getEnv",
        "tags": [
          "Settings"
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "responses": {
        "201": {
          "description": "success."
        },
        "401": {
          "$ref": "#/components/responses/Unauthorized"
        },
        "403": {
          "$ref": "#/components/responses/Forbidden"
        },
        "500": {
          "$ref": "#/components/responses/InternalServerError"
        }
      }
    },
    "/sms/accounts": {
      "get": {
        "summary": "Gets a list of Accounts",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllSmsAccount",
        "tags": [
          "Sms Accounts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Accounts",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SmsAccount"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Accounts",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SmsAccount"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createSmsAccount",
        "tags": [
          "Sms Accounts"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new smsAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "key": {
                    "type": "string"
                  },
                  "remote": {
                    "type": "string"
                  },
                  "token": {
                    "type": "string"
                  },
                  "phone": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "twilio",
                      "skebby",
                      "connectel",
                      "clicksend",
                      "plivo",
                      "clickatell",
                      "bandwidth",
                      "csc",
                      "infobip",
                      "intelepeer"
                    ],
                    "default": "twilio"
                  },
                  "accountSid": {
                    "type": "string"
                  },
                  "authId": {
                    "type": "string"
                  },
                  "authToken": {
                    "type": "string"
                  },
                  "smsMethod": {
                    "type": "string",
                    "enum": [
                      "SI",
                      "TI",
                      "GP"
                    ],
                    "default": "SI"
                  },
                  "username": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "apiKey": {
                    "type": "string"
                  },
                  "applicationId": {
                    "type": "string"
                  },
                  "accountId": {
                    "type": "string"
                  },
                  "senderString": {
                    "type": "string"
                  },
                  "deliveryReport": {
                    "type": "boolean"
                  },
                  "description": {
                    "type": "string"
                  },
                  "notificationTemplate": {
                    "type": "string"
                  },
                  "notificationSound": {
                    "type": "boolean"
                  },
                  "notificationShake": {
                    "type": "boolean"
                  },
                  "waitForTheAssignedAgent": {
                    "type": "integer"
                  },
                  "waitForTheAssignedQueue": {
                    "type": "integer"
                  },
                  "queueTransfer": {
                    "type": "boolean"
                  },
                  "queueTransferTimeout": {
                    "type": "integer"
                  },
                  "agentTransfer": {
                    "type": "boolean"
                  },
                  "agentTransferTimeout": {
                    "type": "integer"
                  },
                  "baseUrl": {
                    "type": "string"
                  },
                  "mandatoryDispositionPauseId": {
                    "type": "integer"
                  },
                  "mandatoryDisposition": {
                    "type": "boolean"
                  },
                  "aiAssistantId": {
                    "type": "string"
                  },
                  "aiProviderId": {
                    "type": "integer"
                  }
                },
                "required": [
                  "name",
                  "key",
                  "remote"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "SmsAccount successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmsAccount"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/sms/accounts/describe": {
      "get": {
        "summary": "Gets table info about Accounts",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeSmsAccount",
        "tags": [
          "Sms Accounts"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/sms/accounts/{id}": {
      "get": {
        "summary": "Gets a single Account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getSmsAccountById",
        "tags": [
          "Sms Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsAccount to get"
          }
        ],
        "responses": {
          "200": {
            "description": "SmsAccount with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmsAccount"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateSmsAccountById",
        "tags": [
          "Sms Accounts"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new smsAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsAccount to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteSmsAccountById",
        "tags": [
          "Sms Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsAccount to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/sms/accounts/{id}/dispositions": {
      "get": {
        "summary": "Gets account dispositions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getDispositions",
        "tags": [
          "Sms Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsAccount"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates new disposition",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addDisposition",
        "tags": [
          "Sms Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsAccount"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new smsAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "key": {
                    "type": "string"
                  },
                  "remote": {
                    "type": "string"
                  },
                  "token": {
                    "type": "string"
                  },
                  "phone": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "twilio",
                      "skebby",
                      "connectel",
                      "clicksend",
                      "plivo",
                      "clickatell",
                      "csc",
                      "infobip",
                      "intelepeer"
                    ],
                    "default": "twilio"
                  },
                  "accountSid": {
                    "type": "string"
                  },
                  "authId": {
                    "type": "string"
                  },
                  "authToken": {
                    "type": "string"
                  },
                  "smsMethod": {
                    "type": "string",
                    "enum": [
                      "SI",
                      "TI",
                      "GP"
                    ],
                    "default": "SI"
                  },
                  "username": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "apiKey": {
                    "type": "string"
                  },
                  "senderString": {
                    "type": "string"
                  },
                  "deliveryReport": {
                    "type": "boolean"
                  },
                  "description": {
                    "type": "string"
                  },
                  "notificationTemplate": {
                    "type": "string"
                  },
                  "notificationSound": {
                    "type": "boolean"
                  },
                  "notificationShake": {
                    "type": "boolean"
                  },
                  "waitForTheAssignedAgent": {
                    "type": "integer"
                  },
                  "waitForTheAssignedQueue": {
                    "type": "integer"
                  },
                  "queueTransfer": {
                    "type": "boolean"
                  },
                  "queueTransferTimeout": {
                    "type": "integer"
                  },
                  "agentTransfer": {
                    "type": "boolean"
                  },
                  "agentTransferTimeout": {
                    "type": "integer"
                  },
                  "baseUrl": {
                    "type": "string"
                  },
                  "mandatoryDispositionPauseId": {
                    "type": "integer"
                  },
                  "mandatoryDisposition": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "name",
                  "key",
                  "remote"
                ]
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Removes dispositions from account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeDispositions",
        "tags": [
          "Sms Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsAccount"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/sms/accounts/{id}/canned_answers": {
      "get": {
        "summary": "Gets account canned answers",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getAnswers",
        "tags": [
          "Sms Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsAccount"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates new canned answer",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addAnswer",
        "tags": [
          "Sms Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsAccount"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new smsAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "key": {
                    "type": "string"
                  },
                  "remote": {
                    "type": "string"
                  },
                  "token": {
                    "type": "string"
                  },
                  "phone": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "twilio",
                      "skebby",
                      "connectel",
                      "clicksend",
                      "plivo",
                      "clickatell",
                      "csc",
                      "infobip",
                      "intelepeer"
                    ],
                    "default": "twilio"
                  },
                  "accountSid": {
                    "type": "string"
                  },
                  "authId": {
                    "type": "string"
                  },
                  "authToken": {
                    "type": "string"
                  },
                  "smsMethod": {
                    "type": "string",
                    "enum": [
                      "SI",
                      "TI",
                      "GP"
                    ],
                    "default": "SI"
                  },
                  "username": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "apiKey": {
                    "type": "string"
                  },
                  "senderString": {
                    "type": "string"
                  },
                  "deliveryReport": {
                    "type": "boolean"
                  },
                  "description": {
                    "type": "string"
                  },
                  "notificationTemplate": {
                    "type": "string"
                  },
                  "notificationSound": {
                    "type": "boolean"
                  },
                  "notificationShake": {
                    "type": "boolean"
                  },
                  "waitForTheAssignedAgent": {
                    "type": "integer"
                  },
                  "waitForTheAssignedQueue": {
                    "type": "integer"
                  },
                  "queueTransfer": {
                    "type": "boolean"
                  },
                  "queueTransferTimeout": {
                    "type": "integer"
                  },
                  "agentTransfer": {
                    "type": "boolean"
                  },
                  "agentTransferTimeout": {
                    "type": "integer"
                  },
                  "baseUrl": {
                    "type": "string"
                  },
                  "mandatoryDispositionPauseId": {
                    "type": "integer"
                  },
                  "mandatoryDisposition": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "name",
                  "key",
                  "remote"
                ]
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Removes canned answers from account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeAnswers",
        "tags": [
          "Sms Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsAccount"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/sms/accounts/{id}/applications": {
      "get": {
        "summary": "Gets account applications",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getApplications",
        "tags": [
          "Sms Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsAccount"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates new applications",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addApplications",
        "tags": [
          "Sms Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsAccount"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new smsAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "key": {
                    "type": "string"
                  },
                  "remote": {
                    "type": "string"
                  },
                  "token": {
                    "type": "string"
                  },
                  "phone": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "twilio",
                      "skebby",
                      "connectel",
                      "clicksend",
                      "plivo",
                      "clickatell",
                      "csc",
                      "infobip",
                      "intelepeer"
                    ],
                    "default": "twilio"
                  },
                  "accountSid": {
                    "type": "string"
                  },
                  "authId": {
                    "type": "string"
                  },
                  "authToken": {
                    "type": "string"
                  },
                  "smsMethod": {
                    "type": "string",
                    "enum": [
                      "SI",
                      "TI",
                      "GP"
                    ],
                    "default": "SI"
                  },
                  "username": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "apiKey": {
                    "type": "string"
                  },
                  "senderString": {
                    "type": "string"
                  },
                  "deliveryReport": {
                    "type": "boolean"
                  },
                  "description": {
                    "type": "string"
                  },
                  "notificationTemplate": {
                    "type": "string"
                  },
                  "notificationSound": {
                    "type": "boolean"
                  },
                  "notificationShake": {
                    "type": "boolean"
                  },
                  "waitForTheAssignedAgent": {
                    "type": "integer"
                  },
                  "waitForTheAssignedQueue": {
                    "type": "integer"
                  },
                  "queueTransfer": {
                    "type": "boolean"
                  },
                  "queueTransferTimeout": {
                    "type": "integer"
                  },
                  "agentTransfer": {
                    "type": "boolean"
                  },
                  "agentTransferTimeout": {
                    "type": "integer"
                  },
                  "baseUrl": {
                    "type": "string"
                  },
                  "mandatoryDispositionPauseId": {
                    "type": "integer"
                  },
                  "mandatoryDisposition": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "name",
                  "key",
                  "remote"
                ]
              }
            }
          }
        }
      }
    },
    "/sms/accounts/{id}/interactions": {
      "get": {
        "summary": "Gets Sms Account interactions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getInteractions",
        "tags": [
          "Sms Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsAccount"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/sms/accounts/{id}/status": {
      "get": {
        "summary": "Receive message status as get request",
        "operationId": "statusGet",
        "tags": [
          "Sms Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsAccount"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Receive message status",
        "operationId": "status",
        "tags": [
          "Sms Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsAccount"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new smsAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/sms/accounts/{id}/users": {
      "get": {
        "summary": "Gets agents from sms account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getAgents",
        "tags": [
          "Sms Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsAccount"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add agents to a sms account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addAgents",
        "tags": [
          "Sms Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsAccount"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new smsAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Removes agents from a sms account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeAgents",
        "tags": [
          "Sms Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsAccount"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/sms/accounts/{id}/notify": {
      "post": {
        "summary": "Notify new message",
        "operationId": "notify",
        "tags": [
          "Sms Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsAccount"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new smsAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/sms/accounts/{id}/send": {
      "post": {
        "summary": "Send new sms message",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "send",
        "tags": [
          "Sms Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsAccount"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new smsAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/sms/applications": {
      "get": {
        "summary": "Gets a list of Applications",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllSmsApplication",
        "tags": [
          "Sms Applications"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Applications",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SmsApplication"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Applications",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SmsApplication"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Application",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createSmsApplication",
        "tags": [
          "Sms Applications"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new smsApplication",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "priority": {
                    "type": "integer"
                  },
                  "app": {
                    "type": "string"
                  },
                  "appdata": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "interval": {
                    "type": "string"
                  }
                },
                "required": [
                  "priority",
                  "app"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "SmsApplication successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmsApplication"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/sms/applications/{id}": {
      "get": {
        "summary": "Gets a single Application",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getSmsApplicationById",
        "tags": [
          "Sms Applications"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsApplication to get"
          }
        ],
        "responses": {
          "200": {
            "description": "SmsApplication with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmsApplication"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Application",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateSmsApplicationById",
        "tags": [
          "Sms Applications"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new smsApplication",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsApplication to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Application",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteSmsApplicationById",
        "tags": [
          "Sms Applications"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsApplication to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/sms/interactions": {
      "get": {
        "summary": "Gets a list of Interactions",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllSmsInteraction",
        "tags": [
          "Sms Interactions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Interactions",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SmsInteraction"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Interactions",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SmsInteraction"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Interaction",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createSmsInteraction",
        "tags": [
          "Sms Interactions"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new smsInteraction",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "closed": {
                    "type": "boolean"
                  },
                  "closedAt": {
                    "type": "string"
                  },
                  "disposition": {
                    "type": "string"
                  },
                  "secondDisposition": {
                    "type": "string"
                  },
                  "thirdDisposition": {
                    "type": "string"
                  },
                  "note": {
                    "type": "string"
                  },
                  "phone": {
                    "type": "string"
                  },
                  "read1stAt": {
                    "type": "string"
                  },
                  "firstMsgDirection": {
                    "type": "string",
                    "enum": [
                      "in",
                      "out"
                    ],
                    "default": "in"
                  },
                  "lastMsgAt": {
                    "type": "string"
                  },
                  "lastMsgDirection": {
                    "type": "string",
                    "enum": [
                      "in",
                      "out"
                    ],
                    "default": "in"
                  },
                  "autoreplyExecuted": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "firstMsgDirection",
                  "lastMsgDirection"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "SmsInteraction successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmsInteraction"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/sms/interactions/describe": {
      "get": {
        "summary": "Gets table info about Interactions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeSmsInteraction",
        "tags": [
          "Sms Interactions"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/sms/interactions/counters": {
      "get": {
        "summary": "Gets counters info about Interactions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "tags": [
          "Sms Interactions"
        ],
        "operationId": "countSmsInteraction",
        "parameters": [
          {
            "in": "query",
            "name": "SmsAccountId",
            "schema": {
              "type": "integer"
            },
            "description": "Filter by SmsAccountId"
          },
          {
            "in": "query",
            "name": "createdAt.gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "This stands for 'greater or equal'. It select all the records created after the date specified.",
            "example": "2022-01-01-T00:00:00Z"
          },
          {
            "in": "query",
            "name": "createdAt.lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "This stands for 'less or equal'. It select all the records created before the date specified.",
            "example": "2022-01-01-T00:00:00Z"
          }
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the counters grouped by SmsAccountId",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "results count"
                    },
                    "rows": {
                      "description": "SmsInteractions counters grouped by SmsAccountId",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Counter"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/sms/interactions/{id}": {
      "get": {
        "summary": "Gets a single Interaction",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getSmsInteractionById",
        "tags": [
          "Sms Interactions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsInteraction to get"
          }
        ],
        "responses": {
          "200": {
            "description": "SmsInteraction with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmsInteraction"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Interaction",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateSmsInteractionById",
        "tags": [
          "Sms Interactions"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new smsInteraction",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsInteraction to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Interaction",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteSmsInteractionById",
        "tags": [
          "Sms Interactions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsInteraction to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/sms/interactions/{id}/messages": {
      "get": {
        "summary": "Gets interaction messages",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getMessages",
        "tags": [
          "Sms Interactions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsInteraction"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates new messages",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addMessage",
        "tags": [
          "Sms Interactions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsInteraction"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new smsInteraction",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "closed": {
                    "type": "boolean"
                  },
                  "closedAt": {
                    "type": "string"
                  },
                  "disposition": {
                    "type": "string"
                  },
                  "secondDisposition": {
                    "type": "string"
                  },
                  "thirdDisposition": {
                    "type": "string"
                  },
                  "note": {
                    "type": "string"
                  },
                  "phone": {
                    "type": "string"
                  },
                  "read1stAt": {
                    "type": "string"
                  },
                  "firstMsgDirection": {
                    "type": "string",
                    "enum": [
                      "in",
                      "out"
                    ],
                    "default": "in"
                  },
                  "lastMsgAt": {
                    "type": "string"
                  },
                  "lastMsgDirection": {
                    "type": "string",
                    "enum": [
                      "in",
                      "out"
                    ],
                    "default": "in"
                  }
                },
                "required": [
                  "firstMsgDirection",
                  "lastMsgDirection"
                ]
              }
            }
          }
        }
      }
    },
    "/sms/interactions/{id}/download": {
      "get": {
        "summary": "Gets interaction",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "download",
        "tags": [
          "Sms Interactions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsInteraction"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/sms/interactions/{id}/tags": {
      "post": {
        "summary": "Add tags to the interaction",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addTags",
        "tags": [
          "Sms Interactions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsInteraction"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new smsInteraction",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Removes tags from interaction",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeTags",
        "tags": [
          "Sms Interactions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsInteraction"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/sms/messages": {
      "get": {
        "summary": "Gets a list of Messages",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllSmsMessage",
        "tags": [
          "Sms Messages"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Messages",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SmsMessage"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Messages",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SmsMessage"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Message",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createSmsMessage",
        "tags": [
          "Sms Messages"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new smsMessage",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "string"
                  },
                  "read": {
                    "type": "boolean"
                  },
                  "direction": {
                    "type": "string",
                    "enum": [
                      "in",
                      "out"
                    ],
                    "default": "in"
                  },
                  "messageId": {
                    "type": "string"
                  },
                  "phone": {
                    "type": "string"
                  },
                  "readAt": {
                    "type": "string"
                  },
                  "secret": {
                    "type": "boolean"
                  },
                  "providerName": {
                    "type": "string"
                  },
                  "providerResponse": {
                    "type": "string"
                  }
                },
                "required": [
                  "body",
                  "direction"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "SmsMessage successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmsMessage"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/sms/messages/describe": {
      "get": {
        "summary": "Gets table info about Messages",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeSmsMessage",
        "tags": [
          "Sms Messages"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/sms/messages/{id}": {
      "get": {
        "summary": "Gets a single Message",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getSmsMessageById",
        "tags": [
          "Sms Messages"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsMessage to get"
          }
        ],
        "responses": {
          "200": {
            "description": "SmsMessage with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmsMessage"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Message",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateSmsMessageById",
        "tags": [
          "Sms Messages"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new smsMessage",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsMessage to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Message",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteSmsMessageById",
        "tags": [
          "Sms Messages"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsMessage to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/sms/messages/{id}/status": {
      "post": {
        "summary": "Receive message status",
        "operationId": "status",
        "tags": [
          "Sms Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsMessage"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new smsMessage",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/sms/messages/{id}/accept": {
      "put": {
        "summary": "Accepts message",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "accept",
        "tags": [
          "Sms Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsMessage"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new smsMessage",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/sms/messages/{id}/reject": {
      "put": {
        "summary": "Rejects message",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "reject",
        "tags": [
          "Sms Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsMessage"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new smsMessage",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/sms/queues": {
      "get": {
        "summary": "Gets a list of Queues",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllSmsQueue",
        "tags": [
          "Sms Queues"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Queues",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SmsQueue"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Queues",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SmsQueue"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createSmsQueue",
        "tags": [
          "Sms Queues"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new smsQueue",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "timeout": {
                    "type": "integer"
                  },
                  "strategy": {
                    "type": "string",
                    "enum": [
                      "rrmemory",
                      "beepall",
                      "roundrobin"
                    ],
                    "default": "rrmemory"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "SmsQueue successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmsQueue"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/sms/queues/describe": {
      "get": {
        "summary": "Gets table info about Queues",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeSmsQueue",
        "tags": [
          "Sms Queues"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/sms/queues/{id}": {
      "get": {
        "summary": "Gets a single Queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getSmsQueueById",
        "tags": [
          "Sms Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsQueue to get"
          }
        ],
        "responses": {
          "200": {
            "description": "SmsQueue with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmsQueue"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateSmsQueueById",
        "tags": [
          "Sms Queues"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new smsQueue",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsQueue to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteSmsQueueById",
        "tags": [
          "Sms Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsQueue to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/sms/queues/{id}/members": {
      "get": {
        "summary": "GetMembers",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getMembers",
        "tags": [
          "Sms Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsQueue"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/sms/queues/{id}/teams": {
      "get": {
        "summary": "Gets queues list",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getTeams",
        "tags": [
          "Sms Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsQueue"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add teams to a queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addTeams",
        "tags": [
          "Sms Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsQueue"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new smsQueue",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Remove teams from a queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeTeams",
        "tags": [
          "Teams"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsQueue"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/sms/queues/{id}/users": {
      "get": {
        "summary": "Gets queue agents",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getAgents",
        "tags": [
          "Sms Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsQueue"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add agents to a queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addAgents",
        "tags": [
          "Sms Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsQueue"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new smsQueue",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Removes agents from a queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeAgents",
        "tags": [
          "Sms Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsQueue"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/sms/queues/{id}/profiles": {
      "get": {
        "summary": "Gets queue profiles",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getProfiles",
        "tags": [
          "Sms Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsQueue"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add profiles to a queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addProfiles",
        "tags": [
          "Sms Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsQueue"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new smsQueue",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Removes profiles from a queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeProfiles",
        "tags": [
          "Sms Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsQueue"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/sms/reports/queue": {
      "get": {
        "summary": "Gets a list of Sms Queue Reports",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllSmsQueueReport",
        "tags": [
          "Sms Queue Reports"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Sms Queue Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SmsQueueReport"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Sms Queue Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SmsQueueReport"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Sms Queue Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createSmsQueueReport",
        "tags": [
          "Sms Queue Reports"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new smsQueueReport",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "uniqueid": {
                    "type": "string"
                  },
                  "from": {
                    "type": "string"
                  },
                  "joinAt": {
                    "type": "string"
                  },
                  "leaveAt": {
                    "type": "string"
                  },
                  "acceptAt": {
                    "type": "string"
                  },
                  "exitAt": {
                    "type": "string"
                  },
                  "reason": {
                    "type": "string"
                  }
                },
                "required": [
                  "uniqueid"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "SmsQueueReport successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmsQueueReport"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/sms/reports/queue/describe": {
      "get": {
        "summary": "Gets table info about Sms Queue Reports",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeSmsQueueReport",
        "tags": [
          "Sms Queue Reports"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/sms/reports/queue/{id}": {
      "get": {
        "summary": "Gets a single Sms Queue Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getSmsQueueReportById",
        "tags": [
          "Sms Queue Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsQueueReport to get"
          }
        ],
        "responses": {
          "200": {
            "description": "SmsQueueReport with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmsQueueReport"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Sms Queue Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateSmsQueueReportById",
        "tags": [
          "Sms Queue Reports"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new smsQueueReport",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsQueueReport to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Sms Queue Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteSmsQueueReportById",
        "tags": [
          "Sms Queue Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsQueueReport to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/sms/reports/transfer": {
      "get": {
        "summary": "Gets a list of Sms Transfer Reports",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllSmsTransferReport",
        "tags": [
          "Sms Transfer Reports"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Sms Transfer Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SmsTransferReport"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Sms Transfer Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SmsTransferReport"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Sms Transfer Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createSmsTransferReport",
        "tags": [
          "Sms Transfer Reports"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new smsTransferReport",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "uniqueid": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "account",
                      "agent",
                      "queue"
                    ],
                    "default": "account"
                  },
                  "transferredAt": {
                    "type": "string"
                  }
                },
                "required": [
                  "uniqueid",
                  "type",
                  "transferredAt"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "SmsTransferReport successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmsTransferReport"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/sms/reports/transfer/describe": {
      "get": {
        "summary": "Gets table info about Sms Transfer Reports",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeSmsTransferReport",
        "tags": [
          "Sms Transfer Reports"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/sms/reports/transfer/{id}": {
      "get": {
        "summary": "Gets a single Sms Transfer Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getSmsTransferReportById",
        "tags": [
          "Sms Transfer Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsTransferReport to get"
          }
        ],
        "responses": {
          "200": {
            "description": "SmsTransferReport with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmsTransferReport"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Sms Transfer Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateSmsTransferReportById",
        "tags": [
          "Sms Transfer Reports"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new smsTransferReport",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsTransferReport to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Sms Transfer Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteSmsTransferReportById",
        "tags": [
          "Sms Transfer Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SmsTransferReport to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/sounds": {
      "get": {
        "summary": "Gets a list of Sounds",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllSound",
        "tags": [
          "Sounds"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Sounds",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Sound"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Sounds",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Sound"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Create a new sound",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "postcreate",
        "tags": [
          "Sounds"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new sound",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "success."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/sounds/{id}": {
      "get": {
        "summary": "Gets a single Sound",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getSoundById",
        "tags": [
          "Sounds"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Sound to get"
          }
        ],
        "responses": {
          "200": {
            "description": "Sound with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sound"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing new sound",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "update",
        "tags": [
          "Sounds"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Sound"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new sound",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Deletes a sound",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "delete",
        "tags": [
          "Sounds"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Sound"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/sounds/{id}/download": {
      "get": {
        "summary": "Download Sound",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "download",
        "tags": [
          "Sounds"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Sound"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/square/messages": {
      "get": {
        "summary": "Gets a list of Messages",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllSquareMessage",
        "tags": [
          "Square Messages"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Messages",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SquareMessage"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Messages",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SquareMessage"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Message",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createSquareMessage",
        "tags": [
          "Square Messages"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new squareMessage",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "uniqueid": {
                    "type": "string"
                  },
                  "body": {
                    "type": "string"
                  },
                  "direction": {
                    "type": "string",
                    "enum": [
                      "in",
                      "out"
                    ],
                    "default": "in"
                  },
                  "providerName": {
                    "type": "string"
                  },
                  "providerResponse": {
                    "type": "string"
                  }
                },
                "required": [
                  "body",
                  "direction"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "SquareMessage successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SquareMessage"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/square/messages/{id}": {
      "get": {
        "summary": "Gets a single Message",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getSquareMessageById",
        "tags": [
          "Square Messages"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SquareMessage to get"
          }
        ],
        "responses": {
          "200": {
            "description": "SquareMessage with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SquareMessage"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Message",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateSquareMessageById",
        "tags": [
          "Square Messages"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new squareMessage",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SquareMessage to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Message",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteSquareMessageById",
        "tags": [
          "Square Messages"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SquareMessage to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/square/odbc": {
      "get": {
        "summary": "Gets a list of ODBCs",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllSquareOdbc",
        "tags": [
          "Square ODBC"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of ODBCs",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SquareOdbc"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of ODBCs",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SquareOdbc"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new ODBC",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createSquareOdbc",
        "tags": [
          "Square ODBC"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new squareOdbc",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "dsn": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "SquareOdbc successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SquareOdbc"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/square/odbc/{id}": {
      "get": {
        "summary": "Gets a single ODBC",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getSquareOdbcById",
        "tags": [
          "Square ODBC"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SquareOdbc to get"
          }
        ],
        "responses": {
          "200": {
            "description": "SquareOdbc with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SquareOdbc"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing ODBC",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateSquareOdbcById",
        "tags": [
          "Square ODBC"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new squareOdbc",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SquareOdbc to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing ODBC",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteSquareOdbcById",
        "tags": [
          "Square ODBC"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SquareOdbc to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/square/odbc/{id}/test": {
      "get": {
        "summary": "Test Odbc",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "test",
        "tags": [
          "Square ODBC"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SquareOdbc"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/square/projects": {
      "get": {
        "summary": "Gets a list of Projects",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllSquareProject",
        "tags": [
          "Square Projects"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Projects",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SquareProject"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Projects",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SquareProject"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Project",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createSquareProject",
        "tags": [
          "Square Projects"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new squareProject",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "notes": {
                    "type": "string"
                  },
                  "preproduction": {
                    "type": "string",
                    "format": "binary"
                  },
                  "production": {
                    "type": "string",
                    "format": "binary"
                  },
                  "savedAt": {
                    "type": "string"
                  },
                  "publishedAt": {
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "SquareProject successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SquareProject"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/square/projects/{id}": {
      "get": {
        "summary": "Gets a single Project",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getSquareProjectById",
        "tags": [
          "Square Projects"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SquareProject to get"
          }
        ],
        "responses": {
          "200": {
            "description": "SquareProject with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SquareProject"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Project",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateSquareProjectById",
        "tags": [
          "Square Projects"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new squareProject",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SquareProject to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Project",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteSquareProjectById",
        "tags": [
          "Square Projects"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SquareProject to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/square/recordings": {
      "get": {
        "summary": "Gets a list of Recordings",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllSquareRecording",
        "tags": [
          "Square Recordings"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Recordings",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SquareRecording"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Recordings",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SquareRecording"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Recording",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createSquareRecording",
        "tags": [
          "Square Recordings"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new squareRecording",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "uniqueid": {
                    "type": "string"
                  },
                  "callerid": {
                    "type": "string"
                  },
                  "calleridname": {
                    "type": "string"
                  },
                  "context": {
                    "type": "string"
                  },
                  "extension": {
                    "type": "string"
                  },
                  "priority": {
                    "type": "string"
                  },
                  "accountcode": {
                    "type": "string"
                  },
                  "dnid": {
                    "type": "string"
                  },
                  "projectName": {
                    "type": "string"
                  },
                  "saveName": {
                    "type": "string"
                  },
                  "filename": {
                    "type": "string"
                  },
                  "savePath": {
                    "type": "string"
                  },
                  "format": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "SquareRecording successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SquareRecording"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/square/recordings/{id}": {
      "get": {
        "summary": "Gets a single Recording",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getSquareRecordingById",
        "tags": [
          "Square Recordings"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SquareRecording to get"
          }
        ],
        "responses": {
          "200": {
            "description": "SquareRecording with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SquareRecording"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Recording",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateSquareRecordingById",
        "tags": [
          "Square Recordings"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new squareRecording",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SquareRecording to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Delete recording",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "destroy",
        "tags": [
          "Square Recordings"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SquareRecording"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/square/recordings/{id}/download": {
      "get": {
        "summary": "Download Recording",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "download",
        "tags": [
          "Square Recordings"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SquareRecording"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/square/reports": {
      "get": {
        "summary": "Gets a list of Square Reports",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllSquareReport",
        "tags": [
          "Square Reports"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Square Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SquareReport"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Square Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SquareReport"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Square Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createSquareReport",
        "tags": [
          "Square Reports"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new squareReport",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "network": {
                    "type": "string"
                  },
                  "network_script": {
                    "type": "string"
                  },
                  "request": {
                    "type": "string"
                  },
                  "channel": {
                    "type": "string"
                  },
                  "language": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "uniqueid": {
                    "type": "string"
                  },
                  "version": {
                    "type": "string"
                  },
                  "callerid": {
                    "type": "string"
                  },
                  "calleridname": {
                    "type": "string"
                  },
                  "callingpres": {
                    "type": "string"
                  },
                  "callingani2": {
                    "type": "string"
                  },
                  "callington": {
                    "type": "string"
                  },
                  "callingtns": {
                    "type": "string"
                  },
                  "dnid": {
                    "type": "string"
                  },
                  "rdnis": {
                    "type": "string"
                  },
                  "context": {
                    "type": "string"
                  },
                  "extension": {
                    "type": "string"
                  },
                  "priority": {
                    "type": "string"
                  },
                  "enhanced": {
                    "type": "string"
                  },
                  "accountcode": {
                    "type": "string"
                  },
                  "threadid": {
                    "type": "string"
                  },
                  "project_name": {
                    "type": "string"
                  },
                  "joinAt": {
                    "type": "string"
                  },
                  "leaveAt": {
                    "type": "string"
                  },
                  "bot": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "SquareReport successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SquareReport"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/square/reports/describe": {
      "get": {
        "summary": "Gets table info about Square Reports",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeSquareReport",
        "tags": [
          "Square Reports"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/square/reports/{id}": {
      "get": {
        "summary": "Gets a single Square Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getSquareReportById",
        "tags": [
          "Square Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SquareReport to get"
          }
        ],
        "responses": {
          "200": {
            "description": "SquareReport with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SquareReport"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Square Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateSquareReportById",
        "tags": [
          "Square Reports"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new squareReport",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SquareReport to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Square Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteSquareReportById",
        "tags": [
          "Square Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SquareReport to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/square/details/reports": {
      "get": {
        "summary": "Gets a list of Square Detail Reports",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllSquareDetailsReport",
        "tags": [
          "Square Details Reports"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Square Detail Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SquareDetailsReport"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Square Detail Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SquareDetailsReport"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Square Detail Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createSquareDetailsReport",
        "tags": [
          "Square Details Reports"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new squareReportDetail",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "uniqueid": {
                    "type": "string"
                  },
                  "node": {
                    "type": "string"
                  },
                  "application": {
                    "type": "string"
                  },
                  "data": {
                    "type": "string"
                  },
                  "project_name": {
                    "type": "string"
                  },
                  "callerid": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "SquareDetailsReport successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SquareDetailsReport"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/square/details/reports/describe": {
      "get": {
        "summary": "Gets table info about Square Detail Reports",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeSquareDetailsReport",
        "tags": [
          "Square Details Reports"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/square/details/reports/{id}": {
      "get": {
        "summary": "Gets a single Square Detail Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getSquareDetailsReportById",
        "tags": [
          "Square Details Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SquareDetailsReport to get"
          }
        ],
        "responses": {
          "200": {
            "description": "SquareDetailsReport with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SquareDetailsReport"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Square Detail Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateSquareDetailsReportById",
        "tags": [
          "Square Details Reports"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new squareReportDetail",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SquareDetailsReport to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Square Detail Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteSquareDetailsReportById",
        "tags": [
          "Square Details Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the SquareDetailsReport to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/system": {
      "get": {
        "summary": "Gets system information",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getSystemInformation",
        "tags": [
          "System Information"
        ],
        "responses": {
          "200": {
            "description": "system information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/system/process": {
      "get": {
        "summary": "Gets process information",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getSystemProcessInformation",
        "tags": [
          "System Information"
        ],
        "responses": {
          "200": {
            "description": "process information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/tags": {
      "get": {
        "summary": "Gets a list of Tags",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllTag",
        "tags": [
          "Tags"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Tags",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Tags",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Tag",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createTag",
        "tags": [
          "Tags"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new tag",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "color": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Tag successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/tags/{id}": {
      "get": {
        "summary": "Gets a single Tag",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getTagById",
        "tags": [
          "Tags"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Tag to get"
          }
        ],
        "responses": {
          "200": {
            "description": "Tag with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Tag",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateTagById",
        "tags": [
          "Tags"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new tag",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Tag to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Tag",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteTagById",
        "tags": [
          "Tags"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Tag to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/tags/describe": {
      "get": {
        "summary": "Gets table info about Tags",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeTags",
        "tags": [
          "Tags"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/teams": {
      "get": {
        "summary": "Gets a list of Teams",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllTeam",
        "tags": [
          "Teams"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Teams",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Team"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Teams",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Team"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Team",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createTeam",
        "tags": [
          "Teams"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new team",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Team successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/teams/{id}": {
      "get": {
        "summary": "Gets a single Team",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getTeamById",
        "tags": [
          "Teams"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Team to get"
          }
        ],
        "responses": {
          "200": {
            "description": "Team with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Team",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateTeamById",
        "tags": [
          "Teams"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new team",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Team to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Team",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteTeamById",
        "tags": [
          "Teams"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Team to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/teams/{id}/queues": {
      "get": {
        "summary": "Gets Queues list",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getQueues",
        "tags": [
          "Teams"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Team"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add queues to a team",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addQueues",
        "tags": [
          "Teams"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Team"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new team",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Remove queues to a team",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeQueues",
        "tags": [
          "Teams"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Team"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/teams/{id}/users": {
      "get": {
        "summary": "Gets agents from team",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getAgents",
        "tags": [
          "Teams"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Team"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Adds agents to a team",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addAgents",
        "tags": [
          "Teams"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Team"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new team",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Removes agents from a team",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeAgents",
        "tags": [
          "Teams"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Team"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/templates": {
      "get": {
        "summary": "Gets a list of Templates",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllTemplate",
        "tags": [
          "Templates"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Templates",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Template"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Templates",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Template"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Template",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createTemplate",
        "tags": [
          "Templates"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new template",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "html": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Template successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Template"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/templates/{id}": {
      "get": {
        "summary": "Gets a single Template",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getTemplateById",
        "tags": [
          "Templates"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Template to get"
          }
        ],
        "responses": {
          "200": {
            "description": "Template with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Template"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Template",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateTemplateById",
        "tags": [
          "Templates"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new template",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Template to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Template",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteTemplateById",
        "tags": [
          "Templates"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Template to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/time-format": {
      "get": {
        "summary": "Gets a list of time formats",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllTimeFormats",
        "tags": [
          "TimeFormats"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of time formats",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimeFormat"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of TimeFormats",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimeFormat"
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/time-formats/{id}": {
      "get": {
        "summary": "Gets a single time format",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getTimeFormatById",
        "tags": [
          "TimeFormats"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the time format to get"
          }
        ],
        "responses": {
          "200": {
            "description": "Time format with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeFormat"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/timing": {
      "get": {
        "summary": "Gets a list of all timings",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllTimings",
        "tags": [
          "List Timings"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Timings",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Timing"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Timings",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Timing"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Timing",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createTiming",
        "tags": [
          "Timing Create"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new Timing",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "enabled": {
                    "type": "boolean"
                  },
                  "active": {
                    "type": "boolean,"
                  },
                  "UserId": {
                    "type": "integer"
                  },
                  "startAt": {
                    "type": "Date"
                  },
                  "endAt": {
                    "type": "Date"
                  },
                  "intervalStart": {
                    "type": "string",
                    "description": "A string formatted as \"XX:YY\", representing the time when the current timing will start being effective"
                  },
                  "intervalEnd": {
                    "type": "string",
                    "description": "A string formatted as \"XX:YY\", representing the time when the current timing will stop being effective"
                  },
                  "sunday": {
                    "type": "boolean"
                  },
                  "monday": {
                    "type": "boolean"
                  },
                  "tuesday": {
                    "type": "boolean"
                  },
                  "wednesday": {
                    "type": "boolean"
                  },
                  "thursday": {
                    "type": "boolean"
                  },
                  "friday": {
                    "type": "boolean"
                  },
                  "saturday": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "name",
                  "description",
                  "UserId",
                  "startAt",
                  "endAt",
                  "intervalStart",
                  "intervalEnd",
                  "sunday",
                  "monday",
                  "tuesday",
                  "wednesday",
                  "thursday",
                  "friday",
                  "saturday"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Timing successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Timing"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/timing/{timingId}": {
      "get": {
        "summary": "Gets a single Timing",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getTimingById",
        "tags": [
          "Timing Detail"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Timing to get"
          }
        ],
        "responses": {
          "200": {
            "description": "Timing with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Timing"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Timing",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateTimingById",
        "tags": [
          "Timings"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new Timing",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "enabled": {
                    "type": "boolean"
                  },
                  "active": {
                    "type": "boolean,"
                  },
                  "UserId": {
                    "type": "integer"
                  },
                  "startAt": {
                    "type": "Date"
                  },
                  "endAt": {
                    "type": "Date"
                  },
                  "intervalStart": {
                    "type": "string",
                    "description": "A string formatted as \"XX:YY\", representing the time when the current timing will start being effective"
                  },
                  "intervalEnd": {
                    "type": "string",
                    "description": "A string formatted as \"XX:YY\", representing the time when the current timing will stop being effective"
                  },
                  "sunday": {
                    "type": "boolean"
                  },
                  "monday": {
                    "type": "boolean"
                  },
                  "tuesday": {
                    "type": "boolean"
                  },
                  "wednesday": {
                    "type": "boolean"
                  },
                  "thursday": {
                    "type": "boolean"
                  },
                  "friday": {
                    "type": "boolean"
                  },
                  "saturday": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Timing to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Delete an existing Timing",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteTimingById",
        "tags": [
          "Timings"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Timing to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/timing/{timingId}/queues": {
      "get": {
        "summary": "Gets a single timing, and include data regarding all of its related queues from all channels",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getTimingWithQueuesById",
        "tags": [
          "Timing Detail Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Timing to get"
          }
        ],
        "responses": {
          "200": {
            "description": "Timing with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Timing"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/timing/{timingId}/queues/rewrite": {
      "post": null,
      "summary": "Creates a new Timing",
      "security": [
        {
          "bearerAuth": []
        },
        {
          "basicAuth": []
        },
        {
          "motionApiKey": []
        },
        {
          "googleId": []
        }
      ],
      "operationId": "createTiming",
      "tags": [
        "Timing Create"
      ],
      "requestBody": {
        "required": true,
        "description": "data for creating new Timing",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "queueType": {
                    "type": "string",
                    "enum": [
                      "chat",
                      "fax",
                      "mail",
                      "openchannel",
                      "sms",
                      "voice",
                      "whatsapp"
                    ]
                  },
                  "pivotTableId": {
                    "type": "number"
                  },
                  "enabled": {
                    "type": "boolean",
                    "description": "Used only if queueType is \"voice\""
                  },
                  "penalty": {
                    "type": "number"
                  },
                  "standby": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "Timing relationships successfully rewritten.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Timing"
              }
            }
          }
        },
        "401": {
          "$ref": "#/components/responses/Unauthorized"
        },
        "403": {
          "$ref": "#/components/responses/Forbidden"
        },
        "500": {
          "$ref": "#/components/responses/InternalServerError"
        }
      }
    },
    "/timing/profiles/{profileId}": {
      "get": {
        "summary": "Gets a list of all timings associated with the given profile id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllTimingsOfAProfile",
        "tags": [
          "List Timings Profile"
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Timings associated with the given profile",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Timing"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/timing/removemany": {
      "post": {
        "summary": "Deletes many Timings at once",
        "description": "Deletes many Timings at once",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteManyTimings",
        "tags": [
          "Delete Many Timings"
        ],
        "requestBody": {
          "required": true,
          "description": "data for deleting many Timings",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ids": {
                    "type": "array",
                    "description": "The ids of the Timings to be deleted",
                    "items": {
                      "type": "integer"
                    }
                  }
                },
                "required": [
                  "ids"
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/job/voicerecording": {
      "get": {
        "summary": "Get a list of transcription jobs",
        "description": "Get a list of transcription jobs",
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Transcription Jobs",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TranscriptionJob"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Transcription job not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/job/voicerecording/:id": {
      "get": {
        "summary": "Get transcription job status",
        "description": "Get transcription job status",
        "responses": {
          "200": {
            "description": "Transcription job status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TranscriptionJob"
                }
              }
            }
          },
          "404": {
            "description": "Transcription job not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/job/voicerecording/start/transcribe": {
      "post": {
        "summary": "Start transcription job",
        "description": "Start transcription job",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "voiceRecordingIds": {
                    "type": "string[]",
                    "description": "List of voice recording IDs"
                  },
                  "languageCode": {
                    "type": "string",
                    "description": "Language of voice recording"
                  },
                  "accountId": {
                    "type": "string",
                    "description": "Provider account ID"
                  },
                  "region": {
                    "type": "string",
                    "description": "Provider account ID",
                    "required": false
                  }
                }
              },
              "required": true
            }
          }
        },
        "responses": {
          "201": {
            "description": "Transcription job started",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TranscriptionJob"
                }
              }
            }
          },
          "400": {
            "description": "Generic error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/job/voicerecording/start/sentiment_analysis": {
      "post": {
        "summary": "Start sentiment analysis job",
        "description": "Start sentiment analysis job",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "voiceRecordingIds": {
                    "type": "string[]",
                    "description": "List of voice recording IDs"
                  },
                  "languageCode": {
                    "type": "string",
                    "description": "Language of voice recording"
                  },
                  "accountId": {
                    "type": "string",
                    "description": "Provider account ID"
                  },
                  "region": {
                    "type": "string",
                    "description": "Provider account ID",
                    "required": false
                  }
                }
              },
              "required": true
            }
          }
        },
        "responses": {
          "201": {
            "description": "Sentiment analysis job started",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TranscriptionJob"
                }
              }
            }
          },
          "400": {
            "description": "Generic error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/job/voicerecording/start/transcribe-and-sentiment": {
      "put": {
        "summary": "Start transcription and sentiment analysis job",
        "description": "Start transcription and sentiment analysis job",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "voiceRecordingId": {
                    "type": "string",
                    "description": "ID of voice recording"
                  },
                  "language": {
                    "type": "string",
                    "description": "Language of voice recording"
                  }
                }
              },
              "required": true
            }
          }
        },
        "responses": {
          "201": {
            "description": "Transcription and sentiment analysis job started",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TranscriptionJob"
                }
              }
            }
          },
          "400": {
            "description": "Generic error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transcriptionJob": {
                      "$ref": "#/components/schemas/TranscriptionJob"
                    },
                    "sentimentJob": {
                      "$ref": "#/components/schemas/TranscriptionJob"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/job/voicerecording/start/post_call_analytics": {
      "post": {
        "summary": "Start post call analytics job",
        "description": "Start post call analytics job",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "voiceRecordingIds": {
                    "type": "string[]",
                    "description": "List of voice recording IDs"
                  },
                  "languageCode": {
                    "type": "string",
                    "description": "Language of voice recording"
                  },
                  "accountId": {
                    "type": "string",
                    "description": "Provider account ID"
                  },
                  "region": {
                    "type": "string",
                    "description": "Provider account ID",
                    "required": false
                  }
                }
              },
              "required": true
            }
          }
        },
        "responses": {
          "201": {
            "description": "Post call analytics job started",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TranscriptionJob"
                }
              }
            }
          },
          "400": {
            "description": "Generic error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/triggers": {
      "get": {
        "summary": "Gets a list of Triggers",
        "description": "List paged, sorted, filtered itemscondition",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addAnyCondition",
        "tags": [
          "Triggers"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Trigger"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new trigger",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "channel": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "status": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/triggers/{id}/actions": {
      "get": {
        "summary": "Gets Trigger Actions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getActions",
        "tags": [
          "Triggers"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Trigger"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates new actions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addAction",
        "tags": [
          "Triggers"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Trigger"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new trigger",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "channel": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "status": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/trunks": {
      "get": {
        "summary": "Gets a list of Trunks",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllTrunk",
        "tags": [
          "Trunks"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Trunks",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Trunk"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Trunks",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Trunk"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Create a new trunk",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "create",
        "tags": [
          "Trunks"
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new trunk",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "friend",
                      "user",
                      "peer"
                    ],
                    "default": "friend"
                  },
                  "context": {
                    "type": "string"
                  },
                  "callingpres": {
                    "type": "string",
                    "enum": [
                      "ALLOWED_NOT_SCREENED",
                      "ALLOWED_PASSED_SCREEN",
                      "ALLOWED_FAILED_SCREEN",
                      "ALLOWED",
                      "PROHIB_NOT_SCREENED",
                      "PROHIB_PASSED_SCREEN",
                      "PROHIB_FAILED_SCREEN",
                      "PROHIB"
                    ],
                    "default": "ALLOWED_NOT_SCREENED"
                  },
                  "deny": {
                    "type": "string"
                  },
                  "permit": {
                    "type": "string"
                  },
                  "secret": {
                    "type": "string"
                  },
                  "md5secret": {
                    "type": "string"
                  },
                  "remotesecret": {
                    "type": "string"
                  },
                  "transport": {
                    "type": "string"
                  },
                  "dtmfmode": {
                    "type": "string",
                    "enum": [
                      "rfc2833",
                      "info",
                      "shortinfo",
                      "inband",
                      "auto"
                    ],
                    "default": "rfc2833"
                  },
                  "directmedia": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no",
                      "nonat",
                      "update",
                      "outgoing"
                    ],
                    "default": "yes"
                  },
                  "directrtpsetup": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no"
                    ],
                    "default": "yes"
                  },
                  "directmediapermit": {
                    "type": "string"
                  },
                  "directmediadeny": {
                    "type": "string"
                  },
                  "nat": {
                    "type": "string"
                  },
                  "callgroup": {
                    "type": "string"
                  },
                  "namedcallgroup": {
                    "type": "string"
                  },
                  "pickupgroup": {
                    "type": "string"
                  },
                  "namedpickupgroup": {
                    "type": "string"
                  },
                  "language": {
                    "type": "string"
                  },
                  "tonezone": {
                    "type": "string"
                  },
                  "disallow": {
                    "type": "string"
                  },
                  "allow": {
                    "type": "string"
                  },
                  "autoframing": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no"
                    ],
                    "default": "yes"
                  },
                  "insecure": {
                    "type": "string"
                  },
                  "trustrpid": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no"
                    ],
                    "default": "yes"
                  },
                  "trust_id_outbound": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no"
                    ],
                    "default": "yes"
                  },
                  "progressinband": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no",
                      "never"
                    ],
                    "default": "yes"
                  },
                  "promiscredir": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no"
                    ],
                    "default": "yes"
                  },
                  "useclientcode": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no"
                    ],
                    "default": "yes"
                  },
                  "accountcode": {
                    "type": "integer"
                  },
                  "setvar": {
                    "type": "string"
                  },
                  "callerid": {
                    "type": "string"
                  },
                  "amaflags": {
                    "type": "string"
                  },
                  "callcounter": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no"
                    ],
                    "default": "yes"
                  },
                  "busylevel": {
                    "type": "integer"
                  },
                  "allowoverlap": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no"
                    ],
                    "default": "yes"
                  },
                  "allowsubscribe": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no"
                    ],
                    "default": "yes"
                  },
                  "allowtransfer": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no"
                    ],
                    "default": "yes"
                  },
                  "ignoresdpversion": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no"
                    ],
                    "default": "yes"
                  },
                  "subscribecontext": {
                    "type": "string"
                  },
                  "template": {
                    "type": "string"
                  },
                  "videosupport": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no",
                      "always"
                    ],
                    "default": "yes"
                  },
                  "maxcallbitrate": {
                    "type": "integer"
                  },
                  "rfc2833compensate": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no"
                    ],
                    "default": "yes"
                  },
                  "mailbox": {
                    "type": "string"
                  },
                  "session_timers": {
                    "type": "string",
                    "enum": [
                      "accept",
                      "refuse",
                      "originate"
                    ],
                    "default": "accept"
                  },
                  "session_expires": {
                    "type": "integer"
                  },
                  "session_minse": {
                    "type": "integer"
                  },
                  "session_refresher": {
                    "type": "string",
                    "enum": [
                      "uac",
                      "uas"
                    ],
                    "default": "uac"
                  },
                  "t38pt_usertpsource": {
                    "type": "string"
                  },
                  "regexten": {
                    "type": "string"
                  },
                  "fromdomain": {
                    "type": "string"
                  },
                  "fromuser": {
                    "type": "string"
                  },
                  "port": {
                    "type": "integer"
                  },
                  "qualify": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no"
                    ],
                    "default": "yes"
                  },
                  "keepalive": {
                    "type": "integer"
                  },
                  "defaultip": {
                    "type": "string"
                  },
                  "defaultuser": {
                    "type": "string"
                  },
                  "rtptimeout": {
                    "type": "integer"
                  },
                  "rtpholdtimeout": {
                    "type": "integer"
                  },
                  "rtpkeepalive": {
                    "type": "integer"
                  },
                  "sendrpid": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no",
                      "pai"
                    ],
                    "default": "yes"
                  },
                  "outboundproxy": {
                    "type": "string"
                  },
                  "callbackextension": {
                    "type": "string"
                  },
                  "timert1": {
                    "type": "integer"
                  },
                  "timerb": {
                    "type": "integer"
                  },
                  "qualifyfreq": {
                    "type": "integer"
                  },
                  "contactpermit": {
                    "type": "string"
                  },
                  "contactdeny": {
                    "type": "string"
                  },
                  "contactacl": {
                    "type": "string"
                  },
                  "unsolicited_mailbox": {
                    "type": "string"
                  },
                  "use_q850_reason": {
                    "type": "string"
                  },
                  "maxforwards": {
                    "type": "integer"
                  },
                  "encryption": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no"
                    ],
                    "default": "yes"
                  },
                  "avpf": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no"
                    ],
                    "default": "yes"
                  },
                  "force_avp": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no"
                    ],
                    "default": "yes"
                  },
                  "icesupport": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no"
                    ],
                    "default": "yes"
                  },
                  "dtlsenable": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no"
                    ],
                    "default": "yes"
                  },
                  "dtlsverify": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no",
                      "fingerprint",
                      "certificate"
                    ],
                    "default": "yes"
                  },
                  "dtlsrekey": {
                    "type": "integer"
                  },
                  "dtlscertfile": {
                    "type": "string"
                  },
                  "dtlsprivatekey": {
                    "type": "string"
                  },
                  "dtlscipher": {
                    "type": "string"
                  },
                  "dtlscafile": {
                    "type": "string"
                  },
                  "dtlscapath": {
                    "type": "string"
                  },
                  "dtlssetup": {
                    "type": "string",
                    "enum": [
                      "active",
                      "passive",
                      "actpass"
                    ],
                    "default": "active"
                  },
                  "dtlsfingerprint": {
                    "type": "string"
                  },
                  "usereqphone": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no"
                    ],
                    "default": "yes"
                  },
                  "recordonfeature": {
                    "type": "string"
                  },
                  "recordofffeature": {
                    "type": "string"
                  },
                  "call_limit": {
                    "type": "integer"
                  },
                  "registertrying": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no"
                    ],
                    "default": "yes"
                  },
                  "subscribemwi": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no"
                    ],
                    "default": "yes"
                  },
                  "vmexten": {
                    "type": "string"
                  },
                  "mohinterpret": {
                    "type": "string"
                  },
                  "mohsuggest": {
                    "type": "string"
                  },
                  "parkinglot": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "host": {
                    "type": "string"
                  },
                  "canreinvite": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no",
                      "nonat",
                      "update",
                      "update,nonat"
                    ],
                    "default": "yes"
                  },
                  "registry": {
                    "type": "string"
                  },
                  "otherFields": {
                    "type": "string"
                  },
                  "active": {
                    "type": "boolean"
                  },
                  "t38pt_udptl": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "type",
                  "context",
                  "allow",
                  "active"
                ]
              }
            }
          }
        }
      }
    },
    "/trunks/{id}": {
      "get": {
        "summary": "Gets a single Trunk",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getTrunkById",
        "tags": [
          "Trunks"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Trunk to get"
          }
        ],
        "responses": {
          "200": {
            "description": "Trunk with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Trunk"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing trunk",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "update",
        "tags": [
          "Trunks"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Trunk"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new trunk",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Deletes a trunk",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "destroy",
        "tags": [
          "Trunks"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Trunk"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/trunks/clone": {
      "post": {
        "summary": "Clone an existing Trunk",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "cloneTrunk",
        "tags": [
          "Trunks"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new trunk",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Trunk successfully cloned. Returns the cloned object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Trunk"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/user-settings/{id}": {
      "put": {
        "summary": "Update an user setting",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateUserSettingById",
        "tags": [
          "UserSetting"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new user-setting",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the UserSetting to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/user-settings/client-side-logging-scopes": {
      "get": {
        "summary": "Get list of available client side debugging scope values",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getClientSideLoggingScopes",
        "tags": [
          "UserSetting"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "enum": [
                    "general_dashboard",
                    "contact_manager",
                    "voice",
                    "chat",
                    "fax",
                    "mail",
                    "omnichannel",
                    "sms",
                    "whatsapp"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users": {
      "get": {
        "summary": "Gets a list of Users",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listUsers",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Users",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Users",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Create a new User",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "postCreateUser",
        "tags": [
          "Users"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new user",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "user created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/describe": {
      "get": {
        "summary": "Gets table info about Users",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeUsers",
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/whoami": {
      "get": {
        "summary": "Gets current user",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getWhoAmI",
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "current user information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/presence": {
      "get": {
        "summary": "Gets current user",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getPresence",
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "current user presence"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "summary": "Gets a user by id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getUserById",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user to get"
          }
        ],
        "responses": {
          "200": {
            "description": "user information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing User",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "putUpdateUser",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new user",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Remove a user - Soft delete",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteUser",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/hard/{id}": {
      "delete": {
        "summary": "Remove a user - Hard delete",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteUserHard",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{id}/restore": {
      "put": {
        "summary": "Restore a user soft deleted",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "restoreUser",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{id}/avatar": {
      "get": {
        "summary": "Gets a user avatar by id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getUserAvatarById",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "user avatar",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add avatar",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "postAddAvatar",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new user",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "avatar added"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{id}/open_tabs": {
      "get": {
        "summary": "Get interactions opened tabs",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getOpenTabs",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "user open tabs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{id}/contacts": {
      "get": {
        "summary": "Gets a user contacts by id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getUserContactsById",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "user contacts list result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "results count",
                      "default": 0
                    },
                    "rows": {
                      "description": "user contacts list",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CmContact"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add contacts to a user",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "postAddUserContact",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new user",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "contacts added"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{id}/queues": {
      "get": {
        "summary": "Gets a user queues list by user id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getUserQueues",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          },
          {
            "in": "query",
            "name": "channel",
            "allowReserved": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "enum": [
                "voice",
                "mail",
                "chat",
                "fax",
                "sms",
                "whatsapp",
                "openchannel"
              ]
            },
            "description": "channel to filter for (e.g. mail, voice...)",
            "examples": {
              "fields": {
                "value": "mail",
                "summary": "A call returning only queues for channel = mail"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "user queues list result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "results count",
                      "default": 0
                    },
                    "rows": {
                      "description": "user queues list",
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "$ref": "#/components/schemas/VoiceQueue"
                          },
                          {
                            "$ref": "#/components/schemas/MailQueue"
                          },
                          {
                            "$ref": "#/components/schemas/ChatQueue"
                          },
                          {
                            "$ref": "#/components/schemas/FaxQueue"
                          },
                          {
                            "$ref": "#/components/schemas/SmsQueue"
                          },
                          {
                            "$ref": "#/components/schemas/OpenchannelQueue"
                          },
                          {
                            "$ref": "#/components/schemas/WhatsappQueue"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add queues to an agent",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "postAddQueuesToAgent",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new user",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "queues added"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Remove one or more queues from an agent",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteUserQueues",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          },
          {
            "in": "query",
            "name": "ids",
            "allowReserved": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "description": "ids of the voice queues to be removed",
            "examples": {
              "fields": {
                "value": "1,2,3",
                "summary": "remove voice queues with ids=1, ids=2 and ids=3"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{id}/queues_rt": {
      "get": {
        "summary": "Gets a user UserVoiceQueuesRt list by user id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getUserVoiceQueuesRt",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "user UserVoiceQueuesRt list result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "results count",
                      "default": 0
                    },
                    "rows": {
                      "description": "user UserVoiceQueueRt list",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/UserVoiceQueueRt"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{id}/groups": {
      "get": {
        "summary": "Gets a user ChatGroups list by user id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getChatGroups",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "user ChatGroups list result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "results count",
                      "default": 0
                    },
                    "rows": {
                      "description": "user ChatGroups list",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ChatGroup"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{id}/profiles": {
      "get": {
        "summary": "Gets a user Profile list by user id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getProfiles",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "user Profiles list result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "results count",
                      "default": 0
                    },
                    "rows": {
                      "description": "user Profiles list",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Profile"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{id}/recordings": {
      "get": {
        "summary": "Gets a user VoiceRecording list by user id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getVoiceRecordings",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "user VoiceRecording list result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "results count",
                      "default": 0
                    },
                    "rows": {
                      "description": "user VoiceRecording list",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/VoiceRecording"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{id}/screen_recordings": {
      "get": {
        "summary": "Gets a user ScreenRecording list by user id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getScreenRecordings",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "user ScreenRecording list result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "results count",
                      "default": 0
                    },
                    "rows": {
                      "description": "user ScreenRecording list",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ScreenRecording"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{id}/chat/interactions": {
      "get": {
        "summary": "Gets a user ChatInteraction list by user id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getChatInteractions",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "user ChatInteraction list result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "results count",
                      "default": 0
                    },
                    "rows": {
                      "description": "user ChatInteraction list",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ChatInteraction"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{id}/openchannel/interactions": {
      "get": {
        "summary": "Gets a user OpenchannelInteraction list by user id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getOpenchannelInteractions",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "user OpenchannelInteraction list result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "results count",
                      "default": 0
                    },
                    "rows": {
                      "description": "user OpenchannelInteraction list",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OpenchannelInteraction"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{id}/mail/interactions": {
      "get": {
        "summary": "Gets a user MailInteraction list by user id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getMailInteractions",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "user MailInteraction list result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "results count",
                      "default": 0
                    },
                    "rows": {
                      "description": "user MailInteraction list",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MailInteraction"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{id}/sms/interactions": {
      "get": {
        "summary": "Gets a user SmsInteraction list by user id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getSmsInteractions",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "user SmsInteraction list result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "results count",
                      "default": 0
                    },
                    "rows": {
                      "description": "user SmsInteraction list",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SmsInteraction"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{id}/fax/interactions": {
      "get": {
        "summary": "Gets a user FaxInteraction list by user id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getFaxInteractions",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "user FaxInteraction list result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "results count",
                      "default": 0
                    },
                    "rows": {
                      "description": "user FaxInteraction list",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/FaxInteraction"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{id}/whatsapp/interactions": {
      "get": {
        "summary": "Gets a user WhatsappInteraction list by user id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getWhatsappInteractions",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "user WhatsappInteraction list result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "results count",
                      "default": 0
                    },
                    "rows": {
                      "description": "user WhatsappInteraction list",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/WhatsappInteraction"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{id}/teams": {
      "get": {
        "summary": "Gets a user Teams list by user id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getTeamss",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "user Teams list result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "results count",
                      "default": 0
                    },
                    "rows": {
                      "description": "user Teams list",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Team"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add teams to an agent",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "postPause",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new user",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "teams added successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Remove one or more teams from an agent",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteUserTeams",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          },
          {
            "in": "query",
            "name": "ids",
            "allowReserved": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "description": "ids of the teams to be removed",
            "examples": {
              "fields": {
                "value": "1,2,3",
                "summary": "remove teams with ids=1, ids=2 and ids=3"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{id}/lists": {
      "get": {
        "summary": "Gets a user CmList list by user id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getCmLists",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "user CmList list result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "results count",
                      "default": 0
                    },
                    "rows": {
                      "description": "user CmList list",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CmList"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{id}/agents": {
      "get": {
        "summary": "Gets a user Agents list by user id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getAgents",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "user Agents list result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "results count",
                      "default": 0
                    },
                    "rows": {
                      "description": "user Agents list",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{id}/prefixes": {
      "get": {
        "summary": "Gets a user VoicePrefix list by user id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getVoicePrefixes",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "user VoicePrefix list result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "results count",
                      "default": 0
                    },
                    "rows": {
                      "description": "user VoicePrefix list",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/VoicePrefix"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{id}/fax_accounts": {
      "get": {
        "summary": "Gets a user FaxAccount list by user id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getFaxAccounts",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "user FaxAccount list result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "results count",
                      "default": 0
                    },
                    "rows": {
                      "description": "user FaxAccount list",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/FaxAccount"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add a Fax Account to a user",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "postUserFaxAccounts",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new user",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "fax accounts added successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Remove fax accounts from an agent",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteUserFaxAccounts",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          },
          {
            "in": "query",
            "name": "ids",
            "allowReserved": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "description": "ids of the fax accounts to be removed",
            "examples": {
              "fields": {
                "value": "1,2,3",
                "summary": "remove fax accounts with ids=1, ids=2 and ids=3"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{id}/mail_accounts": {
      "get": {
        "summary": "Gets a user MailAccount list by user id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getMailAccounts",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "user MailAccount list result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "results count",
                      "default": 0
                    },
                    "rows": {
                      "description": "user MailAccount list",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MailAccount"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add a mail Account to a user",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "postUserMailAccounts",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new user",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "mail accounts added successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Remove mail accounts from an agent",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteUserMailAccounts",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          },
          {
            "in": "query",
            "name": "ids",
            "allowReserved": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "description": "ids of the mail accounts to be removed",
            "examples": {
              "fields": {
                "value": "1,2,3",
                "summary": "remove mail accounts with ids=1, ids=2 and ids=3"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{id}/openchannel_accounts": {
      "get": {
        "summary": "Gets a user OpenchannelAccount list by user id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getOpenchannelAccounts",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "user OpenchannelAccount list result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "results count",
                      "default": 0
                    },
                    "rows": {
                      "description": "user OpenchannelAccount list",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OpenchannelAccount"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add a openchannel Account to a user",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "postUserOpenchannelAccounts",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new user",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "openchannel accounts added successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Remove openchannel accounts from an agent",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteUserOpenchannelAccounts",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          },
          {
            "in": "query",
            "name": "ids",
            "allowReserved": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "description": "ids of the openchannel accounts to be removed",
            "examples": {
              "fields": {
                "value": "1,2,3",
                "summary": "remove openchannel accounts with ids=1, ids=2 and ids=3"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{id}/sms_accounts": {
      "get": {
        "summary": "Gets a user SmsAccount list by user id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getSmsAccounts",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "user SmsAccount list result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "results count",
                      "default": 0
                    },
                    "rows": {
                      "description": "user SmsAccount list",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SmsAccount"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add a sms Account to a user",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "postUserSmsAccounts",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new user",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "sms accounts added successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Remove sms accounts from an agent",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteUserSmsAccounts",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          },
          {
            "in": "query",
            "name": "ids",
            "allowReserved": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "description": "ids of the sms accounts to be removed",
            "examples": {
              "fields": {
                "value": "1,2,3",
                "summary": "remove sms accounts with ids=1, ids=2 and ids=3"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{id}/chat_websites": {
      "get": {
        "summary": "Gets a user ChatWebsite list by user id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getChatWebsites",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "user ChatWebsite list result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "results count",
                      "default": 0
                    },
                    "rows": {
                      "description": "user ChatWebsite list",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ChatWebsite"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add a Chat Website to a user",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "postUserChatWebsites",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new user",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "chat websites added successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Remove chat websites from an agent",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteUserChatWebsites",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          },
          {
            "in": "query",
            "name": "ids",
            "allowReserved": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "description": "ids of the chat websites to be removed",
            "examples": {
              "fields": {
                "value": "1,2,3",
                "summary": "remove chat websites with ids=1, ids=2 and ids=3"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{id}/whatsapp_accounts": {
      "get": {
        "summary": "Gets a user WhatsappAccount list by user id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getWhatsappAccounts",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "user WhatsappAccount list result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "results count",
                      "default": 0
                    },
                    "rows": {
                      "description": "user WhatsappAccount list",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/WhatsappAccount"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add a whatsapp Account to a user",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "postUserWhatsappAccounts",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new user",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "whatsapp accounts added successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Remove whatsapp accounts from an agent",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteUserWhatsappAccounts",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          },
          {
            "in": "query",
            "name": "ids",
            "allowReserved": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "description": "ids of the whatsapp accounts to be removed",
            "examples": {
              "fields": {
                "value": "1,2,3",
                "summary": "remove whatsapp accounts with ids=1, ids=2 and ids=3"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{id}/scheduled_calls": {
      "get": {
        "summary": "Gets a user scheduled calls list by user id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getScheduledCalls",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "user scheduled calls list result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "results count",
                      "default": 0
                    },
                    "rows": {
                      "description": "user scheduled calls list",
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{id}/api_key": {
      "get": {
        "summary": "Gets a user api key by user id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getApiKey",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "user api keys list result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "api_key": {
                      "type": "string",
                      "description": "api key token"
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No API access key found!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "error message",
                      "default": "No API access key found!"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Create a new API access key for the user",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "postCreateApiKey",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "201": {
            "description": "the api key that has been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "api_key": {
                      "type": "string",
                      "description": "api key token"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new user",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Remove API access key for the user",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteUserApiKey",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/create_many": {
      "post": {
        "summary": "Create several Users",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "postCreateUsers",
        "tags": [
          "Users"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new user",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "users created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{id}/login": {
      "post": {
        "summary": "perform SIP Login",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "postSipLogin",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new user",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "SIP Login success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{id}/logout": {
      "post": {
        "summary": "perform SIP logout",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "postSipLogout",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "responses": {
          "201": {
            "description": "SIP logout success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new user",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/users/{id}/pause": {
      "post": {
        "summary": "set pause status",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "postPause",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new user",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "status updated successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{id}/unpause": {
      "post": {
        "summary": "unset pause status",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "postUnpause",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new user",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "status updated successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{id}/chat_interactions": {
      "post": {
        "summary": "Add chat interaction tabs to an agent",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "postUserChatInteraction",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new user",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "chat interaction tabs added successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Remove chat interactions from an agent",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteUserChatInteractions",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          },
          {
            "in": "query",
            "name": "ids",
            "allowReserved": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "description": "ids of the chat interactions to be removed",
            "examples": {
              "fields": {
                "value": "1,2,3",
                "summary": "remove chat interactions with ids=1, ids=2 and ids=3"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{id}/mail_interactions": {
      "post": {
        "summary": "Add mail interaction tabs to an agent",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "postUserMailInteraction",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new user",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "mail interaction tabs added successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Remove mail interactions from an agent",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteUserMailInteractions",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          },
          {
            "in": "query",
            "name": "ids",
            "allowReserved": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "description": "ids of the mail interactions to be removed",
            "examples": {
              "fields": {
                "value": "1,2,3",
                "summary": "remove mail interactions with ids=1, ids=2 and ids=3"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{id}/fax_interactions": {
      "post": {
        "summary": "Add fax interaction tabs to an agent",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "postUserFaxInteraction",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new user",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "fax interaction tabs added successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Remove fax interactions from an agent",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteUserFaxInteractions",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          },
          {
            "in": "query",
            "name": "ids",
            "allowReserved": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "description": "ids of the fax interactions to be removed",
            "examples": {
              "fields": {
                "value": "1,2,3",
                "summary": "remove fax interactions with ids=1, ids=2 and ids=3"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{id}/sms_interactions": {
      "post": {
        "summary": "Add sms interaction tabs to an agent",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "postUserSmsInteraction",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new user",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "sms interaction tabs added successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Remove sms_interactions from an agent",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteUserSmsInteractions",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          },
          {
            "in": "query",
            "name": "ids",
            "allowReserved": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "description": "ids of the sms interactions to be removed",
            "examples": {
              "fields": {
                "value": "1,2,3",
                "summary": "remove sms interactions with ids=1, ids=2 and ids=3"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{id}/openchannel_interactions": {
      "post": {
        "summary": "Add openchannel interaction tabs to an agent",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "postUserOpenchannelInteraction",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new user",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "openchannel interaction tabs added successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Remove openchannel interactions from an agent",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteUserOpenchannelInteractions",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          },
          {
            "in": "query",
            "name": "ids",
            "allowReserved": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "description": "ids of the openchannel interactions to be removed",
            "examples": {
              "fields": {
                "value": "1,2,3",
                "summary": "remove openchannel interactions with ids=1, ids=2 and ids=3"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{id}/whatsapp_interactions": {
      "post": {
        "summary": "Add whatsapp interaction tabs to an agent",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "postUserWhatsappInteraction",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new user",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "whatsapp interaction tabs added successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Remove whatsapp_interactions from an agent",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteUserWhatsappInteractions",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          },
          {
            "in": "query",
            "name": "ids",
            "allowReserved": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "description": "ids of the whatsapp interactions to be removed",
            "examples": {
              "fields": {
                "value": "1,2,3",
                "summary": "remove whatsapp interactions with ids=1, ids=2 and ids=3"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{id}/password": {
      "put": {
        "summary": "Update an existing User",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "putUpdateUser",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new user",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{id}/mfa/qrcode": {
      "get": {
        "summary": "Gets the QRCode to enable Multifactor Authentication",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getMFAQRCode",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "MFA data result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "qrcode": {
                      "type": "string",
                      "description": "MFA base64 encoded qrcode image"
                    },
                    "secret": {
                      "type": "string",
                      "description": "MFA secret"
                    },
                    "otpauth": {
                      "type": "string",
                      "description": "MFA authenticator app key URI"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{id}/mfa/email-otp": {
      "post": {
        "summary": "Gets the OTP to enable Multifactor Authentication via email",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getMFAOTPByEmail",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {}
          }
        },
        "responses": {
          "200": {
            "description": "MFA OTP requested",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "boolean",
                      "description": "action success"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{id}/mfa/enable": {
      "post": {
        "summary": "Enables the Multifactor Authentication",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "enableMFA",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new user",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "totp": {
                    "type": "string",
                    "description": "Time-based one-time password"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "MFA enabled",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "boolean",
                      "description": "action success"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{id}/mfa/disable": {
      "post": {
        "summary": "Disables the Multifactor Authentication",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "disableMFA",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {}
          }
        },
        "responses": {
          "200": {
            "description": "MFA disabled",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "boolean",
                      "description": "action success"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{id}/messengerSoundNotification": {
      "post": {
        "summary": "Updates messenger sound notification flag",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "postMessengerSoundNotification",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "flag for setting messenger sound notification",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Messenger sound notification values set"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{userId}/profiles": {
      "get": null,
      "summary": "Gets a list of all profiles associated with the given user id",
      "security": [
        {
          "bearerAuth": []
        },
        {
          "basicAuth": []
        },
        {
          "motionApiKey": []
        },
        {
          "googleId": []
        }
      ],
      "operationId": "listAllProfilesOfAUser",
      "tags": [
        "List Profiles User"
      ],
      "responses": {
        "200": {
          "description": "Entire collection of Profiles associated with the given user",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Profile"
                }
              }
            }
          }
        },
        "401": {
          "$ref": "#/components/responses/Unauthorized"
        },
        "403": {
          "$ref": "#/components/responses/Forbidden"
        },
        "500": {
          "$ref": "#/components/responses/InternalServerError"
        }
      }
    },
    "/users/{userId}/timings": {
      "get": null,
      "summary": "Gets a list of all timings associated with the given user id",
      "security": [
        {
          "bearerAuth": []
        },
        {
          "basicAuth": []
        },
        {
          "motionApiKey": []
        },
        {
          "googleId": []
        }
      ],
      "operationId": "listAllTimingsOfAUser",
      "tags": [
        "List Timings User"
      ],
      "responses": {
        "200": {
          "description": "Entire collection of Profiles associated with the given user",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Profile"
                }
              }
            }
          }
        },
        "401": {
          "$ref": "#/components/responses/Unauthorized"
        },
        "403": {
          "$ref": "#/components/responses/Forbidden"
        },
        "500": {
          "$ref": "#/components/responses/InternalServerError"
        }
      }
    },
    "/users/{id}/generate-invitation-link": {
      "get": {
        "summary": "Generate the invitation link for a user. Can't be used to generate invitation links for the superadmin or yourself.",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "generateInvitationLink",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Invitation link",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "link": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/reset-password-with-invitation-token": {
      "get": {
        "summary": "Set the user password with an invitation token. Can be used only once. Doesn't require authentication",
        "operationId": "resetPasswordWithInvitationToken",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Data for resetting password",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "password": {
                    "type": "string"
                  },
                  "invitationToken": {
                    "type": "string",
                    "description": "generated with the \"generate-invitation-link\" method"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User with the password reset",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/verify-invitation-token": {
      "get": {
        "summary": "Check the validity of a given invitation token",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "verifyInvitationToken",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the user"
          },
          {
            "in": "query",
            "name": "token",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "invitation token generated by the \"generate-invitation-link\" method"
          }
        ],
        "responses": {
          "200": {
            "description": "The user for which the invitation token was generated, if the invitation token is still valid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/userNotifications": {
      "post": {
        "summary": "Send notification to user",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "userNotifications",
        "tags": [
          "User Notifications"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new userNotification",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "userNotification successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserNotification"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/userProfiles": {
      "get": {
        "summary": "Gets a list of User Profiles",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllUserProfile",
        "tags": [
          "User Profiles"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of User Profiles",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserProfile"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of User Profiles",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserProfile"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new User Profile",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createUserProfile",
        "tags": [
          "User Profiles"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new userProfile",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "crudPermissions": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "privacyEnabled": {
                    "type": "boolean"
                  },
                  "downloadAttachments": {
                    "type": "boolean"
                  },
                  "downloadCallySquareRecordings": {
                    "type": "boolean"
                  },
                  "downloadContactManagerLists": {
                    "type": "boolean"
                  },
                  "downloadJscriptySessions": {
                    "type": "boolean"
                  },
                  "downloadOmnichannelInteractions": {
                    "type": "boolean"
                  },
                  "downloadScreenRecordings": {
                    "type": "boolean"
                  },
                  "downloadVoiceRecordings": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "name",
                  "crudPermissions"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "UserProfile successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfile"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/userProfiles/describe": {
      "get": {
        "summary": "Gets table info about User Profiles",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeUserProfile",
        "tags": [
          "User Profiles"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/userProfiles/{id}": {
      "get": {
        "summary": "Gets a single User Profile",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getUserProfileById",
        "tags": [
          "User Profiles"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the UserProfile to get"
          }
        ],
        "responses": {
          "200": {
            "description": "UserProfile with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfile"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing User Profile",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateUserProfileById",
        "tags": [
          "User Profiles"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new userProfile",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the UserProfile to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing User Profile",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteUserProfileById",
        "tags": [
          "User Profiles"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the UserProfile to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/userProfiles/{id}/sections": {
      "get": {
        "summary": "Get sections associated to a User Profile",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getSections",
        "tags": [
          "User Profiles"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the UserProfile"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add sections' permissions to User Profile",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addSections",
        "tags": [
          "User Profiles"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the UserProfile"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new userProfile",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Removes sections' permissions from User Profile",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeSections",
        "tags": [
          "User Profiles"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the UserProfile"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/userProfiles/{id}/resources": {
      "get": {
        "summary": "Get Resources assigned to a Section",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getResources",
        "tags": [
          "User Profiles"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the UserProfile"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add resources' permissions to User Profile",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addResources",
        "tags": [
          "User Profiles"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the UserProfile"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new userProfile",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Removes resources' permissions from User Profile",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeResources",
        "tags": [
          "User Profiles"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the UserProfile"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/userProfiles/clone": {
      "post": {
        "summary": "Clone an existing User Profile",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "cloneUserProfile",
        "tags": [
          "User Profiles"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new userProfile",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "UserProfile successfully cloned. Returns the cloned object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfile"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/userProfile/resources": {
      "get": {
        "summary": "Gets a list of User Profile Resources",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllUserProfileResource",
        "tags": [
          "User Profile Resources"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of User Profile Resources",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserProfileResource"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of User Profile Resources",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserProfileResource"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new User Profile Resource",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createUserProfileResource",
        "tags": [
          "User Profile Resources"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new userProfileResource",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "resourceId": {
                    "type": "integer"
                  },
                  "type": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "resourceId",
                  "type"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "UserProfileResource successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileResource"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/userProfile/resources/describe": {
      "get": {
        "summary": "Gets table info about User Profile Resources",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeUserProfileResource",
        "tags": [
          "User Profile Resources"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/userProfile/resources/{id}": {
      "get": {
        "summary": "Gets a single User Profile Resource",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getUserProfileResourceById",
        "tags": [
          "User Profile Resources"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the UserProfileResource to get"
          }
        ],
        "responses": {
          "200": {
            "description": "UserProfileResource with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileResource"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing User Profile Resource",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateUserProfileResourceById",
        "tags": [
          "User Profile Resources"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new userProfileResource",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the UserProfileResource to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing User Profile Resource",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteUserProfileResourceById",
        "tags": [
          "User Profile Resources"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the UserProfileResource to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/userProfile/sections": {
      "get": {
        "summary": "Gets a list of User Profile Sections",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllUserProfileSection",
        "tags": [
          "User Profile Sections"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of User Profile Sections",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserProfileSection"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of User Profile Sections",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserProfileSection"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new User Profile Section",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createUserProfileSection",
        "tags": [
          "User Profile Sections"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new userProfileSection",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "category": {
                    "type": "string"
                  },
                  "sectionId": {
                    "type": "integer"
                  },
                  "enabled": {
                    "type": "boolean"
                  },
                  "autoAssociation": {
                    "type": "boolean"
                  },
                  "crudPermissions": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "category",
                  "sectionId"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "UserProfileSection successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileSection"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/userProfile/sections/describe": {
      "get": {
        "summary": "Gets table info about User Profile Sections",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeUserProfileSection",
        "tags": [
          "User Profile Sections"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/userProfile/sections/{id}": {
      "get": {
        "summary": "Gets a single User Profile Section",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getUserProfileSectionById",
        "tags": [
          "User Profile Sections"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the UserProfileSection to get"
          }
        ],
        "responses": {
          "200": {
            "description": "UserProfileSection with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileSection"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing User Profile Section",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateUserProfileSectionById",
        "tags": [
          "User Profile Sections"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new userProfileSection",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the UserProfileSection to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing User Profile Section",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteUserProfileSectionById",
        "tags": [
          "User Profile Sections"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the UserProfileSection to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/variables": {
      "get": {
        "summary": "Gets a list of Variables",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllVariable",
        "tags": [
          "Variables"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Variables",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Variable"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Variables",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Variable"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Variable",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createVariable",
        "tags": [
          "Variables"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new variable",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Variable successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Variable"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/variables/{id}": {
      "get": {
        "summary": "Gets a single Variable",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getVariableById",
        "tags": [
          "Variables"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Variable to get"
          }
        ],
        "responses": {
          "200": {
            "description": "Variable with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Variable"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Variable",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateVariableById",
        "tags": [
          "Variables"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new variable",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Variable to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Variable",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteVariableById",
        "tags": [
          "Variables"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the Variable to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/version": {
      "get": {
        "summary": "Gets version",
        "operationId": "getVersion",
        "tags": [
          "Version"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "latest",
            "schema": {
              "type": "boolean"
            },
            "required": false,
            "description": "get information about last available build on Xenialab repositories"
          }
        ],
        "responses": {
          "200": {
            "description": "full server version infomation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "current": {
                      "type": "string",
                      "description": "current product version (semver)"
                    },
                    "phonebar": {
                      "type": "integer",
                      "description": "current phonebar version (number)"
                    },
                    "shortHash": {
                      "type": "string",
                      "description": "latest server git sha hash"
                    },
                    "branch": {
                      "type": "string",
                      "description": "server git branch"
                    },
                    "tag": {
                      "type": "string",
                      "description": "server git tag (s)"
                    },
                    "committedOn": {
                      "type": "string",
                      "format": "date-time",
                      "description": "last commit date and time"
                    },
                    "buildDate": {
                      "type": "string",
                      "format": "date-time",
                      "description": "buildDate date and time"
                    },
                    "buildId": {
                      "type": "integer",
                      "description": "buildId set from CI"
                    }
                  },
                  "required": [
                    "current",
                    "phonebar",
                    "shortHash",
                    "branch",
                    "tag",
                    "committedOn",
                    "buildDate",
                    "buildId"
                  ]
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/version/update": {
      "get": {
        "summary": "Run the Motion update process",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateMotion",
        "tags": [
          "Version"
        ],
        "responses": {
          "302": {
            "description": "operation successfull. All clients will be redirected to maintenanche URL via websocket",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "output": {
                      "type": "string",
                      "default": "Update in progress",
                      "description": "current output"
                    }
                  },
                  "required": [
                    "output"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/agents/reports": {
      "get": {
        "summary": "Gets a list of Agent Reports",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllVoiceAgentReport",
        "tags": [
          "Voice Agent Reports"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Agent Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VoiceAgentReport"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Agent Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VoiceAgentReport"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/agents/reports/describe": {
      "get": {
        "summary": "Gets table info about Agent Reports",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeVoiceAgentReport",
        "tags": [
          "Voice Agent Reports"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/agents/reports/{id}": {
      "get": {
        "summary": "Gets a single Agent Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getVoiceAgentReportById",
        "tags": [
          "Voice Agent Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceAgentReport to get"
          }
        ],
        "responses": {
          "200": {
            "description": "VoiceAgentReport with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceAgentReport"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/calls/reports": {
      "get": {
        "summary": "Gets a list of Call Reports",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllVoiceCallReport",
        "tags": [
          "Voice Call Reports"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Call Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VoiceCallReport"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Call Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VoiceCallReport"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/calls/reports/describe": {
      "get": {
        "summary": "Gets table info about Call Reports",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeVoiceCallReport",
        "tags": [
          "Voice Call Reports"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/calls/reports/{id}": {
      "get": {
        "summary": "Gets a single Call Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getVoiceCallReportById",
        "tags": [
          "Voice Call Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceCallReport to get"
          }
        ],
        "responses": {
          "200": {
            "description": "VoiceCallReport with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceCallReport"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update a single cdr",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "update",
        "tags": [
          "Voice Call Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceCallReport"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new voiceCallReport",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/voice/calls/reports/with-retry/{id}": {
      "put": {
        "summary": "Update a single voice call report with retries if it fails. Deprecated",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "update",
        "tags": [
          "Voice Call Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceCallReport"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new voiceCallReport",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/voice/calls/reports/transfers": {
      "get": {
        "summary": "Gets a list of transferred Call Reports",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllTransferredVoiceCallReport",
        "tags": [
          "Voice Call Reports"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Call Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VoiceCallReport"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of transferred Call Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VoiceCallReport"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/chanspy": {
      "get": {
        "summary": "Gets a list of Voice ChanSpy",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listVoiceChanSpy",
        "tags": [
          "Voice ChanSpy"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Voice ChanSpy",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VoiceChanSpy"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Voice ChanSpy",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VoiceChanSpy"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "create a ChanSpy",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createChanSpy",
        "tags": [
          "Voice ChanSpy"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new voiceChanSpy",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "prefix": {
                    "type": "string"
                  },
                  "options": {
                    "type": "string"
                  },
                  "auth": {
                    "type": "boolean"
                  },
                  "password": {
                    "type": "string"
                  },
                  "record": {
                    "type": "boolean"
                  },
                  "recordingFormat": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "required": [
                  "prefix"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceChanSpy"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/chanspy/{id}": {
      "get": {
        "summary": "Get a ChanSpy by Id",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getChanSpyById",
        "tags": [
          "Voice ChanSpy"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChanSpy"
          }
        ],
        "responses": {
          "200": {
            "description": "the desired chanspy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceChanSpy"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update a ChanSpy",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateChanSpyById",
        "tags": [
          "Voice ChanSpy"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChanSpy"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new voiceChanSpy",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Delete a ChanSpy",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteChanSpyById",
        "tags": [
          "Voice ChanSpy"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the ChanSpy"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/contexts": {
      "get": {
        "summary": "Gets a list of Contexts",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllVoiceContext",
        "tags": [
          "Voice Contexts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Contexts",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VoiceContext"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Contexts",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VoiceContext"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Create a new context",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "create",
        "tags": [
          "Voice Contexts"
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new voiceContext",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "defaultEntry": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/voice/contexts/{id}": {
      "get": {
        "summary": "Gets a single Context",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getVoiceContextById",
        "tags": [
          "Voice Contexts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceContext to get"
          }
        ],
        "responses": {
          "200": {
            "description": "VoiceContext with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceContext"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing context",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "update",
        "tags": [
          "Voice Contexts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceContext"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new voiceContext",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Deletes a context",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "destroy",
        "tags": [
          "Voice Contexts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceContext"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/dials/reports": {
      "get": {
        "summary": "Gets a list of Dial Reports",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllVoiceDialReport",
        "tags": [
          "Voice Dial Reports"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Dial Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VoiceDialReport"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Dial Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VoiceDialReport"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/dials/reports/describe": {
      "get": {
        "summary": "Gets table info about Dial Reports",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeVoiceDialReport",
        "tags": [
          "Voice Dial Reports"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/dials/reports/{id}": {
      "get": {
        "summary": "Gets a single Dial Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getVoiceDialReportById",
        "tags": [
          "Voice Dial Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceDialReport to get"
          }
        ],
        "responses": {
          "200": {
            "description": "VoiceDialReport with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceDialReport"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/extensions": {
      "get": {
        "summary": "Gets a list of Extensions",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllVoiceExtension",
        "tags": [
          "Voice Extensions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Extensions",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VoiceExtension"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Extensions",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VoiceExtension"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Create an extension",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "create",
        "tags": [
          "Voice Extensions"
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new voiceExtension",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/voice/extensions/{id}": {
      "get": {
        "summary": "Gets a single Extension",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getVoiceExtensionById",
        "tags": [
          "Voice Extensions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceExtension to get"
          }
        ],
        "responses": {
          "200": {
            "description": "VoiceExtension with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceExtension"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an extension",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "update",
        "tags": [
          "Voice Extensions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceExtension"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new voiceExtension",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Extension",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteVoiceExtensionById",
        "tags": [
          "Voice Extensions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceExtension to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/extensions/{id}/applications": {
      "post": {
        "summary": "Create new applications",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addApplications",
        "tags": [
          "Voice Extensions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceExtension"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new voiceExtension",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/voice/mails": {
      "get": {
        "summary": "Gets a list of Mails",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllVoiceMail",
        "tags": [
          "Voice Mails"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Mails",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VoiceMail"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Mails",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VoiceMail"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Mail",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createVoiceMail",
        "tags": [
          "Voice Mails"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new voiceMail",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "customer_id": {
                    "type": "string"
                  },
                  "context": {
                    "type": "string"
                  },
                  "mailbox": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "fullname": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "pager": {
                    "type": "string"
                  },
                  "tz": {
                    "type": "string"
                  },
                  "attach": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no"
                    ],
                    "default": "yes"
                  },
                  "saycid": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no"
                    ],
                    "default": "yes"
                  },
                  "dialout": {
                    "type": "string"
                  },
                  "callback": {
                    "type": "string"
                  },
                  "review": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no"
                    ],
                    "default": "yes"
                  },
                  "operator": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no"
                    ],
                    "default": "yes"
                  },
                  "envelope": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no"
                    ],
                    "default": "yes"
                  },
                  "sayduration": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no"
                    ],
                    "default": "yes"
                  },
                  "saydurationm": {
                    "type": "string"
                  },
                  "sendvoicemail": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no"
                    ],
                    "default": "yes"
                  },
                  "delete": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no"
                    ],
                    "default": "yes"
                  },
                  "nextaftercmd": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no"
                    ],
                    "default": "yes"
                  },
                  "forcename": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no"
                    ],
                    "default": "yes"
                  },
                  "forcegreetings": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no"
                    ],
                    "default": "yes"
                  },
                  "hidefromdir": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no"
                    ],
                    "default": "yes"
                  },
                  "stamp": {
                    "type": "string"
                  },
                  "emailsubject": {
                    "type": "string"
                  },
                  "emailbody": {
                    "type": "string"
                  },
                  "maxsecs": {
                    "type": "integer"
                  },
                  "maxmsg": {
                    "type": "integer"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "required": [
                  "mailbox",
                  "attach",
                  "saycid",
                  "review",
                  "operator",
                  "envelope",
                  "sayduration",
                  "saydurationm",
                  "sendvoicemail",
                  "delete",
                  "nextaftercmd",
                  "forcename",
                  "forcegreetings",
                  "hidefromdir",
                  "maxsecs",
                  "maxmsg"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "VoiceMail successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceMail"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/mails/{id}": {
      "get": {
        "summary": "Gets a single Mail",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getVoiceMailById",
        "tags": [
          "Voice Mails"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceMail to get"
          }
        ],
        "responses": {
          "200": {
            "description": "VoiceMail with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceMail"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Mail",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateVoiceMailById",
        "tags": [
          "Voice Mails"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new voiceMail",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceMail to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Mail",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteVoiceMailById",
        "tags": [
          "Voice Mails"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceMail to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/mails/{id}/messages": {
      "get": {
        "summary": "Gets voice mail messages",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getMessages",
        "tags": [
          "Voice Mails"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceMail"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/mails/messages": {
      "get": {
        "summary": "Gets a list of Messages",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllVoiceMailMessage",
        "tags": [
          "Voice Messages"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Messages",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VoiceMailMessage"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Messages",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VoiceMailMessage"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "201": {
          "description": "VoiceMailMessage successfully created. Returns the created object representation.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoiceMailMessage"
              }
            }
          }
        },
        "401": {
          "$ref": "#/components/responses/Unauthorized"
        },
        "403": {
          "$ref": "#/components/responses/Forbidden"
        },
        "500": {
          "$ref": "#/components/responses/InternalServerError"
        },
        "summary": "Creates a new Message",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createVoiceMailMessage",
        "tags": [
          "Voice Messages"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new voiceMailMessage",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "integer"
                  },
                  "msgnum": {
                    "type": "integer"
                  },
                  "dir": {
                    "type": "string"
                  },
                  "context": {
                    "type": "string"
                  },
                  "macrocontext": {
                    "type": "string"
                  },
                  "callerid": {
                    "type": "string"
                  },
                  "origtime": {
                    "type": "string"
                  },
                  "duration": {
                    "type": "string"
                  },
                  "mailboxuser": {
                    "type": "string"
                  },
                  "mailboxcontext": {
                    "type": "string"
                  },
                  "recording": {
                    "type": "string",
                    "format": "binary"
                  },
                  "flag": {
                    "type": "string"
                  },
                  "msg_id": {
                    "type": "string"
                  },
                  "stamp": {
                    "type": "string"
                  },
                  "createdAt": {
                    "type": "string"
                  },
                  "updatedAt": {
                    "type": "string"
                  }
                },
                "required": [
                  "msgnum"
                ]
              }
            }
          }
        },
        "responses": null
      }
    },
    "/voice/mails/messages/{id}": {
      "get": {
        "summary": "Gets a single Message",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getVoiceMailMessageById",
        "tags": [
          "Voice Messages"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceMailMessage to get"
          }
        ],
        "responses": {
          "200": {
            "description": "VoiceMailMessage with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceMailMessage"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Message",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateVoiceMailMessageById",
        "tags": [
          "Voice Messages"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new voiceMailMessage",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceMailMessage to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Message",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteVoiceMailMessageById",
        "tags": [
          "Voice Messages"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceMailMessage to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/mails/messages/{id}/download": {
      "get": {
        "summary": "Download Voice Message",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "download",
        "tags": [
          "Voice Messages"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceMailMessage"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/mohs": {
      "get": {
        "summary": "Gets a list of Music On Holds",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllVoiceMusicOnHold",
        "tags": [
          "Voice MOHs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Music On Holds",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VoiceMusicOnHold"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Music On Holds",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VoiceMusicOnHold"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Create a new a new MOH",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "create",
        "tags": [
          "Voice MOHs"
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new voiceMusicOnHold",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/voice/mohs/{id}": {
      "get": {
        "summary": "Gets a single Music On Hold",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getVoiceMusicOnHoldById",
        "tags": [
          "Voice MOHs"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceMusicOnHold to get"
          }
        ],
        "responses": {
          "200": {
            "description": "VoiceMusicOnHold with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceMusicOnHold"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Music On Hold",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateVoiceMusicOnHoldById",
        "tags": [
          "Voice MOHs"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new voiceMusicOnHold",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceMusicOnHold to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Deletes an MOH",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "destroy",
        "tags": [
          "Voice MOHs"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceMusicOnHold"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/mohs/{id}/sounds": {
      "get": {
        "summary": "Gets sounds from MOH",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getSounds",
        "tags": [
          "Voice MOHs"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceMusicOnHold"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add sound to MOH",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addSound",
        "tags": [
          "Voice MOHs"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceMusicOnHold"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new voiceMusicOnHold",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/voice/mohs/{id}/sounds/{id2}": {
      "delete": {
        "summary": "Remove sound from MOH",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeSound",
        "tags": [
          "Voice MOHs"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceMusicOnHold"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/prefixes": {
      "get": {
        "summary": "Gets a list of Prefixes",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllVoicePrefix",
        "tags": [
          "Voice Prefixes"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Prefixes",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VoicePrefix"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Prefixes",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VoicePrefix"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Create a prefix",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "create",
        "tags": [
          "Voice Prefixes"
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new voicePrefix",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/voice/prefixes/describe": {
      "get": {
        "summary": "Gets table info about Prefixes",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeVoicePrefix",
        "tags": [
          "Voice Prefixes"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/prefixes/{id}": {
      "get": {
        "summary": "Gets a single Prefix",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getVoicePrefixById",
        "tags": [
          "Voice Prefixes"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoicePrefix to get"
          }
        ],
        "responses": {
          "200": {
            "description": "VoicePrefix with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoicePrefix"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing prefix",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "update",
        "tags": [
          "Voice Prefixes"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoicePrefix"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new voicePrefix",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Prefix",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteVoicePrefixById",
        "tags": [
          "Voice Prefixes"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoicePrefix to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/prefixes/{id}/users": {
      "get": {
        "summary": "Gets agents from prefix",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getAgents",
        "tags": [
          "Voice Prefixes"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoicePrefix"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add agents to a prefix",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addAgents",
        "tags": [
          "Voice Prefixes"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoicePrefix"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new voicePrefix",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Removes agents from a prefix",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeAgents",
        "tags": [
          "Voice Prefixes"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoicePrefix"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/prefixes/{id}/teams": {
      "get": {
        "summary": "Gets teams from prefix",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getTeams",
        "tags": [
          "Voice Prefixes"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoicePrefix"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add teams to a prefix",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addTeams",
        "tags": [
          "Voice Prefixes"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoicePrefix"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new voicePrefix",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Removes teams from a prefix",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeTeams",
        "tags": [
          "Voice Prefixes"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoicePrefix"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/qa_categories/{region}": {
      "get": {
        "summary": "Gets a list of QA Categories",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllQACategories",
        "tags": [
          "QA Categories"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of QA Categories",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    },
                    "rows": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/QACategory"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/qa_categories/{region}/{accountId}/{name}": {
      "get": {
        "summary": "Gets data for a QA Category",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getQACategory",
        "tags": [
          "QA Categories"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "region",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "AWS region"
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Provider account ID"
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Category name"
          }
        ],
        "responses": {
          "201": {
            "description": "QA Category successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "CategoryProperties": {
                      "$ref": "#/components/schemas/QACategory"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Deletes an existing QA Category",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteQACategory",
        "tags": [
          "QA Categories"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "region",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "AWS region"
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Provider account ID"
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Category name"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/qa_categories": {
      "post": {
        "summary": "Creates a new QA Category",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createQACategory",
        "tags": [
          "QA Categories"
        ],
        "requestBody": {
          "required": true,
          "description": "Data for creating new QA Category",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "categoryName": {
                    "type": "string"
                  },
                  "accountId": {
                    "type": "string"
                  },
                  "rules": {
                    "type": "array",
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/InterruptionFilter"
                      },
                      {
                        "$ref": "#/components/schemas/TranscriptFilter"
                      },
                      {
                        "$ref": "#/components/schemas/NonTalkTimeFilter"
                      },
                      {
                        "$ref": "#/components/schemas/SentimentFilter"
                      }
                    ]
                  }
                },
                "required": [
                  "categoryName",
                  "accountId",
                  "rules"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "QA Category successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PauseReason"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Updates an existing QA Category",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateQACategory",
        "tags": [
          "QA Categories"
        ],
        "requestBody": {
          "required": true,
          "description": "Data for updating an existing QA Category",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "categoryName": {
                    "type": "string"
                  },
                  "accountId": {
                    "type": "string"
                  },
                  "rules": {
                    "type": "array",
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/InterruptionFilter"
                      },
                      {
                        "$ref": "#/components/schemas/TranscriptFilter"
                      },
                      {
                        "$ref": "#/components/schemas/NonTalkTimeFilter"
                      },
                      {
                        "$ref": "#/components/schemas/SentimentFilter"
                      }
                    ]
                  }
                },
                "required": [
                  "categoryName",
                  "accountId",
                  "rules"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "QA Category successfully updated. Returns the updated object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QACategory"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/queues": {
      "get": {
        "summary": "Gets a list of Queues",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllVoiceQueue",
        "tags": [
          "Voice Queues"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Queues",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VoiceQueue"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Queues",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VoiceQueue"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createVoiceQueue",
        "tags": [
          "Voice Queues"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new voiceQueue",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "inbound",
                      "outbound"
                    ],
                    "default": "inbound"
                  },
                  "musiconhold": {
                    "type": "string"
                  },
                  "announce": {
                    "type": "string"
                  },
                  "strategy": {
                    "type": "string",
                    "enum": [
                      "rr",
                      "ringall",
                      "leastrecent",
                      "fewestcalls",
                      "random",
                      "rrmemory",
                      "linear",
                      "wrandom",
                      "rrordered"
                    ],
                    "default": "rr"
                  },
                  "servicelevel": {
                    "type": "integer"
                  },
                  "context": {
                    "type": "string"
                  },
                  "penaltymemberslimit": {
                    "type": "integer"
                  },
                  "timeout": {
                    "type": "integer"
                  },
                  "retry": {
                    "type": "integer"
                  },
                  "timeoutpriority": {
                    "type": "string"
                  },
                  "weight": {
                    "type": "integer"
                  },
                  "wrapuptime": {
                    "type": "integer"
                  },
                  "autofill": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no"
                    ],
                    "default": "yes"
                  },
                  "autopause": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no",
                      "all"
                    ],
                    "default": "yes"
                  },
                  "autopausedelay": {
                    "type": "integer"
                  },
                  "autopausebusy": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no"
                    ],
                    "default": "yes"
                  },
                  "autopauseunavail": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no"
                    ],
                    "default": "yes"
                  },
                  "maxlen": {
                    "type": "integer"
                  },
                  "setinterfacevar": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no"
                    ],
                    "default": "yes"
                  },
                  "setqueueentryvar": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no"
                    ],
                    "default": "yes"
                  },
                  "setqueuevar": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no"
                    ],
                    "default": "yes"
                  },
                  "eventmemberstatus": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no"
                    ],
                    "default": "yes"
                  },
                  "membermacro": {
                    "type": "string"
                  },
                  "membergosub": {
                    "type": "string"
                  },
                  "announce_frequency": {
                    "type": "integer"
                  },
                  "min_announce_frequency": {
                    "type": "integer"
                  },
                  "periodic_announce_frequency": {
                    "type": "integer"
                  },
                  "random_periodic_announce": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no"
                    ],
                    "default": "yes"
                  },
                  "relative_periodic_announce": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no"
                    ],
                    "default": "yes"
                  },
                  "announce_holdtime": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no",
                      "once"
                    ],
                    "default": "yes"
                  },
                  "announce_position": {
                    "type": "string"
                  },
                  "announce_to_first_user": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no"
                    ],
                    "default": "yes"
                  },
                  "announce_position_limit": {
                    "type": "integer"
                  },
                  "announce_round_seconds": {
                    "type": "string",
                    "enum": [
                      "0",
                      "5",
                      "10",
                      "15",
                      "20",
                      "30"
                    ],
                    "default": "0"
                  },
                  "monitor_format": {
                    "type": "string"
                  },
                  "monitor_type": {
                    "type": "string"
                  },
                  "queue_youarenext": {
                    "type": "string"
                  },
                  "queue_thereare": {
                    "type": "string"
                  },
                  "queue_callswaiting": {
                    "type": "string"
                  },
                  "queue_holdtime": {
                    "type": "string"
                  },
                  "queue_minute": {
                    "type": "string"
                  },
                  "queue_minutes": {
                    "type": "string"
                  },
                  "queue_seconds": {
                    "type": "string"
                  },
                  "queue_thankyou": {
                    "type": "string"
                  },
                  "queue_reporthold": {
                    "type": "string"
                  },
                  "queue_quantity1": {
                    "type": "string"
                  },
                  "queue_quantity2": {
                    "type": "string"
                  },
                  "queue_periodic_announce": {
                    "type": "string"
                  },
                  "queue_less_than": {
                    "type": "string"
                  },
                  "periodic_announce": {
                    "type": "string"
                  },
                  "joinempty": {
                    "type": "string"
                  },
                  "leavewhenempty": {
                    "type": "string"
                  },
                  "reportholdtime": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no"
                    ],
                    "default": "yes"
                  },
                  "ringinuse": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no"
                    ],
                    "default": "yes"
                  },
                  "memberdelay": {
                    "type": "integer"
                  },
                  "timeoutrestart": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no"
                    ],
                    "default": "yes"
                  },
                  "defaultrule": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "acw": {
                    "type": "boolean"
                  },
                  "acwTimeout": {
                    "type": "integer"
                  },
                  "dialActive": {
                    "type": "boolean"
                  },
                  "dialMethod": {
                    "type": "string",
                    "enum": [
                      "preview",
                      "progressive",
                      "power",
                      "predictive",
                      "booked"
                    ],
                    "default": "preview"
                  },
                  "dialLimitChannel": {
                    "type": "integer"
                  },
                  "dialLimitQueue": {
                    "type": "integer"
                  },
                  "dialPowerLevel": {
                    "type": "number",
                    "format": "float"
                  },
                  "dialPredictiveOptimization": {
                    "type": "string",
                    "enum": [
                      "agentBusyFactor",
                      "dropRate"
                    ],
                    "default": "agentBusyFactor"
                  },
                  "dialPredictiveOptimizationPercentage": {
                    "type": "number",
                    "format": "float"
                  },
                  "dialPredictiveInterval": {
                    "type": "integer"
                  },
                  "dialOriginateCallerIdName": {
                    "type": "string"
                  },
                  "dialOriginateCallerIdNumber": {
                    "type": "string"
                  },
                  "dialOriginateTimeout": {
                    "type": "integer"
                  },
                  "dialQueueOptions": {
                    "type": "string"
                  },
                  "dialQueueTimeout": {
                    "type": "integer"
                  },
                  "dialQueueProject": {
                    "type": "string"
                  },
                  "dialCongestionMaxRetry": {
                    "type": "integer"
                  },
                  "dialCongestionRetryFrequency": {
                    "type": "integer"
                  },
                  "dialBusyMaxRetry": {
                    "type": "integer"
                  },
                  "dialBusyRetryFrequency": {
                    "type": "integer"
                  },
                  "dialNoAnswerMaxRetry": {
                    "type": "integer"
                  },
                  "dialNoAnswerRetryFrequency": {
                    "type": "integer"
                  },
                  "dialGlobalMaxRetry": {
                    "type": "integer"
                  },
                  "dialTimezone": {
                    "type": "string"
                  },
                  "dialGlobalInterval": {
                    "type": "string"
                  },
                  "dialPrefix": {
                    "type": "string"
                  },
                  "dialCheckDuplicateType": {
                    "type": "string",
                    "enum": [
                      "always",
                      "never",
                      "onlyIfOpen"
                    ],
                    "default": "always"
                  },
                  "dialAMDActive": {
                    "type": "boolean"
                  },
                  "dialAMDInitialSilence": {
                    "type": "integer"
                  },
                  "dialAMDGreeting": {
                    "type": "integer"
                  },
                  "dialAMDAfterGreetingSilence": {
                    "type": "integer"
                  },
                  "dialAMDTotalAnalysisTime": {
                    "type": "integer"
                  },
                  "dialAMDMinWordLength": {
                    "type": "integer"
                  },
                  "dialAMDBetweenWordsSilence": {
                    "type": "integer"
                  },
                  "dialAMDMaximumNumberOfWords": {
                    "type": "integer"
                  },
                  "dialAMDSilenceThreshold": {
                    "type": "integer"
                  },
                  "dialAMDMaximumWordLength": {
                    "type": "integer"
                  },
                  "dialRecallMeTimeout": {
                    "type": "integer"
                  },
                  "dialRecallInQueue": {
                    "type": "boolean"
                  },
                  "dialOrderByScheduledAt": {
                    "type": "string",
                    "enum": [
                      "DESC",
                      "ASC"
                    ],
                    "default": "DESC"
                  },
                  "dialQueueProject2": {
                    "type": "string"
                  },
                  "dialAgiAfterHangupClient": {
                    "type": "boolean"
                  },
                  "dialAgiAfterHangupAgent": {
                    "type": "boolean"
                  },
                  "dialRandomLastDigitCallerIdNumber": {
                    "type": "integer"
                  },
                  "dialCutDigit": {
                    "type": "integer"
                  },
                  "dialNoSuchNumberMaxRetry": {
                    "type": "integer"
                  },
                  "dialNoSuchNumberRetryFrequency": {
                    "type": "integer"
                  },
                  "dialDropMaxRetry": {
                    "type": "integer"
                  },
                  "dialDropRetryFrequency": {
                    "type": "integer"
                  },
                  "dialAbandonedMaxRetry": {
                    "type": "integer"
                  },
                  "dialAbandonedRetryFrequency": {
                    "type": "integer"
                  },
                  "dialMachineMaxRetry": {
                    "type": "integer"
                  },
                  "dialMachineRetryFrequency": {
                    "type": "integer"
                  },
                  "dialAgentRejectMaxRetry": {
                    "type": "integer"
                  },
                  "dialAgentRejectRetryFrequency": {
                    "type": "integer"
                  },
                  "mandatoryDispositionPauseId": {
                    "type": "integer"
                  },
                  "mandatoryDisposition": {
                    "type": "boolean"
                  },
                  "dialPredictiveIntervalMaxThreshold": {
                    "type": "integer"
                  },
                  "dialPredictiveIntervalMinThreshold": {
                    "type": "integer"
                  },
                  "dialPreviewAutoRecallMe": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "name",
                  "type",
                  "strategy"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "VoiceQueue successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceQueue"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/queues/{id}": {
      "get": {
        "summary": "Gets a single Queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getVoiceQueueById",
        "tags": [
          "Voice Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceQueue to get"
          }
        ],
        "responses": {
          "200": {
            "description": "VoiceQueue with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceQueue"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateVoiceQueueById",
        "tags": [
          "Voice Queues"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new voiceQueue",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceQueue to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteVoiceQueueById",
        "tags": [
          "Voice Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceQueue to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/queues/{id}/hoppers": {
      "get": {
        "summary": "Gets queue hoppers",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getHoppers",
        "tags": [
          "Voice Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceQueue"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/queues/{id}/hopper_histories": {
      "get": {
        "summary": "Gets queue hopper histories",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getHopperHistories",
        "tags": [
          "Voice Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceQueue"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/queues/{id}/hopper_finals": {
      "get": {
        "summary": "Gets queue hopper finals",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getHopperFinals",
        "tags": [
          "Voice Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceQueue"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/queues/{id}/hopper_black": {
      "get": {
        "summary": "Gets queue hopper blacks",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getHopperBlacks",
        "tags": [
          "Voice Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceQueue"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/queues/{id}/teams": {
      "get": {
        "summary": "Gets queue team",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getTeams",
        "tags": [
          "Voice Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceQueue"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add teams to queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addTeams",
        "tags": [
          "Voice Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceQueue"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new voiceQueue",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Remove teams from a queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeTeams",
        "tags": [
          "Teams"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceQueue"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/queues/{id}/users": {
      "get": {
        "summary": "Gets queue agents",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getAgents",
        "tags": [
          "Voice Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceQueue"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add agents to queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addAgents",
        "tags": [
          "Voice Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceQueue"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new voiceQueue",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Removes agents from a queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeAgents",
        "tags": [
          "Voice Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceQueue"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/queues/{id}/profiles": {
      "get": {
        "summary": "Gets queue profiles",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getProfiles",
        "tags": [
          "Voice Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceQueue"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add profiles to queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addProfiles",
        "tags": [
          "Voice Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceQueue"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new voiceQueue",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Removes profiles from a queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeProfiles",
        "tags": [
          "Voice Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceQueue"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/queues/{id}/members": {
      "get": {
        "summary": "Gets queue members",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getMembers",
        "tags": [
          "Voice Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceQueue"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/queues/{id}/lists": {
      "get": {
        "summary": "Get queue lists",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getLists",
        "tags": [
          "Voice Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceQueue"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add lists to a queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addLists",
        "tags": [
          "Voice Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceQueue"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new voiceQueue",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Remove lists from a queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeLists",
        "tags": [
          "Voice Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceQueue"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/queues/{id}/blacklists": {
      "get": {
        "summary": "Get queue blacklists",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getBlackLists",
        "tags": [
          "Voice Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceQueue"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add blacklists to a queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addBlackLists",
        "tags": [
          "Voice Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceQueue"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new voiceQueue",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Remove blacklists from a queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeBlackLists",
        "tags": [
          "Voice Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceQueue"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/queues/clone": {
      "post": {
        "summary": "Clone an existing Queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "cloneVoiceQueue",
        "tags": [
          "Voice Queues"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new voiceQueue",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "VoiceQueue successfully cloned. Returns the cloned object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceQueue"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/queues/reports": {
      "get": {
        "summary": "Gets a list of Queue Reports",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllVoiceQueueReport",
        "tags": [
          "Voice Queue Reports"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Queue Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VoiceQueueReport"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Queue Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VoiceQueueReport"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/queues/reports/describe": {
      "get": {
        "summary": "Gets table info about Queue Reports",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeVoiceQueueReport",
        "tags": [
          "Voice Queue Reports"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/queues/reports/index": {
      "get": {
        "summary": "Get Voice Queues Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getVoiceQueuesReport",
        "tags": [
          "Voice Queue Reports"
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/queues/reports/{id}": {
      "get": {
        "summary": "Gets a single Queue Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getVoiceQueueReportById",
        "tags": [
          "Voice Queue Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceQueueReport to get"
          }
        ],
        "responses": {
          "200": {
            "description": "VoiceQueueReport with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceQueueReport"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/queues-groups": {
      "get": {
        "summary": "Gets a list of Queues Groups",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllVoiceQueuesGroup",
        "tags": [
          "Voice Queues Groups"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Queues Groups",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    },
                    "rows": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number"
                          },
                          "name": {
                            "type": "string"
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "updatedAt": {
                            "type": "string",
                            "format": "date-time"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "count": 3,
                  "rows": [
                    {
                      "id": 1,
                      "name": "MyVoiceQueuesGroup1",
                      "createdAt": "2023-07-31T14:55:58Z",
                      "updatedAt": "2023-07-31T14:55:58Z"
                    },
                    {
                      "id": 2,
                      "name": "MyVoiceQueuesGroup2",
                      "createdAt": "2023-07-31T15:55:58Z",
                      "updatedAt": "2023-07-31T15:55:58Z"
                    },
                    {
                      "id": 3,
                      "name": "MyVoiceQueuesGroup3",
                      "createdAt": "2023-07-31T16:55:58Z",
                      "updatedAt": "2023-07-31T16:55:58Z"
                    }
                  ]
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Queues Groups",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VoiceQueuesGroup"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Queues Group",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createVoiceQueuesGroup",
        "tags": [
          "Voice Queues Groups"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new voiceQueuesGroup",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "queues": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number"
                        },
                        "priority": {
                          "type": "number"
                        },
                        "timeout": {
                          "type": "number"
                        }
                      }
                    }
                  }
                },
                "required": [
                  "name"
                ]
              },
              "example": {
                "name": "MyVoiceQueuesGroup",
                "queues": [
                  {
                    "id": 1,
                    "priority": 10,
                    "timeout": 0
                  },
                  {
                    "id": 2,
                    "priority": 8,
                    "timeout": 20
                  },
                  {
                    "id": 3,
                    "priority": 6,
                    "timeout": 40
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "VoiceQueuesGroup successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceQueuesGroup"
                },
                "example": {
                  "id": 1,
                  "name": "MyVoiceQueuesGroup",
                  "createdAt": "2023-07-31T14:55:58Z",
                  "updatedAt": "2023-07-31T14:55:58Z"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/queues-groups/{id}": {
      "get": {
        "summary": "Gets a single Queues Group",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getVoiceQueuesGroupById",
        "tags": [
          "Voice Queues Groups"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceQueuesGroup to get"
          }
        ],
        "responses": {
          "200": {
            "description": "VoiceQueuesGroup with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number"
                    },
                    "name": {
                      "type": "string"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "queues": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number"
                          },
                          "priority": {
                            "type": "number"
                          },
                          "timeout": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "id": 1,
                  "name": "MyVoiceQueuesGroup",
                  "createdAt": "2023-07-31T14:55:58Z",
                  "updatedAt": "2023-07-31T14:55:58Z",
                  "queues": [
                    {
                      "id": 3,
                      "priority": 10,
                      "timeout": 0
                    },
                    {
                      "id": 7,
                      "priority": 9,
                      "timeout": 20
                    },
                    {
                      "id": 21,
                      "priority": 8,
                      "timeout": 40
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Voice Queues Groups",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateVoiceQueuesGroupById",
        "tags": [
          "Voice Queues Groups"
        ],
        "requestBody": {
          "required": true,
          "description": "data for updating an existing voiceQueuesGroup",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "queues": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number"
                        },
                        "priority": {
                          "type": "number"
                        },
                        "timeout": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              },
              "example": {
                "name": "MyVoiceQueuesGroup",
                "queues": [
                  {
                    "id": 1,
                    "priority": 10,
                    "timeout": 0
                  },
                  {
                    "id": 2,
                    "priority": 8,
                    "timeout": 20
                  },
                  {
                    "id": 3,
                    "priority": 6,
                    "timeout": 40
                  }
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceQueuesGroup to be updated"
          }
        ],
        "responses": {
          "200": {
            "description": "VoiceQueuesGroup successfully updated. Returns the updated object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceQueuesGroup"
                },
                "example": {
                  "id": 1,
                  "name": "MyVoiceQueuesGroup",
                  "createdAt": "2023-07-31T14:55:58Z",
                  "updatedAt": "2023-07-31T14:55:58Z"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Voice Queues Group",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteVoiceQueuesGroupById",
        "tags": [
          "Voice Queues Groups"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceQueuesGroup to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voiceQueuesLog": {
      "get": {
        "summary": "Gets a list of VoiceQueuesLogs",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllVoiceQueuesLog",
        "tags": [
          "voiceQueuesLog"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of VoiceQueuesLogs",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VoiceQueuesLog"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of VoiceQueuesLogs",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VoiceQueuesLog"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new VoiceQueuesLog",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createVoiceQueuesLog",
        "tags": [
          "voiceQueuesLog"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new voiceQueuesLog",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "time": {
                    "type": "string"
                  },
                  "callid": {
                    "type": "string"
                  },
                  "queuename": {
                    "type": "string"
                  },
                  "agent": {
                    "type": "string"
                  },
                  "event": {
                    "type": "string"
                  },
                  "data": {
                    "type": "string"
                  },
                  "data1": {
                    "type": "string"
                  },
                  "data2": {
                    "type": "string"
                  },
                  "data3": {
                    "type": "string"
                  },
                  "data4": {
                    "type": "string"
                  },
                  "data5": {
                    "type": "string"
                  },
                  "dtm": {
                    "type": "string"
                  }
                },
                "required": [
                  "callid",
                  "queuename",
                  "agent",
                  "event",
                  "data",
                  "data1",
                  "data2",
                  "data3",
                  "data4",
                  "data5",
                  "dtm"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "VoiceQueuesLog successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceQueuesLog"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voiceQueuesLog/{id}": {
      "get": {
        "summary": "Gets a single VoiceQueuesLog",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getVoiceQueuesLogById",
        "tags": [
          "voiceQueuesLog"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceQueuesLog to get"
          }
        ],
        "responses": {
          "200": {
            "description": "VoiceQueuesLog with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceQueuesLog"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing VoiceQueuesLog",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateVoiceQueuesLogById",
        "tags": [
          "voiceQueuesLog"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new voiceQueuesLog",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceQueuesLog to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing VoiceQueuesLog",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteVoiceQueuesLogById",
        "tags": [
          "voiceQueuesLog"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceQueuesLog to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/recordings": {
      "get": {
        "summary": "Gets a list of Recordings",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllVoiceRecording",
        "tags": [
          "Voice Recordings"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Recordings",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VoiceRecording"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Recordings",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VoiceRecording"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Recording",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createVoiceRecording",
        "tags": [
          "Voice Recordings"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new voiceRecording",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "format": {
                    "type": "string"
                  },
                  "uniqueid": {
                    "type": "string"
                  },
                  "channel": {
                    "type": "string"
                  },
                  "membername": {
                    "type": "string"
                  },
                  "calleridnum": {
                    "type": "string"
                  },
                  "calleridname": {
                    "type": "string"
                  },
                  "connectedlinenum": {
                    "type": "string"
                  },
                  "connectedlinename": {
                    "type": "string"
                  },
                  "accountcode": {
                    "type": "string"
                  },
                  "context": {
                    "type": "string"
                  },
                  "exten": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "rating": {
                    "type": "integer"
                  },
                  "queue": {
                    "type": "string"
                  },
                  "userDisposition": {
                    "type": "string"
                  },
                  "userSecondDisposition": {
                    "type": "string"
                  },
                  "userThirdDisposition": {
                    "type": "string"
                  },
                  "location": {
                    "type": "string"
                  },
                  "transcribeName": {
                    "type": "string"
                  },
                  "transcribeStatus": {
                    "type": "string"
                  },
                  "fileUri": {
                    "type": "string"
                  },
                  "fileText": {
                    "type": "string"
                  },
                  "failureReason": {
                    "type": "string"
                  },
                  "sentiment": {
                    "type": "string"
                  },
                  "sPositive": {
                    "type": "number",
                    "format": "float"
                  },
                  "sNegative": {
                    "type": "number",
                    "format": "float"
                  },
                  "sNeutral": {
                    "type": "number",
                    "format": "float"
                  },
                  "sMixed": {
                    "type": "number",
                    "format": "float"
                  },
                  "tempSentiment": {
                    "type": "boolean"
                  },
                  "createdAt": {
                    "type": "string"
                  },
                  "updatedAt": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "VoiceRecording successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceRecording"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/recordings/describe": {
      "get": {
        "summary": "Gets table info about Recordings",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeVoiceRecording",
        "tags": [
          "Voice Recordings"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/recordings/{id}": {
      "get": {
        "summary": "Gets a single Recording",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getVoiceRecordingById",
        "tags": [
          "Voice Recordings"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceRecording to get"
          }
        ],
        "responses": {
          "200": {
            "description": "VoiceRecording with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceRecording"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Recording",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateVoiceRecordingById",
        "tags": [
          "Voice Recordings"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new voiceRecording",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceRecording to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Delete voice recording",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "destroy",
        "tags": [
          "Voice Recordings"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceRecording"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/recordings/{id}/download": {
      "get": {
        "summary": "Download Recording",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "download",
        "tags": [
          "Voice Recordings"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceRecording"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/recordings/{id}/jobs": {
      "get": {
        "summary": "View transcription jobs related to this voice recording",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "download",
        "tags": [
          "Voice Recordings",
          "Transcription Jobs"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceRecording"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/recordings/{id}/download/{channel}": {
      "get": {
        "summary": "Download Recording by Channel",
        "operationId": "downloadChannel",
        "tags": [
          "Voice Recordings"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceRecording"
          },
          {
            "in": "path",
            "name": "Numeric index of channel to download. 0 is the first channel. 1 is the second channel. 0 is the client audio channel. 1 is the agent audio channel.",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Channel to download"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/recordings/{id}/downloads": {
      "get": {
        "summary": "Download Recording",
        "operationId": "downloads",
        "tags": [
          "Voice Recordings"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceRecording"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/recordings/{id}/transcribe": {
      "get": {
        "deprecated": true,
        "summary": "Run Transcribe Recording",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "downloadTranscribe",
        "tags": [
          "Voice Recordings"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceRecording"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "deprecated": true,
        "summary": "Run Transcribe Recording",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "runTranscribe",
        "tags": [
          "Voice Recordings"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceRecording"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new voiceRecording",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/voice/recordings/deletemany": {
      "post": {
        "summary": "Delete multiple voice recordings",
        "description": "Delete multiple voice recordings",
        "requestBody": {
          "required": true,
          "description": "data for deleting multiple voice recordings",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ids": {
                    "type": "array",
                    "description": "The ids of the Voice Recordings to delete",
                    "items": {
                      "type": "integer"
                    }
                  }
                },
                "required": [
                  "ids"
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/transfers/reports": {
      "get": {
        "summary": "Gets a list of Transfer Reports",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllVoiceTransferReport",
        "tags": [
          "Voice Transfer Reports"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Transfer Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VoiceTransferReport"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Transfer Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VoiceTransferReport"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Transfer Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createVoiceTransferReport",
        "tags": [
          "Voice Transfer Reports"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new voiceTransferReport",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "blind",
                      "attended"
                    ],
                    "default": "blind"
                  },
                  "result": {
                    "type": "string"
                  },
                  "transfererchannel": {
                    "type": "string"
                  },
                  "transferercalleridnum": {
                    "type": "string"
                  },
                  "transferercalleridname": {
                    "type": "string"
                  },
                  "transfererconnectedlinenum": {
                    "type": "string"
                  },
                  "transfererconnectedlinename": {
                    "type": "string"
                  },
                  "transfereraccountcode": {
                    "type": "string"
                  },
                  "transferercontext": {
                    "type": "string"
                  },
                  "transfererexten": {
                    "type": "string"
                  },
                  "transfererlinkedid": {
                    "type": "string"
                  },
                  "transfereechannel": {
                    "type": "string"
                  },
                  "transfereecalleridnum": {
                    "type": "string"
                  },
                  "transfereecalleridname": {
                    "type": "string"
                  },
                  "transfereeconnectedlinenum": {
                    "type": "string"
                  },
                  "transfereeconnectedlinename": {
                    "type": "string"
                  },
                  "transfereeaccountcode": {
                    "type": "string"
                  },
                  "transfereecontext": {
                    "type": "string"
                  },
                  "transfereeexten": {
                    "type": "string"
                  },
                  "transfereelinkedid": {
                    "type": "string"
                  },
                  "isexternal": {
                    "type": "string",
                    "enum": [
                      "Yes",
                      "No"
                    ],
                    "default": "Yes"
                  },
                  "context": {
                    "type": "string"
                  },
                  "extension": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "VoiceTransferReport successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceTransferReport"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/transfers/reports/describe": {
      "get": {
        "summary": "Gets table info about Transfer Reports",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeTransferRecords",
        "tags": [
          "Voice Transfer Reports"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice/transfers/reports/{id}": {
      "get": {
        "summary": "Gets a single Transfer Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getVoiceTransferReportById",
        "tags": [
          "Voice Transfer Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceTransferReport to get"
          }
        ],
        "responses": {
          "200": {
            "description": "VoiceTransferReport with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceTransferReport"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Transfer Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateVoiceTransferReportById",
        "tags": [
          "Voice Transfer Reports"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new voiceTransferReport",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceTransferReport to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Transfer Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteVoiceTransferReportById",
        "tags": [
          "Voice Transfer Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the VoiceTransferReport to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/webbar/originate": {
      "post": {
        "summary": "Originate a new call",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "webBarOriginate",
        "tags": [
          "WebBar"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "callNumber": {
                    "type": "string"
                  },
                  "userId": {
                    "type": "number"
                  },
                  "callerId": {
                    "type": "string"
                  },
                  "callbackUrl": {
                    "type": "string"
                  }
                },
                "required": [
                  "callNumber",
                  "userId",
                  "callerId",
                  "callbackUrl"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "web call originated successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/webbar/hangup": {
      "post": {
        "summary": "Hangup one or more calls",
        "description": "If no sessionId or uniqueId body parameters are provided, all calls will be hung up.\n",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "webBarHangup",
        "tags": [
          "WebBar"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "sessionId": {
                    "type": "string"
                  },
                  "uniqueId": {
                    "type": "string"
                  },
                  "userId": {
                    "type": "number"
                  }
                },
                "required": [
                  "userId"
                ],
                "oneOf": [
                  {
                    "properties": {
                      "sessionId": {
                        "type": "string",
                        "required": [
                          "sessionId"
                        ]
                      },
                      "uniqueId": {
                        "type": "string",
                        "required": [
                          "uniqueId"
                        ]
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Hangup success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/webbar/answer": {
      "post": {
        "summary": "Answer a call",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "webBarAnswer",
        "tags": [
          "WebBar"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "sessionId": {
                    "type": "string"
                  },
                  "uniqueId": {
                    "type": "string"
                  },
                  "userId": {
                    "type": "number"
                  }
                },
                "required": [
                  "userId"
                ],
                "oneOf": [
                  {
                    "properties": {
                      "sessionId": {
                        "type": "string",
                        "required": [
                          "sessionId"
                        ]
                      },
                      "uniqueId": {
                        "type": "string",
                        "required": [
                          "uniqueId"
                        ]
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Answer success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/webbar/hold": {
      "post": {
        "summary": "Put a call on hold",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "webBarHold",
        "tags": [
          "WebBar"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "sessionId": {
                    "type": "string"
                  },
                  "uniqueId": {
                    "type": "string"
                  },
                  "userId": {
                    "type": "number"
                  }
                },
                "required": [
                  "userId"
                ],
                "oneOf": [
                  {
                    "properties": {
                      "sessionId": {
                        "type": "string",
                        "required": [
                          "sessionId"
                        ]
                      },
                      "uniqueId": {
                        "type": "string",
                        "required": [
                          "uniqueId"
                        ]
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Hold success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/webbar/unhold": {
      "post": {
        "summary": "Reactivate a call on hold",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "webBarUnhold",
        "tags": [
          "WebBar"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "sessionId": {
                    "type": "string"
                  },
                  "uniqueId": {
                    "type": "string"
                  },
                  "userId": {
                    "type": "number"
                  }
                },
                "required": [
                  "userId"
                ],
                "oneOf": [
                  {
                    "required": [
                      "sessionId"
                    ]
                  },
                  {
                    "required": [
                      "uniqueId"
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Unhold success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/webbar/calls": {
      "post": {
        "summary": "Retrieve the list of active calls linked to an agent",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "webBarCalls",
        "tags": [
          "WebBar"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": {
                    "type": "number"
                  }
                },
                "required": [
                  "userId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "list of calls",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/webbar/transfer": {
      "post": {
        "summary": "Transfer a call (blind or attended)",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "webBarTransfer",
        "tags": [
          "WebBar"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": {
                    "type": "number"
                  },
                  "sessionId": {
                    "type": "string"
                  },
                  "transferNumber": {
                    "type": "string"
                  },
                  "transferUniqueId": {
                    "type": "string"
                  },
                  "uniqueId": {
                    "type": "string"
                  }
                },
                "required": [
                  "userId"
                ],
                "allOf": [
                  {
                    "oneOf": [
                      {
                        "properties": {
                          "transferNumber": {
                            "type": "string",
                            "required": [
                              "transferNumber"
                            ]
                          },
                          "transferUniqueId": {
                            "type": "string",
                            "required": [
                              "transferUniqueId"
                            ]
                          }
                        }
                      }
                    ]
                  },
                  {
                    "oneOf": [
                      {
                        "properties": {
                          "sessionId": {
                            "type": "string",
                            "required": [
                              "sessionId"
                            ]
                          },
                          "uniqueId": {
                            "type": "string",
                            "required": [
                              "uniqueId"
                            ]
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Transfer success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/webbar/play-dtmf-asterisk": {
      "post": {
        "summary": "Play a single digit DTMF dial tone",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "webBarPlayDTMFAsterisk",
        "tags": [
          "WebBar"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "channel": {
                    "type": "string"
                  },
                  "digit": {
                    "type": "string"
                  },
                  "duration": {
                    "type": "number"
                  },
                  "receive": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no"
                    ]
                  }
                },
                "required": [
                  "channel",
                  "digit"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Play DTMF success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/webbar/send-dtmf": {
      "post": {
        "summary": "Send one or more DTMF dial tone",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "webBarSendDTMF",
        "tags": [
          "WebBar"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "digits": {
                    "type": "string"
                  },
                  "duration": {
                    "type": "number"
                  },
                  "sessionId": {
                    "type": "string"
                  },
                  "uniqueId": {
                    "type": "string"
                  },
                  "userId": {
                    "type": "number"
                  }
                },
                "required": [
                  "digits",
                  "userId"
                ],
                "allOf": [
                  {
                    "oneOf": [
                      {
                        "properties": {
                          "sessionId": {
                            "type": "string",
                            "required": [
                              "sessionId"
                            ]
                          },
                          "uniqueId": {
                            "type": "string",
                            "required": [
                              "uniqueId"
                            ]
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Send DTMF success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/webbar/conference": {
      "post": {
        "summary": "Create a 3-way conference call",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "webBarConference",
        "tags": [
          "WebBar"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": {
                    "type": "number"
                  }
                },
                "required": [
                  "userId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Conference success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/whatsapp/accounts": {
      "get": {
        "summary": "Gets a list of Accounts",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllWhatsappAccount",
        "tags": [
          "Whatsapp Accounts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Accounts",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WhatsappAccount"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Accounts",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WhatsappAccount"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createWhatsappAccount",
        "tags": [
          "Whatsapp Accounts"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new whatsappAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "key": {
                    "type": "string"
                  },
                  "remote": {
                    "type": "string"
                  },
                  "token": {
                    "type": "string"
                  },
                  "phone": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "twilio"
                    ],
                    "default": "twilio"
                  },
                  "accountSid": {
                    "type": "string"
                  },
                  "authToken": {
                    "type": "string"
                  },
                  "notificationTemplate": {
                    "type": "string"
                  },
                  "notificationSound": {
                    "type": "boolean"
                  },
                  "notificationShake": {
                    "type": "boolean"
                  },
                  "waitForTheAssignedAgent": {
                    "type": "integer"
                  },
                  "waitForTheAssignedQueue": {
                    "type": "integer"
                  },
                  "queueTransfer": {
                    "type": "boolean"
                  },
                  "queueTransferTimeout": {
                    "type": "integer"
                  },
                  "agentTransfer": {
                    "type": "boolean"
                  },
                  "agentTransferTimeout": {
                    "type": "integer"
                  },
                  "mandatoryDispositionPauseId": {
                    "type": "integer"
                  },
                  "mandatoryDisposition": {
                    "type": "boolean"
                  },
                  "description": {
                    "type": "string"
                  },
                  "aiAssistantId": {
                    "type": "string"
                  },
                  "aiProviderId": {
                    "type": "integer"
                  }
                },
                "required": [
                  "name",
                  "key",
                  "remote"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "WhatsappAccount successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WhatsappAccount"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/whatsapp/accounts/describe": {
      "get": {
        "summary": "Gets table info about Accounts",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeWhatsappAccount",
        "tags": [
          "Whatsapp Accounts"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/whatsapp/accounts/{id}": {
      "get": {
        "summary": "Gets a single Account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getWhatsappAccountById",
        "tags": [
          "Whatsapp Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the WhatsappAccount to get"
          }
        ],
        "responses": {
          "200": {
            "description": "WhatsappAccount with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WhatsappAccount"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateWhatsappAccountById",
        "tags": [
          "Whatsapp Accounts"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new whatsappAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the WhatsappAccount to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteWhatsappAccountById",
        "tags": [
          "Whatsapp Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the WhatsappAccount to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/whatsapp/accounts/{id}/dispositions": {
      "get": {
        "summary": "Gets account dispositions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getDispositions",
        "tags": [
          "Whatsapp Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the WhatsappAccount"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates new disposition",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addDisposition",
        "tags": [
          "Whatsapp Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the WhatsappAccount"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new whatsappAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "key": {
                    "type": "string"
                  },
                  "remote": {
                    "type": "string"
                  },
                  "token": {
                    "type": "string"
                  },
                  "phone": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "twilio"
                    ],
                    "default": "twilio"
                  },
                  "accountSid": {
                    "type": "string"
                  },
                  "authToken": {
                    "type": "string"
                  },
                  "notificationTemplate": {
                    "type": "string"
                  },
                  "notificationSound": {
                    "type": "boolean"
                  },
                  "notificationShake": {
                    "type": "boolean"
                  },
                  "waitForTheAssignedAgent": {
                    "type": "integer"
                  },
                  "waitForTheAssignedQueue": {
                    "type": "integer"
                  },
                  "queueTransfer": {
                    "type": "boolean"
                  },
                  "queueTransferTimeout": {
                    "type": "integer"
                  },
                  "agentTransfer": {
                    "type": "boolean"
                  },
                  "agentTransferTimeout": {
                    "type": "integer"
                  },
                  "mandatoryDispositionPauseId": {
                    "type": "integer"
                  },
                  "mandatoryDisposition": {
                    "type": "boolean"
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "key",
                  "remote"
                ]
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Removes dispositions from account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeDispositions",
        "tags": [
          "Whatsapp Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the WhatsappAccount"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/whatsapp/accounts/{id}/canned_answers": {
      "get": {
        "summary": "Gets account canned answers",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getAnswers",
        "tags": [
          "Whatsapp Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the WhatsappAccount"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates new canned answer",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addAnswer",
        "tags": [
          "Whatsapp Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the WhatsappAccount"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new whatsappAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "key": {
                    "type": "string"
                  },
                  "remote": {
                    "type": "string"
                  },
                  "token": {
                    "type": "string"
                  },
                  "phone": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "twilio"
                    ],
                    "default": "twilio"
                  },
                  "accountSid": {
                    "type": "string"
                  },
                  "authToken": {
                    "type": "string"
                  },
                  "notificationTemplate": {
                    "type": "string"
                  },
                  "notificationSound": {
                    "type": "boolean"
                  },
                  "notificationShake": {
                    "type": "boolean"
                  },
                  "waitForTheAssignedAgent": {
                    "type": "integer"
                  },
                  "waitForTheAssignedQueue": {
                    "type": "integer"
                  },
                  "queueTransfer": {
                    "type": "boolean"
                  },
                  "queueTransferTimeout": {
                    "type": "integer"
                  },
                  "agentTransfer": {
                    "type": "boolean"
                  },
                  "agentTransferTimeout": {
                    "type": "integer"
                  },
                  "mandatoryDispositionPauseId": {
                    "type": "integer"
                  },
                  "mandatoryDisposition": {
                    "type": "boolean"
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "key",
                  "remote"
                ]
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Removes canned answers from account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeAnswers",
        "tags": [
          "Whatsapp Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the WhatsappAccount"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/whatsapp/accounts/{id}/users": {
      "get": {
        "summary": "Gets agents from whatsapp account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getAgents",
        "tags": [
          "Whatsapp Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the WhatsappAccount"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add agents to a whatsapp account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addAgents",
        "tags": [
          "Whatsapp Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the WhatsappAccount"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new whatsappAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Removes agents from a whatsapp account",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeAgents",
        "tags": [
          "Whatsapp Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the WhatsappAccount"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/whatsapp/accounts/{id}/applications": {
      "get": {
        "summary": "Gets account applications",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getApplications",
        "tags": [
          "Whatsapp Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the WhatsappAccount"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates new applications",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addApplications",
        "tags": [
          "Whatsapp Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the WhatsappAccount"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new whatsappAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "key": {
                    "type": "string"
                  },
                  "remote": {
                    "type": "string"
                  },
                  "token": {
                    "type": "string"
                  },
                  "phone": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "twilio"
                    ],
                    "default": "twilio"
                  },
                  "accountSid": {
                    "type": "string"
                  },
                  "authToken": {
                    "type": "string"
                  },
                  "notificationTemplate": {
                    "type": "string"
                  },
                  "notificationSound": {
                    "type": "boolean"
                  },
                  "notificationShake": {
                    "type": "boolean"
                  },
                  "waitForTheAssignedAgent": {
                    "type": "integer"
                  },
                  "waitForTheAssignedQueue": {
                    "type": "integer"
                  },
                  "queueTransfer": {
                    "type": "boolean"
                  },
                  "queueTransferTimeout": {
                    "type": "integer"
                  },
                  "agentTransfer": {
                    "type": "boolean"
                  },
                  "agentTransferTimeout": {
                    "type": "integer"
                  },
                  "mandatoryDispositionPauseId": {
                    "type": "integer"
                  },
                  "mandatoryDisposition": {
                    "type": "boolean"
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "key",
                  "remote"
                ]
              }
            }
          }
        }
      }
    },
    "/whatsapp/accounts/{id}/notify": {
      "post": {
        "summary": "Notify new message",
        "operationId": "notify",
        "tags": [
          "Whatsapp Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the WhatsappAccount"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new whatsappAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/whatsapp/accounts/{id}/send": {
      "post": {
        "summary": "Send new whatsapp message",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "send",
        "tags": [
          "Whatsapp Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the WhatsappAccount"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new whatsappAccount",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/whatsapp/applications": {
      "get": {
        "summary": "Gets a list of Applications",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllWhatsappApplication",
        "tags": [
          "Whatsapp Applications"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Applications",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WhatsappApplication"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Applications",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WhatsappApplication"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Application",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createWhatsappApplication",
        "tags": [
          "Whatsapp Applications"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new whatsappApplication",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "priority": {
                    "type": "integer"
                  },
                  "app": {
                    "type": "string"
                  },
                  "appdata": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "interval": {
                    "type": "string"
                  }
                },
                "required": [
                  "priority",
                  "app"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "WhatsappApplication successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WhatsappApplication"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/whatsapp/applications/{id}": {
      "get": {
        "summary": "Gets a single Application",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getWhatsappApplicationById",
        "tags": [
          "Whatsapp Applications"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the WhatsappApplication to get"
          }
        ],
        "responses": {
          "200": {
            "description": "WhatsappApplication with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WhatsappApplication"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Application",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateWhatsappApplicationById",
        "tags": [
          "Whatsapp Applications"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new whatsappApplication",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the WhatsappApplication to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Application",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteWhatsappApplicationById",
        "tags": [
          "Whatsapp Applications"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the WhatsappApplication to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/whatsapp/interactions": {
      "get": {
        "summary": "Gets a list of Interactions",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllWhatsappInteraction",
        "tags": [
          "Whatsapp Interactions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Interactions",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WhatsappInteraction"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Interactions",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WhatsappInteraction"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Interaction",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createWhatsappInteraction",
        "tags": [
          "Whatsapp Interactions"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new whatsappInteraction",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "closed": {
                    "type": "boolean"
                  },
                  "closedAt": {
                    "type": "string"
                  },
                  "disposition": {
                    "type": "string"
                  },
                  "secondDisposition": {
                    "type": "string"
                  },
                  "thirdDisposition": {
                    "type": "string"
                  },
                  "note": {
                    "type": "string"
                  },
                  "phone": {
                    "type": "string"
                  },
                  "read1stAt": {
                    "type": "string"
                  },
                  "firstMsgDirection": {
                    "type": "string",
                    "enum": [
                      "in",
                      "out"
                    ],
                    "default": "in"
                  },
                  "lastMsgAt": {
                    "type": "string"
                  },
                  "lastMsgDirection": {
                    "type": "string",
                    "enum": [
                      "in",
                      "out"
                    ],
                    "default": "in"
                  },
                  "autoreplyExecuted": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "firstMsgDirection",
                  "lastMsgDirection"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "WhatsappInteraction successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WhatsappInteraction"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/whatsapp/interactions/describe": {
      "get": {
        "summary": "Gets table info about Interactions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeWhatsappInteraction",
        "tags": [
          "Whatsapp Interactions"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/whatsapp/interactions/counters": {
      "get": {
        "summary": "Gets counters info about Interactions",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "tags": [
          "Whatsapp Interactions"
        ],
        "operationId": "countWhatsappInteraction",
        "parameters": [
          {
            "in": "query",
            "name": "WhatsappAccountId",
            "schema": {
              "type": "integer"
            },
            "description": "Filter by WhatsappAccountId"
          },
          {
            "in": "query",
            "name": "createdAt.gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "This stands for 'greater or equal'. It select all the records created after the date specified.",
            "example": "2022-01-01-T00:00:00Z"
          },
          {
            "in": "query",
            "name": "createdAt.lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "This stands for 'less or equal'. It select all the records created before the date specified.",
            "example": "2022-01-01-T00:00:00Z"
          }
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve counters informations grouped by WhatsappAccountId",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "results count"
                    },
                    "rows": {
                      "description": "WhatsappInteraction counters",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Counter"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/whatsapp/interactions/{id}": {
      "get": {
        "summary": "Gets a single Interaction",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getWhatsappInteractionById",
        "tags": [
          "Whatsapp Interactions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the WhatsappInteraction to get"
          }
        ],
        "responses": {
          "200": {
            "description": "WhatsappInteraction with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WhatsappInteraction"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Interaction",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateWhatsappInteractionById",
        "tags": [
          "Whatsapp Interactions"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new whatsappInteraction",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the WhatsappInteraction to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Interaction",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteWhatsappInteractionById",
        "tags": [
          "Whatsapp Interactions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the WhatsappInteraction to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/whatsapp/interactions/{id}/messages": {
      "get": {
        "summary": "Gets interaction messages",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getMessages",
        "tags": [
          "Whatsapp Interactions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the WhatsappInteraction"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates new messages",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addMessage",
        "tags": [
          "Whatsapp Interactions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the WhatsappInteraction"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new whatsappInteraction",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "closed": {
                    "type": "boolean"
                  },
                  "closedAt": {
                    "type": "string"
                  },
                  "disposition": {
                    "type": "string"
                  },
                  "secondDisposition": {
                    "type": "string"
                  },
                  "thirdDisposition": {
                    "type": "string"
                  },
                  "note": {
                    "type": "string"
                  },
                  "phone": {
                    "type": "string"
                  },
                  "read1stAt": {
                    "type": "string"
                  },
                  "firstMsgDirection": {
                    "type": "string",
                    "enum": [
                      "in",
                      "out"
                    ],
                    "default": "in"
                  },
                  "lastMsgAt": {
                    "type": "string"
                  },
                  "lastMsgDirection": {
                    "type": "string",
                    "enum": [
                      "in",
                      "out"
                    ],
                    "default": "in"
                  }
                },
                "required": [
                  "firstMsgDirection",
                  "lastMsgDirection"
                ]
              }
            }
          }
        }
      }
    },
    "/whatsapp/interactions/{id}/download": {
      "get": {
        "summary": "Gets interaction",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "download",
        "tags": [
          "Whatsapp Interactions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the WhatsappInteraction"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/whatsapp/interactions/{id}/tags": {
      "post": {
        "summary": "Add tags to the interaction",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addTags",
        "tags": [
          "Whatsapp Interactions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the WhatsappInteraction"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new whatsappInteraction",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Removes tags from interaction",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeTags",
        "tags": [
          "Whatsapp Interactions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the WhatsappInteraction"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/whatsapp/messages": {
      "get": {
        "summary": "Gets a list of Whatsapp messages",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllWhatsappMessage",
        "tags": [
          "Whatsapp Messages"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Whatsapp messages",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WhatsappMessage"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Whatsapp messages",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WhatsappMessage"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Whatsapp message",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createWhatsappMessage",
        "tags": [
          "Whatsapp Messages"
        ],
        "requestBody": {
          "required": true,
          "description": "Data required to create a new WhatsApp message",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWhatsappMessage"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "WhatsappMessage successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WhatsappMessage"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/whatsapp/messages/describe": {
      "get": {
        "summary": "Gets table info about Messages",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeWhatsappMessage",
        "tags": [
          "Whatsapp Messages"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/whatsapp/messages/{id}": {
      "get": {
        "summary": "Gets a single Message",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getWhatsappMessageById",
        "tags": [
          "Whatsapp Messages"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the WhatsappMessage to get"
          }
        ],
        "responses": {
          "200": {
            "description": "WhatsappMessage with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WhatsappMessage"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Message",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateWhatsappMessageById",
        "tags": [
          "Whatsapp Messages"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new whatsappMessage",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the WhatsappMessage to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Message",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteWhatsappMessageById",
        "tags": [
          "Whatsapp Messages"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the WhatsappMessage to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/whatsapp/messages/{id}/status": {
      "post": {
        "summary": "Receive message status",
        "operationId": "status",
        "tags": [
          "Whatsapp Accounts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the WhatsappMessage"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new whatsappMessage",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/whatsapp/messages/{id}/accept": {
      "put": {
        "summary": "Accepts message",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "accept",
        "tags": [
          "Whatsapp Messages"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the WhatsappMessage"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new whatsappMessage",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/whatsapp/messages/{id}/reject": {
      "put": {
        "summary": "Rejects message",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "reject",
        "tags": [
          "Whatsapp Messages"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the WhatsappMessage"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new whatsappMessage",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/whatsapp/queues": {
      "get": {
        "summary": "Gets a list of Queues",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllWhatsappQueue",
        "tags": [
          "Whatsapp Queues"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Queues",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WhatsappQueue"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Queues",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WhatsappQueue"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createWhatsappQueue",
        "tags": [
          "Whatsapp Queues"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new whatsappQueue",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "timeout": {
                    "type": "integer"
                  },
                  "strategy": {
                    "type": "string",
                    "enum": [
                      "rrmemory",
                      "beepall",
                      "roundrobin"
                    ],
                    "default": "rrmemory"
                  },
                  "description": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "WhatsappQueue successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WhatsappQueue"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/whatsapp/queues/describe": {
      "get": {
        "summary": "Gets table info about Queues",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeWhatsappQueue",
        "tags": [
          "Whatsapp Queues"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/whatsapp/queues/{id}": {
      "get": {
        "summary": "Gets a single Queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getWhatsappQueueById",
        "tags": [
          "Whatsapp Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the WhatsappQueue to get"
          }
        ],
        "responses": {
          "200": {
            "description": "WhatsappQueue with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WhatsappQueue"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateWhatsappQueueById",
        "tags": [
          "Whatsapp Queues"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new whatsappQueue",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the WhatsappQueue to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteWhatsappQueueById",
        "tags": [
          "Whatsapp Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the WhatsappQueue to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/whatsapp/queues/{id}/members": {
      "get": {
        "summary": "GetMembers",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getMembers",
        "tags": [
          "Whatsapp Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the WhatsappQueue"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/whatsapp/queues/{id}/teams": {
      "get": {
        "summary": "Gets queues list",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getTeams",
        "tags": [
          "Whatsapp Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the WhatsappQueue"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add teams to a queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addTeams",
        "tags": [
          "Whatsapp Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the WhatsappQueue"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new whatsappQueue",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Remove teams from a queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeTeams",
        "tags": [
          "Teams"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the WhatsappQueue"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/whatsapp/queues/{id}/users": {
      "get": {
        "summary": "Gets queue agents",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getAgents",
        "tags": [
          "Whatsapp Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the WhatsappQueue"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add agents to a queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addAgents",
        "tags": [
          "Whatsapp Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the WhatsappQueue"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new whatsappQueue",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Removes agents from a queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeAgents",
        "tags": [
          "Whatsapp Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the WhatsappQueue"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/whatsapp/queues/{id}/profiles": {
      "get": {
        "summary": "Gets queue profiles",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getProfiles",
        "tags": [
          "Whatsapp Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the WhatsappQueue"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Add profiles to a queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "addProfiles",
        "tags": [
          "Whatsapp Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the WhatsappQueue"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "required": true,
          "description": "data for creating new whatsappQueue",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Removes profiles from a queue",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "removeProfiles",
        "tags": [
          "Whatsapp Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the WhatsappQueue"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/whatsapp/reports/queue": {
      "get": {
        "summary": "Gets a list of Whatsapp Queue Reports",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllWhatsappQueueReport",
        "tags": [
          "Whatsapp Queue Reports"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Whatsapp Queue Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WhatsappQueueReport"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Whatsapp Queue Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WhatsappQueueReport"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Whatsapp Queue Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createWhatsappQueueReport",
        "tags": [
          "Whatsapp Queue Reports"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new whatsappQueueReport",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "uniqueid": {
                    "type": "string"
                  },
                  "from": {
                    "type": "string"
                  },
                  "joinAt": {
                    "type": "string"
                  },
                  "leaveAt": {
                    "type": "string"
                  },
                  "acceptAt": {
                    "type": "string"
                  },
                  "exitAt": {
                    "type": "string"
                  },
                  "reason": {
                    "type": "string"
                  }
                },
                "required": [
                  "uniqueid"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "WhatsappQueueReport successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WhatsappQueueReport"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/whatsapp/reports/queue/describe": {
      "get": {
        "summary": "Gets table info about Whatsapp Queue Reports",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeWhatsappQueueReport",
        "tags": [
          "Whatsapp Queue Reports"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/whatsapp/reports/queue/{id}": {
      "get": {
        "summary": "Gets a single Whatsapp Queue Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getWhatsappQueueReportById",
        "tags": [
          "Whatsapp Queue Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the WhatsappQueueReport to get"
          }
        ],
        "responses": {
          "200": {
            "description": "WhatsappQueueReport with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WhatsappQueueReport"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Whatsapp Queue Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateWhatsappQueueReportById",
        "tags": [
          "Whatsapp Queue Reports"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new whatsappQueueReport",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the WhatsappQueueReport to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Whatsapp Queue Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteWhatsappQueueReportById",
        "tags": [
          "Whatsapp Queue Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the WhatsappQueueReport to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/whatsapp/reports/transfer": {
      "get": {
        "summary": "Gets a list of Whatsapp Transfer Reports",
        "description": "List paged, sorted, filtered items",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "listAllWhatsappTransferReport",
        "tags": [
          "Whatsapp Transfer Reports"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fieldsParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Entire collection of Whatsapp Transfer Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total. If there are 50 records in total, with a offset of 5 and a limit of 25, the returned Content-Range header would be '5-30/50'",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WhatsappTransferReport"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Partial (paged) collection of Whatsapp Transfer Reports",
            "headers": {
              "Content-Range": {
                "description": "paging data in the form start - end / total",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WhatsappTransferReport"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Creates a new Whatsapp Transfer Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "createWhatsappTransferReport",
        "tags": [
          "Whatsapp Transfer Reports"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new whatsappTransferReport",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "uniqueid": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "account",
                      "agent",
                      "queue"
                    ],
                    "default": "account"
                  },
                  "transferredAt": {
                    "type": "string"
                  }
                },
                "required": [
                  "uniqueid",
                  "type"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "WhatsappTransferReport successfully created. Returns the created object representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WhatsappTransferReport"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/whatsapp/reports/transfer/describe": {
      "get": {
        "summary": "Gets table info about Whatsapp Transfer Reports",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "describeWhatsappTransferReport",
        "tags": [
          "Whatsapp Transfer Reports"
        ],
        "responses": {
          "200": {
            "description": "succesfully retrieve the table info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/whatsapp/reports/transfer/{id}": {
      "get": {
        "summary": "Gets a single Whatsapp Transfer Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "getWhatsappTransferReportById",
        "tags": [
          "Whatsapp Transfer Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the WhatsappTransferReport to get"
          }
        ],
        "responses": {
          "200": {
            "description": "WhatsappTransferReport with matching id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WhatsappTransferReport"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update an existing Whatsapp Transfer Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "updateWhatsappTransferReportById",
        "tags": [
          "Whatsapp Transfer Reports"
        ],
        "requestBody": {
          "required": true,
          "description": "data for creating new whatsappTransferReport",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the WhatsappTransferReport to be updated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Destroy an existing Whatsapp Transfer Report",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "motionApiKey": []
          },
          {
            "googleId": []
          }
        ],
        "operationId": "deleteWhatsappTransferReportById",
        "tags": [
          "Whatsapp Transfer Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric id of the WhatsappTransferReport to be deleted"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      },
      "basicAuth": {
        "type": "http",
        "scheme": "basic"
      },
      "motionApiKey": {
        "name": "apikey",
        "type": "apiKey",
        "in": "query"
      },
      "googleId": {
        "type": "openIdConnect",
        "openIdConnectUrl": "https://accounts.google.com/.well-known/openid-configuration"
      }
    },
    "schemas": {
      "User": {
        "title": "User",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "isSuperAdmin": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "array"
              },
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "fullname": {
            "type": "string"
          },
          "alias": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": [
              "admin",
              "user",
              "agent",
              "telephone"
            ]
          },
          "password": {
            "type": "string"
          },
          "provider": {
            "type": "string",
            "nullable": true,
            "default": "local"
          },
          "internal": {
            "type": "integer",
            "format": "int32"
          },
          "salt": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "mobile": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "zipcode": {
            "type": "string",
            "nullable": true
          },
          "userpic": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "online": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "lastLoginAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "voicePause": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "chatPause": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "mailPause": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "faxPause": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "smsPause": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "whatsappPause": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "openchannelPause": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "pauseType": {
            "type": "string",
            "nullable": true,
            "default": "DEFAULT PAUSE"
          },
          "lastPauseAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastIdleAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "chatCapacity": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "mailCapacity": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "faxCapacity": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "smsCapacity": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "whatsappCapacity": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "openchannelCapacity": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "phoneBarAutoAnswer": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "phoneBarEnableSettings": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "phoneBarListenPort": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 5160
          },
          "phoneBarExpires": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 120
          },
          "phoneBarRemoteControl": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "phoneBarRemoteControlPort": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 9888
          },
          "phoneBarEnableRecording": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "phoneBarRingInUse": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "chanspy": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "host": {
            "type": "string",
            "nullable": true,
            "default": "dynamic"
          },
          "ipaddr": {
            "type": "string",
            "nullable": true
          },
          "port": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "regseconds": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "fullcontact": {
            "type": "string",
            "nullable": true
          },
          "regserver": {
            "type": "string",
            "nullable": true
          },
          "useragent": {
            "type": "string",
            "nullable": true
          },
          "lastms": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "type": {
            "type": "string",
            "enum": [
              "friend",
              "user",
              "peer"
            ],
            "nullable": true,
            "default": "friend"
          },
          "context": {
            "type": "string",
            "nullable": true,
            "default": "from-sip"
          },
          "callingpres": {
            "type": "string",
            "enum": [
              "ALLOWED_NOT_SCREENED",
              "ALLOWED_PASSED_SCREEN",
              "ALLOWED_FAILED_SCREEN",
              "ALLOWED",
              "PROHIB_NOT_SCREENED",
              "PROHIB_PASSED_SCREEN",
              "PROHIB_FAILED_SCREEN",
              "PROHIB"
            ],
            "nullable": true
          },
          "deny": {
            "type": "string",
            "nullable": true
          },
          "permit": {
            "type": "string",
            "nullable": true
          },
          "secret": {
            "type": "string",
            "nullable": true
          },
          "md5secret": {
            "type": "string",
            "nullable": true
          },
          "remotesecret": {
            "type": "string",
            "nullable": true
          },
          "transport": {
            "type": "string",
            "nullable": true,
            "default": "udp"
          },
          "dtmfmode": {
            "type": "string",
            "enum": [
              "rfc2833",
              "info",
              "shortinfo",
              "inband",
              "auto"
            ],
            "nullable": true,
            "default": "rfc2833"
          },
          "directmedia": {
            "type": "string",
            "enum": [
              "yes",
              "no",
              "nonat",
              "update",
              "outgoing"
            ],
            "nullable": true,
            "default": "no"
          },
          "directrtpsetup": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true,
            "default": "no"
          },
          "directmediapermit": {
            "type": "string",
            "nullable": true
          },
          "directmediadeny": {
            "type": "string",
            "nullable": true
          },
          "nat": {
            "type": "string",
            "nullable": true,
            "default": "force_rport,comedia"
          },
          "callgroup": {
            "type": "string",
            "nullable": true
          },
          "namedcallgroup": {
            "type": "string",
            "nullable": true
          },
          "pickupgroup": {
            "type": "string",
            "nullable": true
          },
          "namedpickupgroup": {
            "type": "string",
            "nullable": true
          },
          "language": {
            "type": "string",
            "nullable": true,
            "default": "en"
          },
          "tonezone": {
            "type": "string",
            "nullable": true
          },
          "disallow": {
            "type": "string",
            "default": "all"
          },
          "allow": {
            "type": "string",
            "default": "ulaw;alaw;gsm"
          },
          "autoframing": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true
          },
          "insecure": {
            "type": "string",
            "nullable": true
          },
          "trustrpid": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true,
            "default": "no"
          },
          "trust_id_outbound": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true,
            "default": "no"
          },
          "progressinband": {
            "type": "string",
            "enum": [
              "yes",
              "no",
              "never"
            ],
            "nullable": true
          },
          "promiscredir": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true
          },
          "useclientcode": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true
          },
          "accountcode": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "setvar": {
            "type": "string",
            "nullable": true
          },
          "callerid": {
            "type": "string",
            "nullable": true,
            "default": "\"\" <>"
          },
          "amaflags": {
            "type": "string",
            "nullable": true
          },
          "callcounter": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true,
            "default": "yes"
          },
          "busylevel": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "allowoverlap": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true
          },
          "allowsubscribe": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true
          },
          "allowtransfer": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true
          },
          "ignoresdpversion": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true
          },
          "subscribecontext": {
            "type": "string",
            "nullable": true
          },
          "template": {
            "type": "string",
            "nullable": true
          },
          "videosupport": {
            "type": "string",
            "enum": [
              "yes",
              "no",
              "always"
            ],
            "nullable": true,
            "default": "no"
          },
          "maxcallbitrate": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "rfc2833compensate": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true
          },
          "mailbox": {
            "type": "string",
            "nullable": true
          },
          "session_timers": {
            "type": "string",
            "enum": [
              "accept",
              "refuse",
              "originate"
            ],
            "nullable": true
          },
          "session_expires": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "session_minse": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "session_refresher": {
            "type": "string",
            "enum": [
              "uac",
              "uas"
            ],
            "nullable": true,
            "default": "uas"
          },
          "t38pt_usertpsource": {
            "type": "string",
            "nullable": true
          },
          "regexten": {
            "type": "string",
            "nullable": true
          },
          "fromdomain": {
            "type": "string",
            "nullable": true
          },
          "fromuser": {
            "type": "string",
            "nullable": true
          },
          "qualify": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true,
            "default": "yes"
          },
          "keepalive": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "defaultip": {
            "type": "string",
            "nullable": true
          },
          "defaultuser": {
            "type": "string",
            "nullable": true
          },
          "rtptimeout": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "rtpholdtimeout": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "rtpkeepalive": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "sendrpid": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true,
            "default": "no"
          },
          "outboundproxy": {
            "type": "string",
            "nullable": true
          },
          "callbackextension": {
            "type": "string",
            "nullable": true
          },
          "timert1": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "timerb": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "qualifyfreq": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "contactpermit": {
            "type": "string",
            "nullable": true
          },
          "contactdeny": {
            "type": "string",
            "nullable": true
          },
          "contactacl": {
            "type": "string",
            "nullable": true
          },
          "unsolicited_mailbox": {
            "type": "string",
            "nullable": true
          },
          "use_q850_reason": {
            "type": "string",
            "nullable": true
          },
          "maxforwards": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "encryption": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true,
            "default": "no"
          },
          "avpf": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true
          },
          "force_avp": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true
          },
          "icesupport": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true
          },
          "dtlsenable": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true
          },
          "dtlsverify": {
            "type": "string",
            "enum": [
              "yes",
              "no",
              "fingerprint",
              "certificate"
            ],
            "nullable": true
          },
          "dtlsrekey": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "dtlscertfile": {
            "type": "string",
            "nullable": true
          },
          "dtlsprivatekey": {
            "type": "string",
            "nullable": true
          },
          "dtlscipher": {
            "type": "string",
            "nullable": true
          },
          "dtlscafile": {
            "type": "string",
            "nullable": true
          },
          "dtlscapath": {
            "type": "string",
            "nullable": true
          },
          "dtlssetup": {
            "type": "string",
            "enum": [
              "active",
              "passive",
              "actpass"
            ],
            "nullable": true
          },
          "dtlsfingerprint": {
            "type": "string",
            "nullable": true
          },
          "usereqphone": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true,
            "default": "no"
          },
          "recordonfeature": {
            "type": "string",
            "nullable": true
          },
          "recordofffeature": {
            "type": "string",
            "nullable": true
          },
          "call_limit": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 10
          },
          "registertrying": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true
          },
          "subscribemwi": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true
          },
          "vmexten": {
            "type": "string",
            "nullable": true
          },
          "mohinterpret": {
            "type": "string",
            "nullable": true
          },
          "mohsuggest": {
            "type": "string",
            "nullable": true
          },
          "parkinglot": {
            "type": "string",
            "nullable": true
          },
          "canreinvite": {
            "type": "string",
            "enum": [
              "yes",
              "no",
              "nonat",
              "update",
              "update,nonat"
            ],
            "nullable": true,
            "default": "no"
          },
          "loginInPause": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "resetPasswordToken": {
            "type": "string",
            "nullable": true
          },
          "resetPasswordExpires": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "passwordResetAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "default": null
          },
          "previousPasswords": {
            "type": "string",
            "nullable": true
          },
          "showWebBar": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "permissions": {
            "type": "string",
            "nullable": true
          },
          "phoneBarUnconditionalNumber": {
            "type": "string",
            "nullable": true
          },
          "phoneBarNoReplyNumber": {
            "type": "string",
            "nullable": true
          },
          "phoneBarBusyNumber": {
            "type": "string",
            "nullable": true
          },
          "phoneBarUnconditional": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "phoneBarNoReply": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "phoneBarBusy": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "phoneBarDnd": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "phoneBarUnansweredCallBadge": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "phoneBarEnableDtmfTone": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "phoneBarAutoAnswerDelay": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "extensionMonitor": {
            "type": "string",
            "nullable": true,
            "default": ""
          },
          "crudPermissions": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "rtcp_mux": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true,
            "default": "no"
          },
          "allowmessenger": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "phoneBarOutboundProxy": {
            "type": "string",
            "nullable": true
          },
          "phoneBarEnableJaws": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "phoneBarEnableScreenRecordingByAgent": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "phoneBarEnableVideoRecording": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "array"
              },
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "nullable": true
          },
          "phoneBarEnableAutomaticScreenRecording": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "phoneBarPrefixRequired": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "hotdesk": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "interface": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "privacyEnabled": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "apiKeyNonce": {
            "type": "string",
            "nullable": true
          },
          "apiKeyIat": {
            "type": "string",
            "nullable": true
          },
          "screenrecording": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "blocked": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "blockedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "default": null
          },
          "loginAttempts": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "disabled": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "settingsEnabled": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "wssPort": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 8089
          },
          "downloadAttachments": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "downloadOmnichannelInteractions": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "downloadVoiceRecordings": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "ignorePauseForPreviewCalls": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "selectRecallMeCampaign": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "adSsoEnabled": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "chatAutoanswer": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "chatAutoanswerDelay": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "emailAutoanswer": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "emailAutoanswerDelay": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "smsAutoanswer": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "smsAutoanswerDelay": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "openchannelAutoanswer": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "openchannelAutoanswerDelay": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "faxAutoanswer": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "faxAutoanswerDelay": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "whatsappAutoanswer": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "whatsappAutoanswerDelay": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "secretMFA": {
            "type": "string",
            "nullable": true
          },
          "byEmailMFA": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "hasMFAEnabled": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "array"
              },
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "nullable": true
          },
          "messengerSoundNotification": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "allowHopperReassignment": {
            "type": "boolean",
            "default": true
          },
          "ProfileId": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": null
          },
          "mobilePushGateway": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "default": null
          },
          "socketioRoomName": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "array"
              },
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "nullable": true
          },
          "socketioRoleRoomName": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "array"
              },
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "nullable": true
          },
          "socketioRoomNamePrivate": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "array"
              },
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "nullable": true
          },
          "serviceLogin": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "agentTypology": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "array"
              },
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "userProfileId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "name",
          "fullname",
          "email",
          "role",
          "password",
          "provider",
          "internal",
          "online",
          "voicePause",
          "chatPause",
          "mailPause",
          "faxPause",
          "smsPause",
          "whatsappPause",
          "openchannelPause",
          "pauseType",
          "chatCapacity",
          "mailCapacity",
          "faxCapacity",
          "smsCapacity",
          "whatsappCapacity",
          "openchannelCapacity",
          "phoneBarAutoAnswer",
          "phoneBarEnableSettings",
          "phoneBarListenPort",
          "phoneBarExpires",
          "phoneBarRemoteControl",
          "phoneBarRemoteControlPort",
          "phoneBarEnableRecording",
          "phoneBarRingInUse",
          "chanspy",
          "host",
          "type",
          "context",
          "transport",
          "dtmfmode",
          "directmedia",
          "directrtpsetup",
          "nat",
          "language",
          "disallow",
          "allow",
          "trustrpid",
          "trust_id_outbound",
          "callerid",
          "callcounter",
          "videosupport",
          "session_refresher",
          "qualify",
          "sendrpid",
          "encryption",
          "usereqphone",
          "call_limit",
          "canreinvite",
          "loginInPause",
          "passwordResetAt",
          "showWebBar",
          "phoneBarUnconditional",
          "phoneBarNoReply",
          "phoneBarBusy",
          "phoneBarDnd",
          "phoneBarUnansweredCallBadge",
          "phoneBarEnableDtmfTone",
          "phoneBarAutoAnswerDelay",
          "extensionMonitor",
          "crudPermissions",
          "rtcp_mux",
          "allowmessenger",
          "phoneBarEnableJaws",
          "phoneBarEnableScreenRecordingByAgent",
          "phoneBarEnableAutomaticScreenRecording",
          "phoneBarPrefixRequired",
          "hotdesk",
          "interface",
          "privacyEnabled",
          "screenrecording",
          "blocked",
          "blockedAt",
          "loginAttempts",
          "disabled",
          "settingsEnabled",
          "wssPort",
          "downloadAttachments",
          "downloadOmnichannelInteractions",
          "downloadVoiceRecordings",
          "ignorePauseForPreviewCalls",
          "selectRecallMeCampaign",
          "adSsoEnabled",
          "chatAutoanswer",
          "chatAutoanswerDelay",
          "emailAutoanswer",
          "emailAutoanswerDelay",
          "smsAutoanswer",
          "smsAutoanswerDelay",
          "openchannelAutoanswer",
          "openchannelAutoanswerDelay",
          "faxAutoanswer",
          "faxAutoanswerDelay",
          "whatsappAutoanswer",
          "whatsappAutoanswerDelay",
          "byEmailMFA",
          "messengerSoundNotification",
          "allowHopperReassignment",
          "ProfileId",
          "mobilePushGateway",
          "deletedAt",
          "serviceLogin",
          "createdAt",
          "updatedAt"
        ]
      },
      "VoiceChanSpy": {
        "title": "VoiceChanSpy",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "type": "string"
          },
          "options": {
            "type": "string",
            "nullable": true
          },
          "auth": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "record": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "recordingFormat": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "prefix",
          "auth",
          "record",
          "createdAt",
          "updatedAt"
        ]
      },
      "VoiceContext": {
        "title": "VoiceContext",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "defaultEntry": {
            "type": "boolean",
            "nullable": true,
            "default": 0
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "defaultEntry",
          "createdAt",
          "updatedAt"
        ]
      },
      "VoiceExtension": {
        "title": "VoiceExtension",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "context": {
            "type": "string"
          },
          "exten": {
            "type": "string"
          },
          "priority": {
            "type": "string",
            "default": "1"
          },
          "tag": {
            "type": "string",
            "default": "--"
          },
          "app": {
            "type": "string",
            "default": "NoOp"
          },
          "appdata": {
            "type": "string",
            "maxLength": 4096,
            "nullable": true,
            "default": ""
          },
          "type": {
            "type": "string",
            "enum": [
              "inbound",
              "outbound",
              "internal",
              "inbound-fax",
              "outbound-fax",
              "system",
              "any"
            ]
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "interval": {
            "type": "string",
            "default": "*,*,*,*"
          },
          "IntervalId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "isApp": {
            "type": "boolean",
            "default": false
          },
          "appType": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "callerID": {
            "type": "string",
            "nullable": true
          },
          "record": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "cutdigits": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "recordingFormat": {
            "type": "string",
            "nullable": true,
            "default": "wav"
          },
          "answer": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "name": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "array"
              },
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "nullable": true
          },
          "alias": {
            "type": "string",
            "nullable": true
          },
          "CmCompanyId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "VoiceQueueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "VoiceQueuesGroupId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "UserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ChanSpyId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "VoiceContextId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "VoiceExtensionId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FaxAccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "VoicePrefixId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "context",
          "exten",
          "priority",
          "tag",
          "app",
          "appdata",
          "type",
          "interval",
          "isApp",
          "appType",
          "record",
          "recordingFormat",
          "answer",
          "createdAt",
          "updatedAt"
        ]
      },
      "VoiceMusicOnHold": {
        "title": "VoiceMusicOnHold",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "mode": {
            "type": "string",
            "enum": [
              "custom",
              "files",
              "mp3nb",
              "quietmp3nb",
              "quietmp3",
              "mp3"
            ],
            "nullable": true,
            "default": "files"
          },
          "directory": {
            "type": "string",
            "nullable": true
          },
          "application": {
            "type": "string",
            "nullable": true
          },
          "digit": {
            "type": "string",
            "nullable": true
          },
          "sort": {
            "type": "string",
            "nullable": true,
            "default": "alpha"
          },
          "format": {
            "type": "string",
            "nullable": true
          },
          "stamp": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "array"
              },
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "nullable": true
          },
          "defaultEntry": {
            "type": "boolean",
            "nullable": true,
            "default": 0
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "mode",
          "sort",
          "defaultEntry",
          "createdAt",
          "updatedAt"
        ]
      },
      "VoiceQueue": {
        "title": "VoiceQueue",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "inbound",
              "outbound"
            ],
            "default": "inbound"
          },
          "musiconhold": {
            "type": "string",
            "nullable": true,
            "default": "default"
          },
          "announce": {
            "type": "string",
            "nullable": true,
            "default": ""
          },
          "strategy": {
            "type": "string",
            "enum": [
              "rr",
              "ringall",
              "leastrecent",
              "fewestcalls",
              "random",
              "rrmemory",
              "linear",
              "wrandom",
              "rrordered"
            ],
            "default": "ringall"
          },
          "servicelevel": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "context": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "penaltymemberslimit": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "timeout": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 15
          },
          "retry": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 2
          },
          "timeoutpriority": {
            "type": "string",
            "nullable": true
          },
          "weight": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "wrapuptime": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "bookedWrapUpTime": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "autofill": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true,
            "default": "yes"
          },
          "autopause": {
            "type": "string",
            "enum": [
              "yes",
              "no",
              "all"
            ],
            "nullable": true,
            "default": "no"
          },
          "autopausedelay": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "autopausebusy": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true,
            "default": "no"
          },
          "autopauseunavail": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true,
            "default": "no"
          },
          "maxlen": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "setinterfacevar": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true,
            "default": "no"
          },
          "setqueueentryvar": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true
          },
          "setqueuevar": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true,
            "default": "no"
          },
          "eventmemberstatus": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true,
            "default": "no"
          },
          "membermacro": {
            "type": "string",
            "nullable": true
          },
          "membergosub": {
            "type": "string",
            "nullable": true
          },
          "announce_frequency": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "min_announce_frequency": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "periodic_announce_frequency": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "random_periodic_announce": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true,
            "default": "no"
          },
          "relative_periodic_announce": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true,
            "default": "yes"
          },
          "announce_holdtime": {
            "type": "string",
            "enum": [
              "yes",
              "no",
              "once"
            ],
            "nullable": true,
            "default": "no"
          },
          "announce_position": {
            "type": "string",
            "nullable": true,
            "default": "no"
          },
          "announce_to_first_user": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true
          },
          "announce_position_limit": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "announce_round_seconds": {
            "type": "string",
            "enum": [
              "0",
              "5",
              "10",
              "15",
              "20",
              "30"
            ],
            "nullable": true,
            "default": "0"
          },
          "monitor_format": {
            "type": "string",
            "nullable": true,
            "default": ""
          },
          "monitor_type": {
            "type": "string",
            "nullable": true
          },
          "queue_youarenext": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "queue_thereare": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "queue_callswaiting": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "queue_holdtime": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "queue_minute": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "queue_minutes": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "queue_seconds": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "queue_thankyou": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "queue_reporthold": {
            "type": "string",
            "nullable": true
          },
          "queue_quantity1": {
            "type": "string",
            "nullable": true
          },
          "queue_quantity2": {
            "type": "string",
            "nullable": true
          },
          "queue_periodic_announce": {
            "type": "string",
            "nullable": true
          },
          "queue_less_than": {
            "type": "string",
            "nullable": true
          },
          "periodic_announce": {
            "type": "string",
            "nullable": true,
            "default": ""
          },
          "joinempty": {
            "type": "string",
            "nullable": true,
            "default": "yes"
          },
          "leavewhenempty": {
            "type": "string",
            "nullable": true,
            "default": "no"
          },
          "reportholdtime": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true,
            "default": "no"
          },
          "ringinuse": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true,
            "default": "no"
          },
          "memberdelay": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "timeoutrestart": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true,
            "default": "yes"
          },
          "defaultrule": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "acw": {
            "type": "boolean",
            "nullable": true,
            "default": 0
          },
          "acwTimeout": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 10
          },
          "dialActive": {
            "type": "boolean",
            "nullable": true,
            "default": 0
          },
          "dialMethod": {
            "type": "string",
            "enum": [
              "preview",
              "progressive",
              "power",
              "predictive",
              "booked"
            ],
            "nullable": true,
            "default": "progressive"
          },
          "dialLimitChannel": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "dialLimitQueue": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "dialPowerLevel": {
            "type": "number",
            "format": "float",
            "nullable": true,
            "default": 1
          },
          "dialPredictiveOptimization": {
            "type": "string",
            "enum": [
              "agentBusyFactor",
              "dropRate"
            ],
            "nullable": true,
            "default": "dropRate"
          },
          "dialPredictiveOptimizationPercentage": {
            "type": "number",
            "format": "float",
            "nullable": true,
            "default": 3
          },
          "dialPredictiveInterval": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 10
          },
          "dialOriginateCallerIdName": {
            "type": "string",
            "nullable": true
          },
          "dialOriginateCallerIdNumber": {
            "type": "string",
            "nullable": true
          },
          "dialOriginateTimeout": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 30
          },
          "dialQueueOptions": {
            "type": "string",
            "nullable": true,
            "default": "tTxX"
          },
          "dialQueueTimeout": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 3
          },
          "dialQueueProject": {
            "type": "string",
            "nullable": true
          },
          "dialCongestionMaxRetry": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 3
          },
          "dialCongestionRetryFrequency": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 150
          },
          "dialBusyMaxRetry": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 3
          },
          "dialBusyRetryFrequency": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 150
          },
          "dialNoAnswerMaxRetry": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 3
          },
          "dialNoAnswerRetryFrequency": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 150
          },
          "dialGlobalMaxRetry": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 4
          },
          "dialTimezone": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "dialGlobalInterval": {
            "type": "string",
            "nullable": true,
            "default": "07:00-22:00,*,*,*"
          },
          "dialPrefix": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "dialCheckDuplicateType": {
            "type": "string",
            "enum": [
              "always",
              "never",
              "onlyIfOpen"
            ],
            "nullable": true,
            "default": "always"
          },
          "dialAMDActive": {
            "type": "boolean",
            "nullable": true,
            "default": 0
          },
          "dialAMDInitialSilence": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 2500
          },
          "dialAMDGreeting": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 1500
          },
          "dialAMDAfterGreetingSilence": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 800
          },
          "dialAMDTotalAnalysisTime": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 5000
          },
          "dialAMDMinWordLength": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 100
          },
          "dialAMDBetweenWordsSilence": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 50
          },
          "dialAMDMaximumNumberOfWords": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 3
          },
          "dialAMDSilenceThreshold": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 256
          },
          "dialAMDMaximumWordLength": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 5000
          },
          "dialRecallMeTimeout": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 30
          },
          "dialRecallInQueue": {
            "type": "boolean",
            "nullable": true,
            "default": 0
          },
          "dialOrderByScheduledAt": {
            "type": "string",
            "enum": [
              "DESC",
              "ASC"
            ],
            "nullable": true,
            "default": "DESC"
          },
          "dialQueueProject2": {
            "type": "string",
            "nullable": true
          },
          "dialAgiAfterHangupClient": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "dialAgiAfterHangupAgent": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "dialRandomLastDigitCallerIdNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "dialCutDigit": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "dialNoSuchNumberMaxRetry": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 3
          },
          "dialNoSuchNumberRetryFrequency": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 150
          },
          "dialDropMaxRetry": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 3
          },
          "dialDropRetryFrequency": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 150
          },
          "dialAbandonedMaxRetry": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 3
          },
          "dialAbandonedRetryFrequency": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 150
          },
          "dialMachineMaxRetry": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 3
          },
          "dialMachineRetryFrequency": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 150
          },
          "dialAgentRejectMaxRetry": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 3
          },
          "dialAgentRejectRetryFrequency": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 150
          },
          "mandatoryDispositionPauseId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "mandatoryDisposition": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "dialPredictiveIntervalMaxThreshold": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 20
          },
          "dialPredictiveIntervalMinThreshold": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 10
          },
          "dialPreviewAutoRecallMe": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "dialPreviewRecallmeReminder": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "callAdditionalPhoneAfterMin": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 4
          },
          "CampaignGroupId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "priority": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": null
          },
          "socketioRoomName": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "array"
              },
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "TrunkId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "TrunkBackupId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "IntervalId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "musiconhold",
          "announce",
          "strategy",
          "servicelevel",
          "context",
          "timeout",
          "retry",
          "weight",
          "wrapuptime",
          "bookedWrapUpTime",
          "autofill",
          "autopause",
          "autopausebusy",
          "autopauseunavail",
          "maxlen",
          "setinterfacevar",
          "setqueuevar",
          "eventmemberstatus",
          "announce_frequency",
          "min_announce_frequency",
          "periodic_announce_frequency",
          "random_periodic_announce",
          "relative_periodic_announce",
          "announce_holdtime",
          "announce_position",
          "announce_round_seconds",
          "monitor_format",
          "queue_youarenext",
          "queue_thereare",
          "queue_callswaiting",
          "queue_holdtime",
          "queue_minute",
          "queue_minutes",
          "queue_seconds",
          "queue_thankyou",
          "periodic_announce",
          "joinempty",
          "leavewhenempty",
          "reportholdtime",
          "ringinuse",
          "memberdelay",
          "timeoutrestart",
          "acw",
          "acwTimeout",
          "dialActive",
          "dialMethod",
          "dialLimitChannel",
          "dialLimitQueue",
          "dialPowerLevel",
          "dialPredictiveOptimization",
          "dialPredictiveOptimizationPercentage",
          "dialPredictiveInterval",
          "dialOriginateTimeout",
          "dialQueueOptions",
          "dialQueueTimeout",
          "dialCongestionMaxRetry",
          "dialCongestionRetryFrequency",
          "dialBusyMaxRetry",
          "dialBusyRetryFrequency",
          "dialNoAnswerMaxRetry",
          "dialNoAnswerRetryFrequency",
          "dialGlobalMaxRetry",
          "dialTimezone",
          "dialGlobalInterval",
          "dialPrefix",
          "dialCheckDuplicateType",
          "dialAMDActive",
          "dialAMDInitialSilence",
          "dialAMDGreeting",
          "dialAMDAfterGreetingSilence",
          "dialAMDTotalAnalysisTime",
          "dialAMDMinWordLength",
          "dialAMDBetweenWordsSilence",
          "dialAMDMaximumNumberOfWords",
          "dialAMDSilenceThreshold",
          "dialAMDMaximumWordLength",
          "dialRecallMeTimeout",
          "dialRecallInQueue",
          "dialOrderByScheduledAt",
          "dialAgiAfterHangupClient",
          "dialAgiAfterHangupAgent",
          "dialRandomLastDigitCallerIdNumber",
          "dialCutDigit",
          "dialNoSuchNumberMaxRetry",
          "dialNoSuchNumberRetryFrequency",
          "dialDropMaxRetry",
          "dialDropRetryFrequency",
          "dialAbandonedMaxRetry",
          "dialAbandonedRetryFrequency",
          "dialMachineMaxRetry",
          "dialMachineRetryFrequency",
          "dialAgentRejectMaxRetry",
          "dialAgentRejectRetryFrequency",
          "mandatoryDisposition",
          "dialPredictiveIntervalMaxThreshold",
          "dialPredictiveIntervalMinThreshold",
          "dialPreviewAutoRecallMe",
          "dialPreviewRecallmeReminder",
          "callAdditionalPhoneAfterMin",
          "priority",
          "createdAt",
          "updatedAt"
        ]
      },
      "VoiceQueuesGroup": {
        "title": "VoiceQueuesGroup",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "createdAt",
          "updatedAt"
        ]
      },
      "VoiceQueueVoiceQueuesGroup": {
        "title": "VoiceQueueVoiceQueuesGroup",
        "type": "object",
        "properties": {
          "priority": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "timeout": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "VoiceQueueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "VoiceQueuesGroupId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "createdAt",
          "updatedAt"
        ]
      },
      "VoiceRecording": {
        "title": "VoiceRecording",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "format": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "array"
              },
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "nullable": true
          },
          "uniqueid": {
            "type": "string",
            "nullable": true
          },
          "channel": {
            "type": "string",
            "nullable": true
          },
          "membername": {
            "type": "string",
            "nullable": true
          },
          "calleridnum": {
            "type": "string",
            "nullable": true
          },
          "calleridname": {
            "type": "string",
            "nullable": true
          },
          "connectedlinenum": {
            "type": "string",
            "nullable": true
          },
          "connectedlinename": {
            "type": "string",
            "nullable": true
          },
          "accountcode": {
            "type": "string",
            "nullable": true
          },
          "context": {
            "type": "string",
            "nullable": true
          },
          "exten": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "commentNote": {
            "type": "string",
            "nullable": true
          },
          "queue": {
            "type": "string",
            "nullable": true
          },
          "userDisposition": {
            "type": "string",
            "nullable": true
          },
          "userSecondDisposition": {
            "type": "string",
            "nullable": true
          },
          "userThirdDisposition": {
            "type": "string",
            "nullable": true
          },
          "location": {
            "type": "string",
            "nullable": true
          },
          "transcribeName": {
            "type": "string",
            "nullable": true
          },
          "transcribeStatus": {
            "type": "string",
            "nullable": true,
            "default": "NEW"
          },
          "fileUri": {
            "type": "string",
            "nullable": true
          },
          "fileText": {
            "type": "string",
            "nullable": true
          },
          "failureReason": {
            "type": "string",
            "nullable": true
          },
          "sentiment": {
            "type": "string",
            "nullable": true
          },
          "sPositive": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "sNegative": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "sNeutral": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "sMixed": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "tempSentiment": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "numberOfChannels": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 1
          },
          "duration": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": null
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "agentName": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "array"
              },
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "nullable": true
          },
          "customerName": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "array"
              },
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "nullable": true
          },
          "UserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "transcribeStatus",
          "tempSentiment",
          "numberOfChannels",
          "duration"
        ]
      },
      "ScreenRecording": {
        "title": "ScreenRecording",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "format": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "array"
              },
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "nullable": true
          },
          "interactionid": {
            "type": "string",
            "nullable": true
          },
          "channel": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "duration": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "startedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "closedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "UserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id"
        ]
      },
      "VoiceMail": {
        "title": "VoiceMail",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "customer_id": {
            "type": "string",
            "nullable": true
          },
          "context": {
            "type": "string",
            "nullable": true,
            "default": "from-voicemail"
          },
          "mailbox": {
            "type": "string",
            "default": ""
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "fullname": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "pager": {
            "type": "string",
            "nullable": true
          },
          "tz": {
            "type": "string",
            "nullable": true,
            "default": "central"
          },
          "attach": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "default": "yes"
          },
          "saycid": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "default": "yes"
          },
          "dialout": {
            "type": "string",
            "nullable": true
          },
          "callback": {
            "type": "string",
            "nullable": true
          },
          "review": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "default": "no"
          },
          "operator": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "default": "no"
          },
          "envelope": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "default": "no"
          },
          "sayduration": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "default": "no"
          },
          "saydurationm": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "array"
              },
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "default": 1
          },
          "sendvoicemail": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "default": "no"
          },
          "delete": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "default": "no"
          },
          "nextaftercmd": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "default": "yes"
          },
          "forcename": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "default": "no"
          },
          "forcegreetings": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "default": "no"
          },
          "hidefromdir": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "default": "yes"
          },
          "stamp": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "array"
              },
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "nullable": true
          },
          "emailsubject": {
            "type": "string",
            "nullable": true
          },
          "emailbody": {
            "type": "string",
            "nullable": true
          },
          "maxsecs": {
            "type": "integer",
            "format": "int32",
            "default": 180
          },
          "maxmsg": {
            "type": "integer",
            "format": "int32",
            "default": 100
          },
          "name": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "array"
              },
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "UserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "context",
          "mailbox",
          "tz",
          "attach",
          "saycid",
          "review",
          "operator",
          "envelope",
          "sayduration",
          "saydurationm",
          "sendvoicemail",
          "delete",
          "nextaftercmd",
          "forcename",
          "forcegreetings",
          "hidefromdir",
          "maxsecs",
          "maxmsg",
          "createdAt",
          "updatedAt"
        ]
      },
      "VoiceMailMessage": {
        "title": "VoiceMailMessage",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "array"
              },
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "nullable": true
          },
          "msgnum": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "dir": {
            "type": "string",
            "nullable": true,
            "default": ""
          },
          "context": {
            "type": "string",
            "nullable": true,
            "default": ""
          },
          "macrocontext": {
            "type": "string",
            "nullable": true,
            "default": ""
          },
          "callerid": {
            "type": "string",
            "nullable": true,
            "default": ""
          },
          "origtime": {
            "type": "string",
            "nullable": true,
            "default": ""
          },
          "duration": {
            "type": "string",
            "nullable": true,
            "default": ""
          },
          "mailboxuser": {
            "type": "string",
            "nullable": true,
            "default": ""
          },
          "mailboxcontext": {
            "type": "string",
            "nullable": true,
            "default": ""
          },
          "recording": {
            "type": "string",
            "format": "byte",
            "nullable": true,
            "default": null
          },
          "flag": {
            "type": "string",
            "nullable": true,
            "default": ""
          },
          "msg_id": {
            "type": "string",
            "nullable": true,
            "default": ""
          },
          "stamp": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "array"
              },
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "nullable": true,
            "default": {
              "val": "CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "default": {
              "val": "CURRENT_TIMESTAMP"
            }
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "default": {
              "val": "CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"
            }
          }
        },
        "required": [
          "id",
          "msgnum",
          "dir",
          "context",
          "macrocontext",
          "callerid",
          "origtime",
          "duration",
          "mailboxuser",
          "mailboxcontext",
          "recording",
          "flag",
          "msg_id",
          "stamp",
          "createdAt",
          "updatedAt"
        ],
        "$ref": "#/components/schemas/VoiceMailMessage"
      },
      "VoiceCallReport": {
        "title": "VoiceCallReport",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "uniqueid": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "enum": [
              "inbound",
              "internal",
              "outbound",
              "inbound-fax",
              "outbound-fax",
              "dialer"
            ],
            "nullable": true
          },
          "tag": {
            "type": "string",
            "nullable": true
          },
          "accountcode": {
            "type": "string",
            "nullable": true
          },
          "source": {
            "type": "string",
            "nullable": true
          },
          "destination": {
            "type": "string",
            "nullable": true
          },
          "destinationcontext": {
            "type": "string",
            "nullable": true
          },
          "callerid": {
            "type": "string",
            "nullable": true
          },
          "channel": {
            "type": "string",
            "nullable": true
          },
          "destinationchannel": {
            "type": "string",
            "nullable": true
          },
          "lastapplication": {
            "type": "string",
            "nullable": true
          },
          "lastdata": {
            "type": "string",
            "nullable": true
          },
          "starttime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "systemanswertime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "answertime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endtime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "duration": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "billableseconds": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "mohtime": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "disposition": {
            "type": "string",
            "nullable": true
          },
          "amaflags": {
            "type": "string",
            "nullable": true
          },
          "userfield": {
            "type": "string",
            "nullable": true
          },
          "userDisposition": {
            "type": "string",
            "nullable": true
          },
          "userSecondDisposition": {
            "type": "string",
            "nullable": true
          },
          "userThirdDisposition": {
            "type": "string",
            "nullable": true
          },
          "note": {
            "type": "string",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "prefix": {
            "type": "string",
            "nullable": true
          },
          "routeid": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "sipcallid": {
            "type": "string",
            "nullable": true
          },
          "routealias": {
            "type": "string",
            "nullable": true
          },
          "cmcompanyid": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "cmcompanyname": {
            "type": "string",
            "nullable": true
          },
          "keepprefix": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "UserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ContactId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "mohtime",
          "createdAt",
          "updatedAt"
        ]
      },
      "VoiceCallDetailedReport": {
        "title": "VoiceCallDetailedReport",
        "type": "object",
        "properties": {
          "reportcallid": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "reportqueueid": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "reportagentid": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "uniqueid": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "enum": [
              "inbound",
              "internal",
              "outbound"
            ],
            "nullable": true
          },
          "membername": {
            "type": "string",
            "nullable": true
          },
          "accountcode": {
            "type": "string",
            "nullable": true
          },
          "source": {
            "type": "string",
            "nullable": true
          },
          "destination": {
            "type": "string",
            "nullable": true
          },
          "cmcompanyname": {
            "type": "string",
            "nullable": true
          },
          "routealias": {
            "type": "string",
            "nullable": true
          },
          "starttime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "answertime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endtime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "queuetime": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "timeincall": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "holdtime": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "acwtime": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "agenttime": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "queuecallerexitreason": {
            "type": "string",
            "nullable": true
          },
          "calloutcome": {
            "type": "string",
            "nullable": true
          },
          "userDisposition": {
            "type": "string",
            "nullable": true
          },
          "userSecondDisposition": {
            "type": "string",
            "nullable": true
          },
          "userThirdDisposition": {
            "type": "string",
            "nullable": true
          },
          "calendar": {
            "type": "string",
            "enum": [
              "active",
              "out-of-service",
              "out-of-hours"
            ],
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "createdAt",
          "updatedAt"
        ]
      },
      "VoiceDialReport": {
        "title": "VoiceDialReport",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "privilege": {
            "type": "string",
            "nullable": true
          },
          "channel": {
            "type": "string",
            "nullable": true
          },
          "channelstate": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "channelstatedesc": {
            "type": "string",
            "nullable": true
          },
          "calleridnum": {
            "type": "string",
            "nullable": true
          },
          "calleridname": {
            "type": "string",
            "nullable": true
          },
          "connectedlinenum": {
            "type": "string",
            "nullable": true
          },
          "connectedlinename": {
            "type": "string",
            "nullable": true
          },
          "language": {
            "type": "string",
            "nullable": true
          },
          "accountcode": {
            "type": "string",
            "nullable": true
          },
          "context": {
            "type": "string",
            "nullable": true
          },
          "exten": {
            "type": "string",
            "nullable": true
          },
          "priority": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "uniqueid": {
            "type": "string",
            "nullable": true
          },
          "linkedid": {
            "type": "string",
            "nullable": true
          },
          "destchannel": {
            "type": "string",
            "nullable": true
          },
          "destchannelstate": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "destchannelstatedesc": {
            "type": "string",
            "nullable": true
          },
          "destcalleridnum": {
            "type": "string",
            "nullable": true
          },
          "destcalleridname": {
            "type": "string",
            "nullable": true
          },
          "destconnectedlinenum": {
            "type": "string",
            "nullable": true
          },
          "destconnectedlinename": {
            "type": "string",
            "nullable": true
          },
          "destlanguage": {
            "type": "string",
            "nullable": true
          },
          "destaccountcode": {
            "type": "string",
            "nullable": true
          },
          "destcontext": {
            "type": "string",
            "nullable": true
          },
          "destexten": {
            "type": "string",
            "nullable": true
          },
          "destpriority": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "destuniqueid": {
            "type": "string",
            "nullable": true
          },
          "destlinkedid": {
            "type": "string",
            "nullable": true
          },
          "dialstring": {
            "type": "string",
            "nullable": true
          },
          "dialstatus": {
            "type": "string",
            "nullable": true
          },
          "starttime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "answertime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endtime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastevent": {
            "type": "string",
            "nullable": true
          },
          "routeId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "duration": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "holdtime": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "billableseconds": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt"
        ]
      },
      "VoiceAgentReport": {
        "title": "VoiceAgentReport",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "uniqueid": {
            "type": "string",
            "nullable": true
          },
          "calleridnum": {
            "type": "string",
            "nullable": true
          },
          "calleridname": {
            "type": "string",
            "nullable": true
          },
          "queue": {
            "type": "string",
            "nullable": true
          },
          "interface": {
            "type": "string",
            "nullable": true
          },
          "membername": {
            "type": "string",
            "nullable": true
          },
          "agentcalledAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "agentconnectAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "agentcompleteAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "agentringnoanswerAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "agentdumpAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "holdtime": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "agentcomplete": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "agentringnoanswer": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "agentdump": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "talktime": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "agentacw": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "acwtime": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "reason": {
            "type": "string",
            "nullable": true
          },
          "lastevent": {
            "type": "string",
            "nullable": true
          },
          "channel": {
            "type": "string",
            "nullable": true
          },
          "channelstate": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "channelstatedesc": {
            "type": "string",
            "nullable": true
          },
          "connectedlinenum": {
            "type": "string",
            "nullable": true
          },
          "connectedlinename": {
            "type": "string",
            "nullable": true
          },
          "language": {
            "type": "string",
            "nullable": true
          },
          "accountcode": {
            "type": "string",
            "nullable": true
          },
          "context": {
            "type": "string",
            "nullable": true
          },
          "exten": {
            "type": "string",
            "nullable": true
          },
          "priority": {
            "type": "string",
            "nullable": true
          },
          "destchannel": {
            "type": "string",
            "nullable": true
          },
          "destchannelstate": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "destchannelstatedesc": {
            "type": "string",
            "nullable": true
          },
          "destcalleridnum": {
            "type": "string",
            "nullable": true
          },
          "destcalleridname": {
            "type": "string",
            "nullable": true
          },
          "destconnectedlinenum": {
            "type": "string",
            "nullable": true
          },
          "destconnectedlinename": {
            "type": "string",
            "nullable": true
          },
          "destlanguage": {
            "type": "string",
            "nullable": true
          },
          "destaccountcode": {
            "type": "string",
            "nullable": true
          },
          "destcontext": {
            "type": "string",
            "nullable": true
          },
          "destexten": {
            "type": "string",
            "nullable": true
          },
          "destpriority": {
            "type": "string",
            "nullable": true
          },
          "destuniqueid": {
            "type": "string",
            "nullable": true
          },
          "answeredelsewheredestinationuniqueid": {
            "type": "string",
            "nullable": true
          },
          "answeredelsewheremembername": {
            "type": "string",
            "nullable": true
          },
          "transfer": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "transfertype": {
            "type": "string",
            "nullable": true
          },
          "transferexten": {
            "type": "string",
            "nullable": true
          },
          "transferuniqueid": {
            "type": "string",
            "nullable": true
          },
          "agententerreason": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "linkedid": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "agentcomplete",
          "agentringnoanswer",
          "agentdump",
          "agentacw",
          "transfer",
          "agententerreason",
          "createdAt",
          "updatedAt"
        ]
      },
      "VoiceQueueReport": {
        "title": "VoiceQueueReport",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "uniqueid": {
            "type": "string",
            "nullable": true
          },
          "calleridnum": {
            "type": "string",
            "nullable": true
          },
          "calleridname": {
            "type": "string",
            "nullable": true
          },
          "queue": {
            "type": "string",
            "nullable": true
          },
          "queuecallerjoinAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "queuecallerleaveAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "position": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "queuecallerabandon": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "queuecallerabandonAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "queuecallercomplete": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "queuecallercompleteAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "queuecallerexit": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "queuecallerexitAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "queuecallerexitreason": {
            "type": "string",
            "nullable": true
          },
          "originalposition": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "channel": {
            "type": "string",
            "nullable": true
          },
          "connectedlinenum": {
            "type": "string",
            "nullable": true
          },
          "connectedlinename": {
            "type": "string",
            "nullable": true
          },
          "accountcode": {
            "type": "string",
            "nullable": true
          },
          "context": {
            "type": "string",
            "nullable": true
          },
          "exten": {
            "type": "string",
            "nullable": true
          },
          "priority": {
            "type": "string",
            "nullable": true
          },
          "holdtime": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "mohtime": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "assigned": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "lastAssignedTo": {
            "type": "string",
            "nullable": true
          },
          "transfer": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "transfertype": {
            "type": "string",
            "nullable": true
          },
          "transferexten": {
            "type": "string",
            "nullable": true
          },
          "transferuniqueid": {
            "type": "string",
            "nullable": true
          },
          "disposition": {
            "type": "string",
            "nullable": true
          },
          "secondDisposition": {
            "type": "string",
            "nullable": true
          },
          "thirdDisposition": {
            "type": "string",
            "nullable": true
          },
          "queuecallerenterreason": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "note": {
            "type": "string",
            "nullable": true
          },
          "linkedid": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "queuecallerabandon",
          "queuecallercomplete",
          "queuecallerexit",
          "mohtime",
          "assigned",
          "transfer",
          "queuecallerenterreason",
          "createdAt",
          "updatedAt"
        ]
      },
      "MemberReport": {
        "title": "MemberReport",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "channel": {
            "type": "string",
            "nullable": true
          },
          "membername": {
            "type": "string",
            "nullable": true
          },
          "interface": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "duration": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "enterAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "exitAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "data1": {
            "type": "string",
            "nullable": true
          },
          "data2": {
            "type": "string",
            "nullable": true
          },
          "data3": {
            "type": "string",
            "nullable": true
          },
          "data4": {
            "type": "string",
            "nullable": true
          },
          "data5": {
            "type": "string",
            "nullable": true
          },
          "role": {
            "type": "string",
            "nullable": true
          },
          "internal": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "uniqueid": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt"
        ]
      },
      "Trunk": {
        "title": "Trunk",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "friend",
              "user",
              "peer"
            ],
            "default": "friend"
          },
          "context": {
            "type": "string",
            "default": "from-voip-provider"
          },
          "callingpres": {
            "type": "string",
            "enum": [
              "ALLOWED_NOT_SCREENED",
              "ALLOWED_PASSED_SCREEN",
              "ALLOWED_FAILED_SCREEN",
              "ALLOWED",
              "PROHIB_NOT_SCREENED",
              "PROHIB_PASSED_SCREEN",
              "PROHIB_FAILED_SCREEN",
              "PROHIB"
            ],
            "nullable": true
          },
          "deny": {
            "type": "string",
            "nullable": true
          },
          "permit": {
            "type": "string",
            "nullable": true
          },
          "secret": {
            "type": "string",
            "nullable": true
          },
          "md5secret": {
            "type": "string",
            "nullable": true
          },
          "remotesecret": {
            "type": "string",
            "nullable": true
          },
          "transport": {
            "type": "string",
            "nullable": true,
            "default": "udp"
          },
          "dtmfmode": {
            "type": "string",
            "enum": [
              "rfc2833",
              "info",
              "shortinfo",
              "inband",
              "auto"
            ],
            "nullable": true,
            "default": "rfc2833"
          },
          "directmedia": {
            "type": "string",
            "enum": [
              "yes",
              "no",
              "nonat",
              "update",
              "outgoing"
            ],
            "nullable": true,
            "default": "no"
          },
          "directrtpsetup": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true,
            "default": "no"
          },
          "directmediapermit": {
            "type": "string",
            "nullable": true
          },
          "directmediadeny": {
            "type": "string",
            "nullable": true
          },
          "nat": {
            "type": "string",
            "nullable": true,
            "default": "force_rport,comedia"
          },
          "callgroup": {
            "type": "string",
            "nullable": true
          },
          "namedcallgroup": {
            "type": "string",
            "nullable": true
          },
          "pickupgroup": {
            "type": "string",
            "nullable": true
          },
          "namedpickupgroup": {
            "type": "string",
            "nullable": true
          },
          "language": {
            "type": "string",
            "nullable": true,
            "default": "en"
          },
          "tonezone": {
            "type": "string",
            "nullable": true
          },
          "disallow": {
            "type": "string",
            "nullable": true,
            "default": "all"
          },
          "allow": {
            "type": "string",
            "default": "ulaw;alaw;gsm"
          },
          "autoframing": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true
          },
          "insecure": {
            "type": "string",
            "nullable": true,
            "default": "port,invite"
          },
          "trustrpid": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true,
            "default": "no"
          },
          "trust_id_outbound": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true,
            "default": "no"
          },
          "progressinband": {
            "type": "string",
            "enum": [
              "yes",
              "no",
              "never"
            ],
            "nullable": true
          },
          "promiscredir": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true
          },
          "useclientcode": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true
          },
          "accountcode": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "setvar": {
            "type": "string",
            "nullable": true
          },
          "callerid": {
            "type": "string",
            "nullable": true,
            "default": "\"\" <>"
          },
          "amaflags": {
            "type": "string",
            "nullable": true
          },
          "callcounter": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true,
            "default": "yes"
          },
          "busylevel": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "allowoverlap": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true
          },
          "allowsubscribe": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true
          },
          "allowtransfer": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true
          },
          "ignoresdpversion": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true
          },
          "subscribecontext": {
            "type": "string",
            "nullable": true
          },
          "template": {
            "type": "string",
            "nullable": true
          },
          "videosupport": {
            "type": "string",
            "enum": [
              "yes",
              "no",
              "always"
            ],
            "nullable": true,
            "default": "no"
          },
          "maxcallbitrate": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "rfc2833compensate": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true
          },
          "mailbox": {
            "type": "string",
            "nullable": true
          },
          "session_timers": {
            "type": "string",
            "enum": [
              "accept",
              "refuse",
              "originate"
            ],
            "nullable": true
          },
          "session_expires": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "session_minse": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "session_refresher": {
            "type": "string",
            "enum": [
              "uac",
              "uas"
            ],
            "nullable": true,
            "default": "uas"
          },
          "t38pt_usertpsource": {
            "type": "string",
            "nullable": true
          },
          "regexten": {
            "type": "string",
            "nullable": true
          },
          "fromdomain": {
            "type": "string",
            "nullable": true
          },
          "fromuser": {
            "type": "string",
            "nullable": true
          },
          "port": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "qualify": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true,
            "default": "yes"
          },
          "keepalive": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "defaultip": {
            "type": "string",
            "nullable": true
          },
          "defaultuser": {
            "type": "string",
            "nullable": true
          },
          "rtptimeout": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "rtpholdtimeout": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "rtpkeepalive": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "sendrpid": {
            "type": "string",
            "enum": [
              "yes",
              "no",
              "pai"
            ],
            "nullable": true,
            "default": "no"
          },
          "outboundproxy": {
            "type": "string",
            "nullable": true
          },
          "callbackextension": {
            "type": "string",
            "nullable": true
          },
          "timert1": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "timerb": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "qualifyfreq": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "contactpermit": {
            "type": "string",
            "nullable": true
          },
          "contactdeny": {
            "type": "string",
            "nullable": true
          },
          "contactacl": {
            "type": "string",
            "nullable": true
          },
          "unsolicited_mailbox": {
            "type": "string",
            "nullable": true
          },
          "use_q850_reason": {
            "type": "string",
            "nullable": true
          },
          "maxforwards": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "encryption": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true,
            "default": "no"
          },
          "avpf": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true
          },
          "force_avp": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true
          },
          "icesupport": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true
          },
          "dtlsenable": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true
          },
          "dtlsverify": {
            "type": "string",
            "enum": [
              "yes",
              "no",
              "fingerprint",
              "certificate"
            ],
            "nullable": true
          },
          "dtlsrekey": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "dtlscertfile": {
            "type": "string",
            "nullable": true
          },
          "dtlsprivatekey": {
            "type": "string",
            "nullable": true
          },
          "dtlscipher": {
            "type": "string",
            "nullable": true
          },
          "dtlscafile": {
            "type": "string",
            "nullable": true
          },
          "dtlscapath": {
            "type": "string",
            "nullable": true
          },
          "dtlssetup": {
            "type": "string",
            "enum": [
              "active",
              "passive",
              "actpass"
            ],
            "nullable": true
          },
          "dtlsfingerprint": {
            "type": "string",
            "nullable": true
          },
          "usereqphone": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true,
            "default": "no"
          },
          "recordonfeature": {
            "type": "string",
            "nullable": true
          },
          "recordofffeature": {
            "type": "string",
            "nullable": true
          },
          "call_limit": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 1000
          },
          "registertrying": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true
          },
          "subscribemwi": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true
          },
          "vmexten": {
            "type": "string",
            "nullable": true
          },
          "mohinterpret": {
            "type": "string",
            "nullable": true
          },
          "mohsuggest": {
            "type": "string",
            "nullable": true
          },
          "parkinglot": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "host": {
            "type": "string",
            "nullable": true,
            "default": "dynamic"
          },
          "canreinvite": {
            "type": "string",
            "enum": [
              "yes",
              "no",
              "nonat",
              "update",
              "update,nonat"
            ],
            "nullable": true,
            "default": "no"
          },
          "registry": {
            "type": "string",
            "nullable": true
          },
          "otherFields": {
            "type": "string",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "default": true
          },
          "t38pt_udptl": {
            "type": "string",
            "nullable": true,
            "default": "no"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "context",
          "transport",
          "dtmfmode",
          "directmedia",
          "directrtpsetup",
          "nat",
          "language",
          "disallow",
          "allow",
          "insecure",
          "trustrpid",
          "trust_id_outbound",
          "callerid",
          "callcounter",
          "videosupport",
          "session_refresher",
          "qualify",
          "sendrpid",
          "encryption",
          "usereqphone",
          "call_limit",
          "host",
          "canreinvite",
          "active",
          "t38pt_udptl",
          "createdAt",
          "updatedAt"
        ]
      },
      "VoiceTransferReport": {
        "title": "VoiceTransferReport",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "enum": [
              "blind",
              "attended"
            ],
            "nullable": true
          },
          "result": {
            "type": "string",
            "nullable": true
          },
          "transfererchannel": {
            "type": "string",
            "nullable": true
          },
          "transferercalleridnum": {
            "type": "string",
            "nullable": true
          },
          "transferercalleridname": {
            "type": "string",
            "nullable": true
          },
          "transfererconnectedlinenum": {
            "type": "string",
            "nullable": true
          },
          "transfererconnectedlinename": {
            "type": "string",
            "nullable": true
          },
          "transfereraccountcode": {
            "type": "string",
            "nullable": true
          },
          "transferercontext": {
            "type": "string",
            "nullable": true
          },
          "transfererexten": {
            "type": "string",
            "nullable": true
          },
          "transfererlinkedid": {
            "type": "string",
            "nullable": true
          },
          "transfereechannel": {
            "type": "string",
            "nullable": true
          },
          "transfereecalleridnum": {
            "type": "string",
            "nullable": true
          },
          "transfereecalleridname": {
            "type": "string",
            "nullable": true
          },
          "transfereeconnectedlinenum": {
            "type": "string",
            "nullable": true
          },
          "transfereeconnectedlinename": {
            "type": "string",
            "nullable": true
          },
          "transfereeaccountcode": {
            "type": "string",
            "nullable": true
          },
          "transfereecontext": {
            "type": "string",
            "nullable": true
          },
          "transfereeexten": {
            "type": "string",
            "nullable": true
          },
          "transfereelinkedid": {
            "type": "string",
            "nullable": true
          },
          "isexternal": {
            "type": "string",
            "enum": [
              "Yes",
              "No"
            ],
            "nullable": true
          },
          "context": {
            "type": "string",
            "nullable": true
          },
          "extension": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt"
        ]
      },
      "UserVoiceQueueRt": {
        "title": "UserVoiceQueueRt",
        "type": "object",
        "properties": {
          "uniqueid": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "membername": {
            "type": "string"
          },
          "UserId": {
            "type": "integer",
            "format": "int32"
          },
          "queue_name": {
            "type": "string"
          },
          "VoiceQueueId": {
            "type": "integer",
            "format": "int32"
          },
          "interface": {
            "type": "string"
          },
          "penalty": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "paused": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "reason_paused": {
            "type": "string",
            "maxLength": 80,
            "nullable": true,
            "default": null
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "membername",
          "UserId",
          "queue_name",
          "VoiceQueueId",
          "interface",
          "penalty",
          "paused",
          "reason_paused",
          "createdAt",
          "updatedAt"
        ]
      },
      "UserVoiceQueue": {
        "title": "UserVoiceQueue",
        "type": "object",
        "properties": {
          "penalty": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "UserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "VoiceQueueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ProfileId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "penalty",
          "createdAt",
          "updatedAt"
        ]
      },
      "UserChatQueue": {
        "title": "UserChatQueue",
        "type": "object",
        "properties": {
          "penalty": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "UserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ChatQueueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ProfileId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "penalty",
          "createdAt",
          "updatedAt"
        ]
      },
      "UserMailQueue": {
        "title": "UserMailQueue",
        "type": "object",
        "properties": {
          "penalty": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "UserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "MailQueueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ProfileId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "penalty",
          "createdAt",
          "updatedAt"
        ]
      },
      "UserFaxQueue": {
        "title": "UserFaxQueue",
        "type": "object",
        "properties": {
          "penalty": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "assigned": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "queue": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "UserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FaxQueueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ProfileId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "penalty",
          "assigned",
          "createdAt",
          "updatedAt"
        ]
      },
      "UserSmsQueue": {
        "title": "UserSmsQueue",
        "type": "object",
        "properties": {
          "penalty": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "UserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "SmsQueueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ProfileId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "penalty",
          "createdAt",
          "updatedAt"
        ]
      },
      "UserOpenchannelQueue": {
        "title": "UserOpenchannelQueue",
        "type": "object",
        "properties": {
          "penalty": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "UserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "OpenchannelQueueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ProfileId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "penalty",
          "createdAt",
          "updatedAt"
        ]
      },
      "UserWhatsappQueue": {
        "title": "UserWhatsappQueue",
        "type": "object",
        "properties": {
          "penalty": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "UserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "WhatsappQueueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ProfileId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "penalty",
          "createdAt",
          "updatedAt"
        ]
      },
      "MailServerIn": {
        "title": "MailServerIn",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "host": {
            "type": "string",
            "nullable": true
          },
          "authentication": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "user": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "port": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "tls": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "tlsTrustAny": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "mailbox": {
            "type": "string",
            "nullable": true,
            "default": "INBOX"
          },
          "imapHeaders": {
            "type": "string",
            "nullable": true,
            "default": ""
          },
          "connTimeout": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 10
          },
          "authTimeout": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 5
          },
          "service": {
            "type": "string",
            "nullable": true
          },
          "modernAuthentication": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "MailAccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "CloudProviderId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "authentication",
          "tls",
          "tlsTrustAny",
          "mailbox",
          "imapHeaders",
          "connTimeout",
          "authTimeout",
          "modernAuthentication",
          "createdAt",
          "updatedAt"
        ]
      },
      "MailServerOut": {
        "title": "MailServerOut",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "host": {
            "type": "string",
            "nullable": true
          },
          "user": {
            "type": "string",
            "nullable": true
          },
          "pass": {
            "type": "string",
            "nullable": true
          },
          "port": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "secure": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "service": {
            "type": "string",
            "nullable": true
          },
          "authentication": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "modernAuthentication": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "MailAccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "CloudProviderId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "secure",
          "authentication",
          "modernAuthentication",
          "createdAt",
          "updatedAt"
        ]
      },
      "MailAccount": {
        "title": "MailAccount",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "service": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "key": {
            "type": "string"
          },
          "template": {
            "type": "string",
            "nullable": true
          },
          "markAsUnread": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "fontFamily": {
            "type": "string",
            "default": "Arial,Helvetica,sans-serif"
          },
          "fontSize": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 13
          },
          "notificationTemplate": {
            "type": "string",
            "nullable": true
          },
          "notificationSound": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "notificationShake": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "waitForTheAssignedAgent": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 10
          },
          "queueTransfer": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "queueTransferTimeout": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 300
          },
          "agentTransfer": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "agentTransferTimeout": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 300
          },
          "accountTransfer": {
            "type": "boolean",
            "default": false
          },
          "TransferAccountTemplateId": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": null
          },
          "mandatoryDispositionPauseId": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": null
          },
          "mandatoryDisposition": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "provider": {
            "type": "string",
            "enum": [
              "gmail",
              "hotmail",
              "yahoo",
              "outlook365"
            ],
            "nullable": true,
            "default": null
          },
          "hostname": {
            "type": "string",
            "nullable": true
          },
          "waitForTheAssignedQueue": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 10
          },
          "aiAssistantId": {
            "type": "string",
            "nullable": true
          },
          "aiProviderId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ListId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "TemplateId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "name",
          "service",
          "active",
          "key",
          "markAsUnread",
          "fontFamily",
          "fontSize",
          "notificationTemplate",
          "notificationSound",
          "notificationShake",
          "waitForTheAssignedAgent",
          "queueTransfer",
          "queueTransferTimeout",
          "agentTransfer",
          "agentTransferTimeout",
          "accountTransfer",
          "TransferAccountTemplateId",
          "mandatoryDispositionPauseId",
          "mandatoryDisposition",
          "provider",
          "waitForTheAssignedQueue",
          "createdAt",
          "updatedAt"
        ]
      },
      "MailQueue": {
        "title": "MailQueue",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "timeout": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "strategy": {
            "type": "string",
            "enum": [
              "rrmemory",
              "beepall",
              "roundrobin"
            ],
            "nullable": true
          },
          "socketioRoomName": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "array"
              },
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt"
        ]
      },
      "MailSubstatus": {
        "title": "MailSubstatus",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "createdAt",
          "updatedAt"
        ]
      },
      "MailInteraction": {
        "title": "MailInteraction",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "closed": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "closedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "disposition": {
            "type": "string",
            "nullable": true
          },
          "secondDisposition": {
            "type": "string",
            "nullable": true
          },
          "thirdDisposition": {
            "type": "string",
            "nullable": true
          },
          "note": {
            "type": "string",
            "nullable": true
          },
          "inReplyTo": {
            "type": "string",
            "maxLength": 510,
            "nullable": true
          },
          "to": {
            "type": "string",
            "nullable": true
          },
          "cc": {
            "type": "string",
            "nullable": true
          },
          "subject": {
            "type": "string",
            "nullable": true
          },
          "attach": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "read1stAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "substatus": {
            "type": "string",
            "maxLength": 60,
            "nullable": true
          },
          "substatusAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "firstMsgDirection": {
            "type": "string",
            "enum": [
              "in",
              "out"
            ],
            "default": "in"
          },
          "lastMsgAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastMsgDirection": {
            "type": "string",
            "enum": [
              "in",
              "out"
            ],
            "default": "in"
          },
          "autoreplyExecuted": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "queueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "TransferAccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": null
          },
          "TransferUserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": null
          },
          "TransferMailQueueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": null
          },
          "transferredAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "default": null
          },
          "cf_bool": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "cf_text": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "UserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "MailAccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ContactId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "closed",
          "attach",
          "firstMsgDirection",
          "lastMsgDirection",
          "autoreplyExecuted",
          "TransferAccountId",
          "TransferUserId",
          "TransferMailQueueId",
          "transferredAt",
          "cf_bool",
          "cf_text",
          "createdAt",
          "updatedAt"
        ]
      },
      "MailMessage": {
        "title": "MailMessage",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "body": {
            "type": "string"
          },
          "plainBody": {
            "type": "string",
            "nullable": true
          },
          "read": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "direction": {
            "type": "string",
            "enum": [
              "in",
              "out"
            ],
            "default": "out"
          },
          "messageId": {
            "type": "string",
            "maxLength": 510,
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "to": {
            "type": "string",
            "nullable": true
          },
          "cc": {
            "type": "string",
            "nullable": true
          },
          "bcc": {
            "type": "string",
            "nullable": true
          },
          "sender": {
            "type": "string",
            "nullable": true
          },
          "replyTo": {
            "type": "string",
            "nullable": true
          },
          "subject": {
            "type": "string",
            "nullable": true
          },
          "sentAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "attach": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "secret": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "readAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "originTo": {
            "type": "string",
            "nullable": true
          },
          "originCc": {
            "type": "string",
            "nullable": true
          },
          "originChannel": {
            "type": "string",
            "enum": [
              "Email",
              "Chat"
            ],
            "default": "Email"
          },
          "UID": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": null
          },
          "sentBy": {
            "type": "string",
            "enum": [
              "action_user",
              "action_agent",
              "action_nli",
              "action_internal_note",
              "auto_routing",
              "auto_system"
            ],
            "nullable": true,
            "default": null
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "MailAccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "MailInteractionId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "UserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ContactId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ChatWebsiteId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ChatOfflineMessageId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "body",
          "read",
          "direction",
          "attach",
          "secret",
          "originChannel",
          "UID",
          "sentBy",
          "createdAt",
          "updatedAt"
        ]
      },
      "MailApplication": {
        "title": "MailApplication",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "priority": {
            "type": "integer",
            "format": "int32"
          },
          "app": {
            "type": "string",
            "default": "noop"
          },
          "appdata": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "interval": {
            "type": "string",
            "nullable": true,
            "default": "*,*,*,*"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "MailAccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "UserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "MailQueueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "IntervalId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "TagId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "priority",
          "app",
          "interval",
          "createdAt",
          "updatedAt"
        ]
      },
      "MailQueueReport": {
        "title": "MailQueueReport",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "uniqueid": {
            "type": "string"
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "joinAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "leaveAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "acceptAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "exitAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "reason": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "MailAccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ListId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ContactId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "MailInteractionId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "MailMessageId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "UserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "MailQueueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "uniqueid",
          "createdAt",
          "updatedAt"
        ]
      },
      "Dashboard": {
        "title": "Dashboard",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "createdAt",
          "updatedAt"
        ]
      },
      "DashboardItem": {
        "title": "DashboardItem",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "maxLength": 20
          },
          "attrs": {
            "type": "string",
            "nullable": true
          },
          "sizeX": {
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "sizeY": {
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "row": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "col": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "background": {
            "type": "string",
            "default": "#ffffff"
          },
          "foreground": {
            "type": "string",
            "default": "#2196f3"
          },
          "link": {
            "type": "string",
            "nullable": true
          },
          "titleFontSize": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 12
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "DashboardId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "title",
          "type",
          "sizeX",
          "sizeY",
          "background",
          "foreground",
          "titleFontSize",
          "createdAt",
          "updatedAt"
        ]
      },
      "FaxAccount": {
        "title": "FaxAccount",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "ecm": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "nullable": true,
            "default": "yes"
          },
          "headerinfo": {
            "type": "string",
            "nullable": true,
            "default": "xCALLY Motion Fax"
          },
          "localstationid": {
            "type": "string",
            "nullable": true
          },
          "minrate": {
            "type": "string",
            "enum": [
              "2400",
              "4800",
              "7200",
              "9600",
              "12000",
              "14400"
            ],
            "nullable": true,
            "default": "4800"
          },
          "maxrate": {
            "type": "string",
            "enum": [
              "2400",
              "4800",
              "7200",
              "9600",
              "12000",
              "14400"
            ],
            "nullable": true,
            "default": "14400"
          },
          "modem": {
            "type": "string",
            "nullable": true,
            "default": "v17,v27,v29"
          },
          "gateway": {
            "type": "string",
            "nullable": true,
            "default": "no"
          },
          "faxdetect": {
            "type": "string",
            "nullable": true,
            "default": "no"
          },
          "t38timeout": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 5000
          },
          "tech": {
            "type": "string",
            "enum": [
              "SIP",
              "IAX",
              "DADHI",
              "KHOMP"
            ],
            "nullable": true,
            "default": "SIP"
          },
          "key": {
            "type": "string"
          },
          "notificationTemplate": {
            "type": "string",
            "nullable": true
          },
          "notificationSound": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "notificationShake": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "waitForTheAssignedAgent": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 10
          },
          "queueTransfer": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "queueTransferTimeout": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 300
          },
          "agentTransfer": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "agentTransferTimeout": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 300
          },
          "mandatoryDispositionPauseId": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": null
          },
          "mandatoryDisposition": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "waitForTheAssignedQueue": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 10
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "TrunkId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ListId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "name",
          "ecm",
          "headerinfo",
          "minrate",
          "maxrate",
          "modem",
          "gateway",
          "faxdetect",
          "t38timeout",
          "tech",
          "key",
          "notificationTemplate",
          "notificationSound",
          "notificationShake",
          "waitForTheAssignedAgent",
          "queueTransfer",
          "queueTransferTimeout",
          "agentTransfer",
          "agentTransferTimeout",
          "mandatoryDispositionPauseId",
          "mandatoryDisposition",
          "waitForTheAssignedQueue",
          "createdAt",
          "updatedAt"
        ]
      },
      "FaxApplication": {
        "title": "FaxApplication",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "priority": {
            "type": "integer",
            "format": "int32"
          },
          "app": {
            "type": "string",
            "default": "noop"
          },
          "appdata": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "interval": {
            "type": "string",
            "nullable": true,
            "default": "*,*,*,*"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "FaxAccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "UserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FaxQueueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "TagId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "IntervalId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "priority",
          "app",
          "interval",
          "createdAt",
          "updatedAt"
        ]
      },
      "FaxInteraction": {
        "title": "FaxInteraction",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "closed": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "closedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "disposition": {
            "type": "string",
            "nullable": true
          },
          "secondDisposition": {
            "type": "string",
            "nullable": true
          },
          "thirdDisposition": {
            "type": "string",
            "nullable": true
          },
          "note": {
            "type": "string",
            "nullable": true
          },
          "read1stAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "fax": {
            "type": "string",
            "nullable": true
          },
          "firstMsgDirection": {
            "type": "string",
            "enum": [
              "in",
              "out"
            ],
            "default": "in"
          },
          "lastMsgAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastMsgDirection": {
            "type": "string",
            "enum": [
              "in",
              "out"
            ],
            "default": "in"
          },
          "queueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "cf_bool": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "cf_text": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "UserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FaxAccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ContactId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "closed",
          "firstMsgDirection",
          "lastMsgDirection",
          "cf_bool",
          "cf_text",
          "createdAt",
          "updatedAt"
        ]
      },
      "FaxMessage": {
        "title": "FaxMessage",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "body": {
            "type": "string"
          },
          "read": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "direction": {
            "type": "string",
            "enum": [
              "in",
              "out"
            ],
            "default": "out"
          },
          "failMessage": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "readAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "FaxAccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FaxInteractionId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "UserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ContactId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "AttachmentId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "body",
          "read",
          "direction",
          "failMessage",
          "createdAt",
          "updatedAt"
        ]
      },
      "FaxQueue": {
        "title": "FaxQueue",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "timeout": {
            "type": "integer",
            "format": "int32"
          },
          "strategy": {
            "type": "string",
            "enum": [
              "rrmemory",
              "beepall",
              "roundrobin"
            ]
          },
          "lastAgent": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "socketioRoomName": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "array"
              },
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "timeout",
          "strategy",
          "lastAgent",
          "createdAt",
          "updatedAt"
        ]
      },
      "FaxQueueReport": {
        "title": "FaxQueueReport",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "uniqueid": {
            "type": "string"
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "joinAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "leaveAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "acceptAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "exitAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "reason": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "FaxAccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ListId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ContactId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FaxInteractionId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FaxMessageId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "UserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FaxQueueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "uniqueid",
          "createdAt",
          "updatedAt"
        ]
      },
      "SmsAccount": {
        "title": "SmsAccount",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "remote": {
            "type": "string"
          },
          "token": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "enum": [
              "twilio",
              "skebby",
              "connectel",
              "clicksend",
              "plivo",
              "clickatell",
              "bandwidth",
              "csc",
              "infobip",
              "intelepeer",
              "telnyx"
            ],
            "nullable": true
          },
          "accountSid": {
            "type": "string",
            "nullable": true
          },
          "authId": {
            "type": "string",
            "nullable": true
          },
          "authToken": {
            "type": "string",
            "nullable": true
          },
          "smsMethod": {
            "type": "string",
            "enum": [
              "SI",
              "TI",
              "GP"
            ],
            "nullable": true
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "apiKey": {
            "type": "string",
            "nullable": true
          },
          "applicationId": {
            "type": "string",
            "nullable": true
          },
          "accountId": {
            "type": "string",
            "nullable": true
          },
          "senderString": {
            "type": "string",
            "nullable": true
          },
          "deliveryReport": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "notificationTemplate": {
            "type": "string",
            "nullable": true
          },
          "notificationSound": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "notificationShake": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "waitForTheAssignedAgent": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 10
          },
          "queueTransfer": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "queueTransferTimeout": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 300
          },
          "agentTransfer": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "agentTransferTimeout": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 300
          },
          "baseUrl": {
            "type": "string",
            "nullable": true
          },
          "mandatoryDispositionPauseId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "mandatoryDisposition": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "waitForTheAssignedQueue": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 10
          },
          "aiAssistantId": {
            "type": "string",
            "nullable": true
          },
          "aiProviderId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ListId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "name",
          "key",
          "remote",
          "token",
          "deliveryReport",
          "notificationTemplate",
          "notificationSound",
          "notificationShake",
          "waitForTheAssignedAgent",
          "queueTransfer",
          "queueTransferTimeout",
          "agentTransfer",
          "agentTransferTimeout",
          "mandatoryDisposition",
          "waitForTheAssignedQueue",
          "createdAt",
          "updatedAt"
        ]
      },
      "SmsApplication": {
        "title": "SmsApplication",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "priority": {
            "type": "integer",
            "format": "int32"
          },
          "app": {
            "type": "string",
            "default": "noop"
          },
          "appdata": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "interval": {
            "type": "string",
            "nullable": true,
            "default": "*,*,*,*"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "SmsAccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "UserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "SmsQueueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "IntervalId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "TagId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "priority",
          "app",
          "interval",
          "createdAt",
          "updatedAt"
        ]
      },
      "SmsInteraction": {
        "title": "SmsInteraction",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "closed": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "closedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "disposition": {
            "type": "string",
            "nullable": true
          },
          "secondDisposition": {
            "type": "string",
            "nullable": true
          },
          "thirdDisposition": {
            "type": "string",
            "nullable": true
          },
          "note": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "read1stAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "firstMsgDirection": {
            "type": "string",
            "enum": [
              "in",
              "out"
            ],
            "default": "in"
          },
          "lastMsgAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastMsgDirection": {
            "type": "string",
            "enum": [
              "in",
              "out"
            ],
            "default": "in"
          },
          "autoreplyExecuted": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "queueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "OpenaiThreadUUID": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "cf_bool": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "cf_text": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "UserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "SmsAccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ContactId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "closed",
          "firstMsgDirection",
          "lastMsgDirection",
          "autoreplyExecuted",
          "OpenaiThreadUUID",
          "cf_bool",
          "cf_text",
          "createdAt",
          "updatedAt"
        ]
      },
      "SmsMessage": {
        "title": "SmsMessage",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "body": {
            "type": "string"
          },
          "read": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "direction": {
            "type": "string",
            "enum": [
              "in",
              "out"
            ],
            "default": "out"
          },
          "messageId": {
            "type": "string",
            "maxLength": 190,
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "readAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "secret": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "providerName": {
            "type": "string",
            "nullable": true
          },
          "providerResponse": {
            "type": "string",
            "nullable": true
          },
          "sentBy": {
            "type": "string",
            "enum": [
              "action_user",
              "action_agent",
              "action_internal_note",
              "action_nli",
              "auto_routing",
              "auto_system"
            ],
            "nullable": true,
            "default": null
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "SmsAccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "SmsInteractionId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "UserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ContactId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "AttachmentId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "body",
          "read",
          "direction",
          "secret",
          "sentBy",
          "createdAt",
          "updatedAt"
        ]
      },
      "SmsQueue": {
        "title": "SmsQueue",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "timeout": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "strategy": {
            "type": "string",
            "enum": [
              "rrmemory",
              "beepall",
              "roundrobin"
            ],
            "nullable": true
          },
          "socketioRoomName": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "array"
              },
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt"
        ]
      },
      "OpenaiBot": {
        "title": "OpenaiBot",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "welcomeMessage": {
            "type": "string"
          },
          "prompt": {
            "type": "string",
            "nullable": true
          },
          "errorMessage": {
            "type": "string"
          },
          "exitPhrase": {
            "type": "string"
          },
          "redirectMessage": {
            "type": "string"
          },
          "attachmentMessage": {
            "type": "string",
            "nullable": true
          },
          "maxTokens": {
            "type": "integer",
            "format": "int32"
          },
          "analyzeChatPromptEnabled": {
            "type": "boolean",
            "default": true
          },
          "analyzeChatPrompt": {
            "type": "string"
          },
          "model": {
            "type": "string",
            "nullable": true
          },
          "temperature": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "seed": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "AssistantUUID": {
            "type": "string",
            "nullable": true
          },
          "CloudProviderId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "welcomeMessage",
          "errorMessage",
          "exitPhrase",
          "redirectMessage",
          "maxTokens",
          "analyzeChatPromptEnabled",
          "analyzeChatPrompt",
          "createdAt",
          "updatedAt"
        ]
      },
      "OpenchannelAccount": {
        "title": "OpenchannelAccount",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "token": {
            "type": "string",
            "nullable": true
          },
          "replyUri": {
            "type": "string",
            "nullable": true
          },
          "key": {
            "type": "string"
          },
          "notificationTemplate": {
            "type": "string",
            "nullable": true
          },
          "notificationSound": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "notificationShake": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "waitForTheAssignedAgent": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 10
          },
          "mapKey": {
            "type": "string",
            "nullable": true
          },
          "queueTransfer": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "queueTransferTimeout": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 300
          },
          "agentTransfer": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "agentTransferTimeout": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 300
          },
          "mandatoryDispositionPauseId": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": null
          },
          "mandatoryDisposition": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "waitForTheAssignedQueue": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 10
          },
          "aiAssistantId": {
            "type": "string",
            "nullable": true
          },
          "aiProviderId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ListId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "name",
          "token",
          "key",
          "notificationTemplate",
          "notificationSound",
          "notificationShake",
          "waitForTheAssignedAgent",
          "queueTransfer",
          "queueTransferTimeout",
          "agentTransfer",
          "agentTransferTimeout",
          "mandatoryDispositionPauseId",
          "mandatoryDisposition",
          "waitForTheAssignedQueue",
          "createdAt",
          "updatedAt"
        ]
      },
      "OpenchannelApplication": {
        "title": "OpenchannelApplication",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "priority": {
            "type": "integer",
            "format": "int32"
          },
          "app": {
            "type": "string",
            "default": "noop"
          },
          "appdata": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "interval": {
            "type": "string",
            "nullable": true,
            "default": "*,*,*,*"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "OpenchannelAccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "UserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "OpenchannelQueueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "IntervalId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "TagId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "priority",
          "app",
          "interval",
          "createdAt",
          "updatedAt"
        ]
      },
      "OpenchannelInteraction": {
        "title": "OpenchannelInteraction",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "closed": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "closedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "disposition": {
            "type": "string",
            "nullable": true
          },
          "secondDisposition": {
            "type": "string",
            "nullable": true
          },
          "thirdDisposition": {
            "type": "string",
            "nullable": true
          },
          "note": {
            "type": "string",
            "nullable": true
          },
          "read1stAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "threadId": {
            "type": "string",
            "nullable": true
          },
          "externalUrl": {
            "type": "string",
            "nullable": true
          },
          "lastMsgAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "firstMsgDirection": {
            "type": "string",
            "enum": [
              "in",
              "out"
            ],
            "default": "in"
          },
          "lastMsgDirection": {
            "type": "string",
            "enum": [
              "in",
              "out"
            ],
            "default": "in"
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "autoreplyExecuted": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "context": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "array"
              },
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "nullable": true,
            "default": null
          },
          "queueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "OpenaiThreadUUID": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "cf_bool": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "cf_text": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "UserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "OpenchannelAccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ContactId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "closed",
          "firstMsgDirection",
          "lastMsgDirection",
          "autoreplyExecuted",
          "context",
          "OpenaiThreadUUID",
          "cf_bool",
          "cf_text",
          "createdAt",
          "updatedAt"
        ]
      },
      "OpenchannelMessage": {
        "title": "OpenchannelMessage",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "body": {
            "type": "string"
          },
          "read": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "secret": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "direction": {
            "type": "string",
            "enum": [
              "in",
              "out"
            ],
            "default": "out"
          },
          "readAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "providerName": {
            "type": "string",
            "nullable": true
          },
          "providerResponse": {
            "type": "string",
            "nullable": true
          },
          "integrationId": {
            "type": "string",
            "nullable": true
          },
          "parentIntegrationId": {
            "type": "string",
            "nullable": true
          },
          "sentBy": {
            "type": "string",
            "enum": [
              "action_user",
              "action_agent",
              "action_internal_note",
              "action_nli",
              "auto_routing",
              "auto_third_party",
              "auto_system"
            ],
            "nullable": true,
            "default": null
          },
          "thumbnail": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "array"
              },
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "OpenchannelAccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "OpenchannelInteractionId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "UserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ContactId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "AttachmentId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "body",
          "read",
          "secret",
          "direction",
          "sentBy",
          "createdAt",
          "updatedAt"
        ]
      },
      "OpenchannelQueue": {
        "title": "OpenchannelQueue",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "timeout": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "strategy": {
            "type": "string",
            "enum": [
              "rrmemory",
              "beepall",
              "roundrobin"
            ],
            "nullable": true
          },
          "socketioRoomName": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "array"
              },
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt"
        ]
      },
      "ChatWebsite": {
        "title": "ChatWebsite",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "mapKey": {
            "type": "string",
            "nullable": true,
            "default": "email"
          },
          "mapKeyOffline": {
            "type": "string",
            "nullable": true,
            "default": "email"
          },
          "key": {
            "type": "string"
          },
          "agentAlias": {
            "type": "string",
            "nullable": true,
            "default": "Agent"
          },
          "customerAlias": {
            "type": "string",
            "nullable": true,
            "default": "Me"
          },
          "color": {
            "type": "string",
            "default": "#011F6A"
          },
          "color_button": {
            "type": "string",
            "default": "#011F6A"
          },
          "textColor": {
            "type": "string",
            "default": "#ffffff"
          },
          "textButtonColor": {
            "type": "string",
            "default": "#ffffff"
          },
          "fontSize": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 15
          },
          "remote": {
            "type": "string",
            "nullable": true
          },
          "animation": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "header_shape": {
            "type": "string",
            "enum": [
              "rounded",
              "squared"
            ],
            "nullable": true,
            "default": "rounded"
          },
          "header_online": {
            "type": "string",
            "nullable": true,
            "default": "We are here!"
          },
          "start_chat_button": {
            "type": "string",
            "nullable": true,
            "default": "Chat"
          },
          "offline_chat_button": {
            "type": "string",
            "nullable": true,
            "default": "Send"
          },
          "header_offline": {
            "type": "string",
            "nullable": true,
            "default": "Contact us"
          },
          "download_transcript": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "timeout": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "whiteLabel": {
            "type": "string",
            "nullable": true,
            "default": "Powered by xCALLY"
          },
          "defaultWhiteLabel": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "sitepic": {
            "type": "string",
            "nullable": true
          },
          "closingQuestion": {
            "type": "string",
            "nullable": true,
            "default": "Do you want to close the interaction?"
          },
          "formSubmitSuccessMessage": {
            "type": "string",
            "nullable": true,
            "default": "Form properly submitted"
          },
          "formSubmitFailureMessage": {
            "type": "string",
            "nullable": true,
            "default": "Form submission error"
          },
          "noteTitle": {
            "type": "string",
            "nullable": true,
            "default": "Note"
          },
          "placeholderMessage": {
            "type": "string",
            "nullable": true,
            "default": "Type a message"
          },
          "closingMessage": {
            "type": "string",
            "nullable": true,
            "default": "Thanks you for your time!"
          },
          "closingMessageButton": {
            "type": "string",
            "nullable": true,
            "default": "Send"
          },
          "skipMessageButton": {
            "type": "string",
            "nullable": true,
            "default": "Skip"
          },
          "conditionAgreement": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "enableRating": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "enableFeedback": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "enableSendButton": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "enablePrintIcon": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "feedbackTitle": {
            "type": "string",
            "nullable": true,
            "default": "Feedback"
          },
          "ratingType": {
            "type": "string",
            "enum": [
              "star",
              "thumb"
            ],
            "nullable": true,
            "default": "star"
          },
          "ratingStarsNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 5
          },
          "onlineForm": {
            "type": "string",
            "nullable": true
          },
          "offlineForm": {
            "type": "string",
            "nullable": true
          },
          "token": {
            "type": "string",
            "nullable": true
          },
          "autoclose": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "enableCustomerWriting": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "forwardTranscript": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "forwardTranscriptMessage": {
            "type": "string",
            "nullable": true
          },
          "forwardOffline": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "forwardOfflineAddress": {
            "type": "string",
            "nullable": true
          },
          "waitingTitle": {
            "type": "string",
            "nullable": true,
            "default": "All of our agents are busy at this time. Your chat is very important to us."
          },
          "waitingMessage": {
            "type": "string",
            "nullable": true,
            "default": "Please hold and we will answer your request as soon as possible."
          },
          "offlineMessageSubject": {
            "type": "string",
            "nullable": true,
            "default": "New offline message from websiteName"
          },
          "offlineMessageBody": {
            "type": "string",
            "nullable": true,
            "default": "You received a new offline message from websiteName. Here you can find the details of the request:"
          },
          "enableUnmanagedNote": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "unmanagedMessage": {
            "type": "string",
            "nullable": true,
            "default": "Your request has not been processed."
          },
          "skipUnmanaged": {
            "type": "string",
            "nullable": true,
            "default": "Skip"
          },
          "sendUnmanaged": {
            "type": "string",
            "nullable": true,
            "default": "Send"
          },
          "enableCustomerAttachment": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "enableCustomerCheckmarks": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "agentAvatar": {
            "type": "string",
            "nullable": true
          },
          "showAgentAvatar": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "timezone": {
            "type": "string",
            "nullable": true
          },
          "notificationTemplate": {
            "type": "string",
            "nullable": true
          },
          "notificationSound": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "notificationShake": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "hideWhenOffline": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "agentIdentifier": {
            "type": "string",
            "nullable": true,
            "default": "website_alias"
          },
          "waitForTheAssignedAgent": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 10
          },
          "alignment": {
            "type": "string",
            "nullable": true,
            "default": "bottom_right"
          },
          "verticalAlignment": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 30
          },
          "labelText": {
            "type": "string",
            "nullable": true,
            "default": "CHAT"
          },
          "messagesAlignment": {
            "type": "string",
            "nullable": true,
            "default": "alternate"
          },
          "defaultTitle": {
            "type": "string",
            "nullable": true
          },
          "customerAvatar": {
            "type": "string",
            "nullable": true
          },
          "showCustomerAvatar": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "messageFontSize": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 12
          },
          "backgroundColor": {
            "type": "string",
            "default": "#fafafa"
          },
          "queueTransfer": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "queueTransferTimeout": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 300
          },
          "agentTransfer": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "agentTransferTimeout": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 300
          },
          "systemAlias": {
            "type": "string",
            "nullable": true,
            "default": "System"
          },
          "systemAvatar": {
            "type": "string",
            "nullable": true
          },
          "mandatoryDispositionPauseId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "mandatoryDisposition": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "vidaooEscalation": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "vidaooApiKey": {
            "type": "string",
            "nullable": true
          },
          "vidaooTopic": {
            "type": "string",
            "default": "Generated by XCALLY Motion"
          },
          "vidaooNote": {
            "type": "string",
            "nullable": true
          },
          "vidaooMetadata": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "openNewInteraction": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "subjectOffline": {
            "type": "string",
            "nullable": true
          },
          "waitForTheAssignedQueue": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 10
          },
          "enableCustomerAudioRecording": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "aiAssistantId": {
            "type": "string",
            "nullable": true
          },
          "aiProviderId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ListId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "IntervalId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "MailAccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "name",
          "address",
          "mapKey",
          "mapKeyOffline",
          "key",
          "agentAlias",
          "customerAlias",
          "color",
          "color_button",
          "textColor",
          "textButtonColor",
          "fontSize",
          "animation",
          "header_shape",
          "header_online",
          "start_chat_button",
          "offline_chat_button",
          "header_offline",
          "download_transcript",
          "timeout",
          "whiteLabel",
          "defaultWhiteLabel",
          "closingQuestion",
          "formSubmitSuccessMessage",
          "formSubmitFailureMessage",
          "noteTitle",
          "placeholderMessage",
          "closingMessage",
          "closingMessageButton",
          "skipMessageButton",
          "conditionAgreement",
          "enableRating",
          "enableFeedback",
          "enableSendButton",
          "enablePrintIcon",
          "feedbackTitle",
          "ratingType",
          "ratingStarsNumber",
          "onlineForm",
          "offlineForm",
          "token",
          "autoclose",
          "enableCustomerWriting",
          "forwardTranscript",
          "forwardOffline",
          "waitingTitle",
          "waitingMessage",
          "offlineMessageSubject",
          "offlineMessageBody",
          "enableUnmanagedNote",
          "unmanagedMessage",
          "skipUnmanaged",
          "sendUnmanaged",
          "enableCustomerAttachment",
          "enableCustomerCheckmarks",
          "showAgentAvatar",
          "notificationTemplate",
          "notificationSound",
          "notificationShake",
          "hideWhenOffline",
          "agentIdentifier",
          "waitForTheAssignedAgent",
          "alignment",
          "verticalAlignment",
          "labelText",
          "messagesAlignment",
          "showCustomerAvatar",
          "messageFontSize",
          "backgroundColor",
          "queueTransfer",
          "queueTransferTimeout",
          "agentTransfer",
          "agentTransferTimeout",
          "systemAlias",
          "mandatoryDisposition",
          "vidaooEscalation",
          "vidaooTopic",
          "vidaooNote",
          "vidaooMetadata",
          "openNewInteraction",
          "waitForTheAssignedQueue",
          "enableCustomerAudioRecording",
          "createdAt",
          "updatedAt"
        ]
      },
      "OpenchannelQueueReport": {
        "title": "OpenchannelQueueReport",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "uniqueid": {
            "type": "string"
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "joinAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "leaveAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "acceptAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "exitAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "reason": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "OpenchannelAccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ListId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ContactId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "OpenchannelInteractionId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "OpenchannelMessageId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "UserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "OpenchannelQueueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "uniqueid",
          "createdAt",
          "updatedAt"
        ]
      },
      "ChatApplication": {
        "title": "ChatApplication",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "priority": {
            "type": "integer",
            "format": "int32"
          },
          "app": {
            "type": "string",
            "default": "noop"
          },
          "appdata": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "interval": {
            "type": "string",
            "nullable": true,
            "default": "*,*,*,*"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ChatWebsiteId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "UserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ChatQueueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "TagId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "IntervalId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "priority",
          "app",
          "interval",
          "createdAt",
          "updatedAt"
        ]
      },
      "ChatInteraction": {
        "title": "ChatInteraction",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "closed": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "ratingValue": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ratingType": {
            "type": "string",
            "enum": [
              "star",
              "thumb"
            ],
            "nullable": true,
            "default": "star"
          },
          "ratingMessage": {
            "type": "string",
            "nullable": true
          },
          "pathTranscript": {
            "type": "string",
            "nullable": true
          },
          "mailTranscript": {
            "type": "string",
            "nullable": true
          },
          "closedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "disposition": {
            "type": "string",
            "nullable": true
          },
          "secondDisposition": {
            "type": "string",
            "nullable": true
          },
          "thirdDisposition": {
            "type": "string",
            "nullable": true
          },
          "note": {
            "type": "string",
            "nullable": true
          },
          "browserName": {
            "type": "string",
            "nullable": true
          },
          "browserVersion": {
            "type": "string",
            "nullable": true
          },
          "osName": {
            "type": "string",
            "nullable": true
          },
          "osVersion": {
            "type": "string",
            "nullable": true
          },
          "deviceModel": {
            "type": "string",
            "nullable": true
          },
          "deviceVendor": {
            "type": "string",
            "nullable": true
          },
          "deviceType": {
            "type": "string",
            "nullable": true
          },
          "referer": {
            "type": "string",
            "nullable": true
          },
          "customerIp": {
            "type": "string",
            "nullable": true
          },
          "formData": {
            "type": "string",
            "nullable": true
          },
          "read1stAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastMsgAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastMsgDirection": {
            "type": "string",
            "enum": [
              "in",
              "out"
            ],
            "default": "in"
          },
          "closeReason": {
            "type": "string",
            "nullable": true
          },
          "customerPort": {
            "type": "string",
            "nullable": true
          },
          "vidaooSessionId": {
            "type": "string",
            "nullable": true
          },
          "autoreplyExecuted": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "queueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "OpenaiThreadUUID": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "cf_bool": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "cf_text": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "UserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ChatWebsiteId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ContactId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "closed",
          "ratingType",
          "lastMsgDirection",
          "autoreplyExecuted",
          "OpenaiThreadUUID",
          "cf_bool",
          "cf_text",
          "createdAt",
          "updatedAt"
        ]
      },
      "ChatMessage": {
        "title": "ChatMessage",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "body": {
            "type": "string"
          },
          "read": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "secret": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "direction": {
            "type": "string",
            "enum": [
              "in",
              "out"
            ],
            "default": "out"
          },
          "readAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "providerName": {
            "type": "string",
            "nullable": true
          },
          "providerResponse": {
            "type": "string",
            "nullable": true
          },
          "sentBy": {
            "type": "string",
            "enum": [
              "action_user",
              "action_agent",
              "action_internal_note",
              "action_nli",
              "auto_system",
              "auto_routing",
              "auto_chat_snippet"
            ],
            "nullable": true,
            "default": null
          },
          "thumbnail": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "array"
              },
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ChatWebsiteId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ChatInteractionId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "UserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ContactId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "AttachmentId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "body",
          "read",
          "secret",
          "direction",
          "sentBy",
          "createdAt",
          "updatedAt"
        ]
      },
      "ChatOfflineMessage": {
        "title": "ChatOfflineMessage",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "body": {
            "type": "string"
          },
          "plainBody": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ContactId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ChatWebsiteId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "body",
          "plainBody",
          "createdAt",
          "updatedAt"
        ]
      },
      "ChatQueue": {
        "title": "ChatQueue",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "timeout": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "strategy": {
            "type": "string",
            "enum": [
              "rrmemory",
              "beepall",
              "roundrobin"
            ],
            "nullable": true
          },
          "socketioRoomName": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "array"
              },
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "createdAt",
          "updatedAt"
        ]
      },
      "AIPromptsAssistant": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "object": {
            "type": "string"
          },
          "created_at": {
            "type": "integer"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "model": {
            "type": "string"
          },
          "instructions": {
            "type": "string",
            "nullable": true
          },
          "tools": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "file_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "object"
          }
        }
      },
      "ChatGroup": {
        "title": "ChatGroup",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "write": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "socketioRoomName": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "array"
              },
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "write",
          "createdAt",
          "updatedAt"
        ]
      },
      "ChatProactiveAction": {
        "title": "ChatProactiveAction",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "mouseOver",
              "timeout"
            ],
            "nullable": true,
            "default": "mouseOver"
          },
          "selector": {
            "type": "string",
            "nullable": true
          },
          "timeout": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ChatWebsiteId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "createdAt",
          "updatedAt"
        ]
      },
      "CmCompany": {
        "title": "CmCompany",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "vat": {
            "type": "string",
            "nullable": true
          },
          "companyId": {
            "type": "string",
            "nullable": true
          },
          "website": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "fax": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "street": {
            "type": "string",
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "emailDomain": {
            "type": "string",
            "nullable": true
          },
          "sStreet": {
            "type": "string",
            "nullable": true
          },
          "sPostalCode": {
            "type": "string",
            "nullable": true
          },
          "sCity": {
            "type": "string",
            "nullable": true
          },
          "sCountry": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "createdAt",
          "updatedAt"
        ]
      },
      "CmContact": {
        "title": "CmContact",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "street": {
            "type": "string",
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "mobile": {
            "type": "string",
            "nullable": true
          },
          "fax": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string",
            "nullable": true
          },
          "facebook": {
            "type": "string",
            "nullable": true
          },
          "fb_data": {
            "type": "string",
            "nullable": true
          },
          "twitter": {
            "type": "string",
            "nullable": true
          },
          "skype": {
            "type": "string",
            "nullable": true
          },
          "teams": {
            "type": "string",
            "nullable": true
          },
          "viber": {
            "type": "string",
            "nullable": true
          },
          "line": {
            "type": "string",
            "nullable": true
          },
          "wechat": {
            "type": "string",
            "nullable": true
          },
          "telegram": {
            "type": "string",
            "nullable": true
          },
          "instagram": {
            "type": "string",
            "nullable": true
          },
          "instagram_data": {
            "type": "string",
            "nullable": true
          },
          "sinchId": {
            "type": "string",
            "nullable": true
          },
          "UserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "priority": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 2
          },
          "scheduledat": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "default": {}
          },
          "dialTimezone": {
            "type": "string",
            "nullable": true
          },
          "utcOffset": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "AdditionalPhones": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "CompanyId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ListId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "firstName",
          "priority",
          "scheduledat",
          "createdAt",
          "updatedAt"
        ]
      },
      "CmHopper": {
        "title": "CmHopper",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "phone": {
            "type": "string"
          },
          "active": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "scheduledat": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "default": "2024-07-24 17:58:09"
          },
          "countbusyretry": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "countcongestionretry": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "countnoanswerretry": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "callback": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "callbackuniqueid": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "callbackat": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "priority": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 2
          },
          "recallme": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "ContactId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ListId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "UserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "VoiceQueueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "CampaignId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "countnosuchnumberretry": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "countdropretry": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "countabandonedretry": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "countmachineretry": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "countagentrejectretry": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "recallmeNotifiedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "default": null
          },
          "dialTimezone": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "OrderBy": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "OwnerId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "phone",
          "active",
          "scheduledat",
          "countbusyretry",
          "countcongestionretry",
          "countnoanswerretry",
          "callback",
          "callbackuniqueid",
          "priority",
          "recallme",
          "countnosuchnumberretry",
          "countdropretry",
          "countabandonedretry",
          "countmachineretry",
          "countagentrejectretry",
          "recallmeNotifiedDate",
          "dialTimezone",
          "OrderBy",
          "createdAt",
          "updatedAt"
        ]
      },
      "CmHopperBlack": {
        "title": "CmHopperBlack",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "phone": {
            "type": "string"
          },
          "ContactId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ListId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "VoiceQueueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "CampaignId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "phone",
          "createdAt",
          "updatedAt"
        ]
      },
      "CmHopperFinal": {
        "title": "CmHopperFinal",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "state": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "statedesc": {
            "type": "string",
            "nullable": true
          },
          "scheduledat": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "countbusyretry": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "countcongestionretry": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "countnoanswerretry": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "countglobal": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "uniqueid": {
            "type": "string",
            "nullable": true
          },
          "originatecalleridnum": {
            "type": "string",
            "nullable": true
          },
          "originatecalleridname": {
            "type": "string",
            "nullable": true
          },
          "calleridnum": {
            "type": "string",
            "nullable": true
          },
          "calleridname": {
            "type": "string",
            "nullable": true
          },
          "starttime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "responsetime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "answertime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "droptime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endtime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ringtime": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "holdtime": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "talktime": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "followuptime": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "dropreason": {
            "type": "string",
            "nullable": true
          },
          "campaign": {
            "type": "string",
            "nullable": true
          },
          "campaigntype": {
            "type": "string",
            "nullable": true
          },
          "membername": {
            "type": "string",
            "nullable": true
          },
          "reason": {
            "type": "string",
            "nullable": true
          },
          "disposition": {
            "type": "string",
            "nullable": true
          },
          "secondDisposition": {
            "type": "string",
            "nullable": true
          },
          "thirdDisposition": {
            "type": "string",
            "nullable": true
          },
          "dispositionat": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "amd": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "fax": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "blacklist": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "rescheduled": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "rescheduledat": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "callback": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "callbackuniqueid": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "callbackat": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deleted": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "deletedat": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "recallme": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "agiafterat": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "countnosuchnumberretry": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "countdropretry": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "countabandonedretry": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "countmachineretry": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "countagentrejectretry": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "UserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "VoiceQueueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ContactId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "CampaignId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ListId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "countbusyretry",
          "countcongestionretry",
          "countnoanswerretry",
          "countglobal",
          "ringtime",
          "holdtime",
          "talktime",
          "followuptime",
          "amd",
          "fax",
          "blacklist",
          "rescheduled",
          "callback",
          "callbackuniqueid",
          "deleted",
          "recallme",
          "countnosuchnumberretry",
          "countdropretry",
          "countabandonedretry",
          "countmachineretry",
          "countagentrejectretry",
          "createdAt",
          "updatedAt"
        ]
      },
      "CmHopperHistory": {
        "title": "CmHopperHistory",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "state": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "statedesc": {
            "type": "string",
            "nullable": true
          },
          "scheduledat": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "countbusyretry": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "countcongestionretry": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "countnoanswerretry": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "countglobal": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "uniqueid": {
            "type": "string",
            "nullable": true
          },
          "originatecalleridnum": {
            "type": "string",
            "nullable": true
          },
          "originatecalleridname": {
            "type": "string",
            "nullable": true
          },
          "calleridnum": {
            "type": "string",
            "nullable": true
          },
          "calleridname": {
            "type": "string",
            "nullable": true
          },
          "starttime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "responsetime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "answertime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "droptime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endtime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ringtime": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "holdtime": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "talktime": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "followuptime": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "dropreason": {
            "type": "string",
            "nullable": true
          },
          "campaign": {
            "type": "string",
            "nullable": true
          },
          "campaigntype": {
            "type": "string",
            "nullable": true
          },
          "membername": {
            "type": "string",
            "nullable": true
          },
          "reason": {
            "type": "string",
            "nullable": true
          },
          "amd": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "fax": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "callback": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "callbackuniqueid": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "callbackat": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "recallme": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "editedat": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "edited": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "countnosuchnumberretry": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "countdropretry": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "countabandonedretry": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "countmachineretry": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "countagentrejectretry": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "dialTimezone": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "UserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "VoiceQueueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ContactId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "CampaignId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ListId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "countbusyretry",
          "countcongestionretry",
          "countnoanswerretry",
          "countglobal",
          "ringtime",
          "holdtime",
          "talktime",
          "followuptime",
          "amd",
          "fax",
          "callback",
          "callbackuniqueid",
          "recallme",
          "edited",
          "countnosuchnumberretry",
          "countdropretry",
          "countabandonedretry",
          "countmachineretry",
          "countagentrejectretry",
          "dialTimezone",
          "createdAt",
          "updatedAt"
        ]
      },
      "ReportAgentPreview": {
        "title": "ReportAgentPreview",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "state": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "statedesc": {
            "type": "string",
            "nullable": true
          },
          "scheduledat": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "uniqueid": {
            "type": "string",
            "nullable": true
          },
          "starttime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "responsetime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ringtime": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "campaign": {
            "type": "string",
            "nullable": true
          },
          "campaigntype": {
            "type": "string",
            "nullable": true
          },
          "membername": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "UserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "VoiceQueueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ContactId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ListId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "ringtime",
          "createdAt",
          "updatedAt"
        ]
      },
      "CmCustomField": {
        "title": "CmCustomField",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "array"
              },
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "nullable": true
          },
          "alias": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "values": {
            "type": "string",
            "nullable": true
          },
          "required": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "clickToAction": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "actionType": {
            "type": "string",
            "enum": [
              "voice"
            ],
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ListId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "alias",
          "type",
          "required",
          "clickToAction",
          "createdAt",
          "updatedAt"
        ]
      },
      "Action": {
        "title": "Action",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "array"
              },
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "nullable": true
          },
          "action": {
            "type": "string"
          },
          "data1": {
            "type": "string",
            "maxLength": 4096,
            "nullable": true
          },
          "data2": {
            "type": "string",
            "maxLength": 4096,
            "nullable": true
          },
          "data3": {
            "type": "string",
            "maxLength": 4096,
            "nullable": true
          },
          "data4": {
            "type": "string",
            "maxLength": 4096,
            "nullable": true
          },
          "data5": {
            "type": "string",
            "maxLength": 4096,
            "nullable": true
          },
          "data6": {
            "type": "string",
            "nullable": true
          },
          "data7": {
            "type": "string",
            "nullable": true
          },
          "data8": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "AutomationId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "TriggerId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "action",
          "createdAt",
          "updatedAt"
        ]
      },
      "Automation": {
        "title": "Automation",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "channel": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "timeout": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 10
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "status",
          "timeout",
          "createdAt",
          "updatedAt"
        ]
      },
      "CannedAnswer": {
        "title": "CannedAnswer",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "array"
              },
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "nullable": true
          },
          "subject": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "type": {
            "type": "string",
            "enum": [
              "MAIL_INVITATION"
            ],
            "nullable": true,
            "default": null
          },
          "format": {
            "type": "string",
            "enum": [
              "text",
              "html",
              "markdown"
            ],
            "nullable": true,
            "default": "text"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "MailAccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FaxAccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "SmsAccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "OpenchannelAccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ChatWebsiteId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "WhatsappAccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "key",
          "value",
          "subject",
          "type",
          "format",
          "createdAt",
          "updatedAt"
        ]
      },
      "Disposition": {
        "title": "Disposition",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "level": {
            "type": "string",
            "enum": [
              "first",
              "second",
              "third"
            ],
            "default": "first"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "MailAccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FaxAccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "SmsAccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "OpenchannelAccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ChatWebsiteId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ParentId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ListId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "WhatsappAccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "name",
          "level",
          "createdAt",
          "updatedAt"
        ]
      },
      "Condition": {
        "title": "Condition",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "array"
              },
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "nullable": true
          },
          "field": {
            "type": "string"
          },
          "operator": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "AutomationAllId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "AutomationAnyId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "TriggerAllId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "TriggerAnyId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "field",
          "operator",
          "value",
          "createdAt",
          "updatedAt"
        ]
      },
      "Interval": {
        "title": "Interval",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "interval": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "IntervalId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt"
        ]
      },
      "Pause": {
        "title": "Pause",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "createdAt",
          "updatedAt"
        ]
      },
      "Profile": {
        "title": "Profile",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "isEnabled": {
            "type": "boolean",
            "default": false
          },
          "socketioRoomName": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "array"
              },
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "isEnabled",
          "createdAt",
          "updatedAt"
        ]
      },
      "ProfileUser": {
        "title": "ProfileUser",
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "UserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ProfileId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "createdAt",
          "updatedAt"
        ]
      },
      "ProfileChatQueue": {
        "title": "ProfileChatQueue",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ProfileId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ChatQueueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt"
        ]
      },
      "ProfileOpenchannelQueue": {
        "title": "ProfileOpenchannelQueue",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ProfileId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "OpenchannelQueueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt"
        ]
      },
      "ProfileSmsQueue": {
        "title": "ProfileSmsQueue",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ProfileId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "SmsQueueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt"
        ]
      },
      "ProfileMailQueue": {
        "title": "ProfileMailQueue",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ProfileId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "MailQueueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt"
        ]
      },
      "ProfileVoiceQueue": {
        "title": "ProfileVoiceQueue",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "penalty": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ProfileId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "VoiceQueueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "penalty",
          "createdAt",
          "updatedAt"
        ]
      },
      "ProfileWhatsappQueue": {
        "title": "ProfileWhatsappQueue",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ProfileId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "WhatsappQueueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt"
        ]
      },
      "ProfileFaxQueue": {
        "title": "ProfileFaxQueue",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ProfileId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FaxQueueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt"
        ]
      },
      "Cdr": {
        "title": "Cdr",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "calldate": {
            "type": "string",
            "format": "date-time",
            "default": "1970-01-01 00:00:01"
          },
          "clid": {
            "type": "string",
            "nullable": true
          },
          "src": {
            "type": "string",
            "nullable": true
          },
          "dst": {
            "type": "string",
            "nullable": true
          },
          "dcontext": {
            "type": "string",
            "nullable": true
          },
          "channel": {
            "type": "string",
            "nullable": true
          },
          "dstchannel": {
            "type": "string",
            "nullable": true
          },
          "lastapp": {
            "type": "string",
            "nullable": true
          },
          "lastdata": {
            "type": "string",
            "nullable": true
          },
          "duration": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "billsec": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "disposition": {
            "type": "string",
            "nullable": true
          },
          "amaflags": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "accountcode": {
            "type": "string",
            "nullable": true
          },
          "userfield": {
            "type": "string",
            "nullable": true
          },
          "uniqueid": {
            "type": "string",
            "nullable": true
          },
          "linkedid": {
            "type": "string",
            "nullable": true
          },
          "sequence": {
            "type": "string",
            "nullable": true
          },
          "peeraccount": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "tag": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "id",
          "calldate",
          "duration",
          "billsec",
          "amaflags"
        ]
      },
      "VoiceQueuesLog": {
        "title": "VoiceQueuesLog",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "time": {
            "type": "string",
            "nullable": true
          },
          "callid": {
            "type": "string",
            "default": ""
          },
          "queuename": {
            "type": "string",
            "default": ""
          },
          "agent": {
            "type": "string",
            "default": ""
          },
          "event": {
            "type": "string",
            "default": ""
          },
          "data": {
            "type": "string",
            "default": ""
          },
          "data1": {
            "type": "string",
            "default": ""
          },
          "data2": {
            "type": "string",
            "default": ""
          },
          "data3": {
            "type": "string",
            "default": ""
          },
          "data4": {
            "type": "string",
            "default": ""
          },
          "data5": {
            "type": "string",
            "default": ""
          },
          "dtm": {
            "type": "string",
            "format": "date-time",
            "default": {
              "val": "CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"
            }
          }
        },
        "required": [
          "id",
          "callid",
          "queuename",
          "agent",
          "event",
          "data",
          "data1",
          "data2",
          "data3",
          "data4",
          "data5",
          "dtm"
        ]
      },
      "Schedule": {
        "title": "Schedule",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "default": false
          },
          "cron": {
            "type": "string",
            "default": "0 0 * * *"
          },
          "startAt": {
            "type": "string",
            "format": "date-time"
          },
          "endAt": {
            "type": "string",
            "format": "date-time"
          },
          "subtractNumber": {
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "subtractUnit": {
            "type": "string",
            "enum": [
              "years",
              "quarters",
              "months",
              "weeks",
              "days",
              "hours",
              "minutes"
            ],
            "default": "days"
          },
          "output": {
            "type": "string",
            "enum": [
              "csv",
              "pdf",
              "xlsx",
              "xlsx-old"
            ],
            "default": "csv"
          },
          "type": {
            "type": "string",
            "enum": [
              "custom",
              "default"
            ],
            "default": "custom"
          },
          "sendMail": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "cc": {
            "type": "string",
            "nullable": true
          },
          "bcc": {
            "type": "string",
            "nullable": true
          },
          "sendIfEmpty": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "MailAccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "DefaultReportId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "CustomReportId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "name",
          "active",
          "cron",
          "startAt",
          "endAt",
          "subtractNumber",
          "subtractUnit",
          "output",
          "type",
          "sendMail",
          "sendIfEmpty",
          "createdAt",
          "updatedAt"
        ]
      },
      "Sound": {
        "title": "Sound",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "save_name": {
            "type": "string",
            "nullable": true
          },
          "display_name": {
            "type": "string",
            "nullable": true,
            "default": ""
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "original_format": {
            "type": "string",
            "nullable": true
          },
          "original_duration": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "original_sampleCount": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "original_channelCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "original_bitRate": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "original_sampleRate": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "converted_format": {
            "type": "string",
            "nullable": true
          },
          "converted_duration": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "converted_sampleCount": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "converted_channelCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "converted_bitRate": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "converted_sampleRate": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "display_name",
          "createdAt",
          "updatedAt"
        ]
      },
      "Tag": {
        "title": "Tag",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "color": {
            "type": "string",
            "nullable": true,
            "default": "#0091EA"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "color",
          "createdAt",
          "updatedAt"
        ]
      },
      "Template": {
        "title": "Template",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "html": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt"
        ]
      },
      "Trigger": {
        "title": "Trigger",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "channel": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "status",
          "createdAt",
          "updatedAt"
        ]
      },
      "Variable": {
        "title": "Variable",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "createdAt",
          "updatedAt"
        ]
      },
      "Integration": {
        "title": "Integration",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "main": {
            "type": "string",
            "nullable": true,
            "default": "app.js"
          },
          "filename": {
            "type": "string",
            "nullable": true
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "size": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "author": {
            "type": "string",
            "nullable": true
          },
          "logo": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "remoteUri": {
            "type": "string",
            "nullable": true
          },
          "link": {
            "type": "string",
            "nullable": true,
            "default": "#"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "version",
          "main",
          "active",
          "link",
          "createdAt",
          "updatedAt"
        ]
      },
      "IntegrationReport": {
        "title": "IntegrationReport",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "integration": {
            "type": "string",
            "nullable": true
          },
          "eventChannel": {
            "type": "string",
            "nullable": true
          },
          "exitStatus": {
            "type": "string",
            "nullable": true
          },
          "ticketId": {
            "type": "string",
            "nullable": true
          },
          "integrationId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "contacts": {
            "type": "string",
            "nullable": true
          },
          "uniqueid": {
            "type": "string",
            "nullable": true
          },
          "calleridnum": {
            "type": "string",
            "nullable": true
          },
          "calleridname": {
            "type": "string",
            "nullable": true
          },
          "queue": {
            "type": "string",
            "nullable": true
          },
          "interface": {
            "type": "string",
            "nullable": true
          },
          "membername": {
            "type": "string",
            "nullable": true
          },
          "agentcalledAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "agentconnectAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "holdtime": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "agentcomplete": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "agentcompleteAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "talktime": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "agentacw": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "acwtime": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "reason": {
            "type": "string",
            "nullable": true
          },
          "agentringnoanswer": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "agentringnoanswerAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "agentdump": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "agentdumpAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastevent": {
            "type": "string",
            "nullable": true
          },
          "channel": {
            "type": "string",
            "nullable": true
          },
          "channelstate": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "channelstatedesc": {
            "type": "string",
            "nullable": true
          },
          "connectedlinenum": {
            "type": "string",
            "nullable": true
          },
          "connectedlinename": {
            "type": "string",
            "nullable": true
          },
          "language": {
            "type": "string",
            "nullable": true
          },
          "accountcode": {
            "type": "string",
            "nullable": true
          },
          "context": {
            "type": "string",
            "nullable": true
          },
          "exten": {
            "type": "string",
            "nullable": true
          },
          "priority": {
            "type": "string",
            "nullable": true
          },
          "destchannel": {
            "type": "string",
            "nullable": true
          },
          "destchannelstate": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "destchannelstatedesc": {
            "type": "string",
            "nullable": true
          },
          "destcalleridnum": {
            "type": "string",
            "nullable": true
          },
          "destcalleridname": {
            "type": "string",
            "nullable": true
          },
          "destconnectedlinenum": {
            "type": "string",
            "nullable": true
          },
          "destconnectedlinename": {
            "type": "string",
            "nullable": true
          },
          "destlanguage": {
            "type": "string",
            "nullable": true
          },
          "destaccountcode": {
            "type": "string",
            "nullable": true
          },
          "destcontext": {
            "type": "string",
            "nullable": true
          },
          "destexten": {
            "type": "string",
            "nullable": true
          },
          "destpriority": {
            "type": "string",
            "nullable": true
          },
          "destuniqueid": {
            "type": "string",
            "nullable": true
          },
          "messageId": {
            "type": "string",
            "nullable": true
          },
          "inReplyTo": {
            "type": "string",
            "nullable": true
          },
          "subject": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "to": {
            "type": "string",
            "nullable": true
          },
          "cc": {
            "type": "string",
            "nullable": true
          },
          "attachment": {
            "type": "string",
            "nullable": true
          },
          "html": {
            "type": "string",
            "nullable": true
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "enum": [
              "SENT",
              "SENDING",
              "RECEIVED",
              "FAILED"
            ],
            "nullable": true
          },
          "url": {
            "type": "string",
            "nullable": true
          },
          "app": {
            "type": "string",
            "nullable": true
          },
          "appdata": {
            "type": "string",
            "nullable": true
          },
          "projectId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "agentcomplete",
          "agentacw",
          "agentringnoanswer",
          "agentdump",
          "createdAt",
          "updatedAt"
        ]
      },
      "AnalyticCustomReport": {
        "title": "AnalyticCustomReport",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "parent": {
            "type": "string",
            "nullable": true
          },
          "table": {
            "type": "string",
            "nullable": true
          },
          "conditions": {
            "type": "string",
            "nullable": true
          },
          "joins": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "required": [
          "id",
          "name",
          "createdAt",
          "updatedAt"
        ]
      },
      "AnalyticDefaultReport": {
        "title": "AnalyticDefaultReport",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "parent": {
            "type": "string",
            "nullable": true
          },
          "table": {
            "type": "string",
            "nullable": true
          },
          "conditions": {
            "type": "string",
            "nullable": true
          },
          "joins": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "createdAt",
          "updatedAt"
        ]
      },
      "AnalyticExtractedReport": {
        "title": "AnalyticExtractedReport",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "basename": {
            "type": "string"
          },
          "output": {
            "type": "string",
            "enum": [
              "csv",
              "pdf",
              "xlsx",
              "xlsx-old"
            ],
            "default": "csv"
          },
          "savename": {
            "type": "string"
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true,
            "default": "Loading"
          },
          "type": {
            "type": "string",
            "enum": [
              "manual",
              "scheduled"
            ],
            "default": "manual"
          },
          "reportId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "reportType": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "basename",
          "output",
          "savename",
          "status",
          "type",
          "createdAt",
          "updatedAt"
        ]
      },
      "AnalyticMetric": {
        "title": "AnalyticMetric",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "table": {
            "type": "string",
            "nullable": true
          },
          "metric": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "createdAt",
          "updatedAt"
        ]
      },
      "AnalyticFieldReport": {
        "title": "AnalyticFieldReport",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "field": {
            "type": "string",
            "nullable": true
          },
          "alias": {
            "type": "string",
            "nullable": true
          },
          "function": {
            "type": "string",
            "nullable": true
          },
          "format": {
            "type": "string",
            "nullable": true
          },
          "groupBy": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "orderBy": {
            "type": "string",
            "nullable": true
          },
          "custom": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "CustomReportId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "DefaultReportId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "MetricId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "groupBy",
          "custom",
          "createdAt",
          "updatedAt"
        ]
      },
      "AnalyticTreeReport": {
        "title": "AnalyticTreeReport",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "tree": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "tree",
          "createdAt",
          "updatedAt"
        ]
      },
      "SalesforceAccount": {
        "title": "SalesforceAccount",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "remoteUri": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "clientId": {
            "type": "string",
            "nullable": true
          },
          "clientSecret": {
            "type": "string",
            "nullable": true
          },
          "securityToken": {
            "type": "string",
            "nullable": true
          },
          "serverUrl": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "integrationTab",
              "newTab"
            ],
            "nullable": true,
            "default": "integrationTab"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "serverUrl",
          "type",
          "createdAt",
          "updatedAt"
        ],
        "$ref": "#/components/schemas/SalesforceAccount"
      },
      "SalesforceConfiguration": {
        "title": "SalesforceConfiguration",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "ticketType": {
            "type": "string",
            "enum": [
              "Task",
              "Case"
            ],
            "nullable": true,
            "default": "Task"
          },
          "moduleSearch": {
            "type": "string",
            "enum": [
              "contact_lead",
              "contact",
              "lead",
              "account_contact_lead",
              "account"
            ],
            "nullable": true,
            "default": "contact_lead"
          },
          "moduleCreate": {
            "type": "string",
            "enum": [
              "nothing",
              "contact",
              "lead",
              "account"
            ],
            "nullable": true,
            "default": "lead"
          },
          "leadId": {
            "type": "string",
            "nullable": true
          },
          "additionalSearchAccount": {
            "type": "string",
            "nullable": true
          },
          "additionalSearchContact": {
            "type": "string",
            "nullable": true
          },
          "additionalSearchLead": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "AccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "ticketType",
          "moduleSearch",
          "moduleCreate",
          "createdAt",
          "updatedAt"
        ]
      },
      "SalesforceField": {
        "title": "SalesforceField",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "enum": [
              "string",
              "variable",
              "customVariable",
              "keyValue",
              "picklist"
            ],
            "nullable": true,
            "default": "string"
          },
          "content": {
            "type": "string",
            "nullable": true
          },
          "key": {
            "type": "string",
            "nullable": true
          },
          "keyType": {
            "type": "string",
            "enum": [
              "string",
              "variable",
              "customVariable"
            ],
            "nullable": true
          },
          "keyContent": {
            "type": "string",
            "nullable": true
          },
          "idField": {
            "type": "string",
            "nullable": true
          },
          "variableName": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "SubjectId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "DescriptionId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FieldId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "VariableId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "type",
          "createdAt",
          "updatedAt"
        ]
      },
      "SugarcrmAccount": {
        "title": "SugarcrmAccount",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "remoteUri": {
            "type": "string",
            "nullable": true
          },
          "serverUrl": {
            "type": "string"
          },
          "contactPhoneKey": {
            "type": "string",
            "enum": [
              "phone_home",
              "phone_mobile",
              "phone_work"
            ],
            "nullable": true,
            "default": "phone_home"
          },
          "integrationName": {
            "type": "string",
            "enum": [
              "SuiteCRM",
              "SugarCRM"
            ],
            "nullable": true,
            "default": "SugarCRM"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "serverUrl",
          "contactPhoneKey",
          "integrationName",
          "createdAt",
          "updatedAt"
        ]
      },
      "SugarcrmConfiguration": {
        "title": "SugarcrmConfiguration",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "AccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt"
        ]
      },
      "SugarcrmField": {
        "title": "SugarcrmField",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "enum": [
              "string",
              "variable",
              "customVariable",
              "keyValue",
              "picklist"
            ],
            "nullable": true,
            "default": "string"
          },
          "content": {
            "type": "string",
            "nullable": true
          },
          "key": {
            "type": "string",
            "nullable": true
          },
          "keyType": {
            "type": "string",
            "enum": [
              "string",
              "variable",
              "customVariable"
            ],
            "nullable": true
          },
          "keyContent": {
            "type": "string",
            "nullable": true
          },
          "idField": {
            "type": "string",
            "nullable": true
          },
          "nameField": {
            "type": "string",
            "nullable": true
          },
          "customField": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "variableName": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "SubjectId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "DescriptionId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FieldId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "VariableId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "type",
          "customField",
          "createdAt",
          "updatedAt"
        ]
      },
      "ZohoAccount": {
        "title": "ZohoAccount",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "host": {
            "type": "string",
            "nullable": true
          },
          "zone": {
            "type": "string",
            "nullable": true
          },
          "clientId": {
            "type": "string",
            "nullable": true
          },
          "clientSecret": {
            "type": "string",
            "nullable": true
          },
          "serverUrl": {
            "type": "string"
          },
          "code": {
            "type": "string",
            "nullable": true
          },
          "refreshToken": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "serverUrl",
          "createdAt",
          "updatedAt"
        ]
      },
      "ZohoConfiguration": {
        "title": "ZohoConfiguration",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "moduleCreate": {
            "type": "string",
            "enum": [
              "lead",
              "contact",
              "nothing"
            ],
            "nullable": true,
            "default": "lead"
          },
          "moduleSearch": {
            "type": "string",
            "enum": [
              "contact_lead",
              "contact",
              "lead"
            ],
            "nullable": true,
            "default": "contact_lead"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "AccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "moduleCreate",
          "moduleSearch",
          "createdAt",
          "updatedAt"
        ]
      },
      "ZohoField": {
        "title": "ZohoField",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "enum": [
              "string",
              "variable",
              "customVariable",
              "keyValue",
              "picklist"
            ],
            "nullable": true,
            "default": "string"
          },
          "content": {
            "type": "string",
            "nullable": true
          },
          "key": {
            "type": "string",
            "nullable": true
          },
          "keyType": {
            "type": "string",
            "enum": [
              "string",
              "variable",
              "customVariable"
            ],
            "nullable": true
          },
          "keyContent": {
            "type": "string",
            "nullable": true
          },
          "idField": {
            "type": "string",
            "nullable": true
          },
          "nameField": {
            "type": "string",
            "nullable": true
          },
          "customField": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "variableName": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "SubjectId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "DescriptionId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FieldId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "VariableId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "type",
          "customField",
          "createdAt",
          "updatedAt"
        ]
      },
      "ZendeskAccount": {
        "title": "ZendeskAccount",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "token": {
            "type": "string",
            "nullable": true
          },
          "remoteUri": {
            "type": "string",
            "nullable": true
          },
          "authType": {
            "type": "string",
            "enum": [
              "password",
              "token"
            ],
            "nullable": true,
            "default": "password"
          },
          "serverUrl": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "integrationTab",
              "newTab"
            ],
            "nullable": true,
            "default": "integrationTab"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "authType",
          "serverUrl",
          "type",
          "createdAt",
          "updatedAt"
        ],
        "$ref": "#/components/schemas/ZendeskAccount"
      },
      "ZendeskConfiguration": {
        "title": "ZendeskConfiguration",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "AccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt"
        ]
      },
      "ZendeskField": {
        "title": "ZendeskField",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "enum": [
              "string",
              "variable",
              "customVariable",
              "keyValue",
              "picklist"
            ],
            "nullable": true,
            "default": "string"
          },
          "content": {
            "type": "string",
            "nullable": true
          },
          "key": {
            "type": "string",
            "nullable": true
          },
          "keyType": {
            "type": "string",
            "enum": [
              "string",
              "variable",
              "customVariable"
            ],
            "nullable": true
          },
          "keyContent": {
            "type": "string",
            "nullable": true
          },
          "idField": {
            "type": "string",
            "nullable": true
          },
          "nameField": {
            "type": "string",
            "nullable": true
          },
          "customField": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "variableName": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "SubjectId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "DescriptionId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FieldId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "VariableId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "type",
          "customField",
          "createdAt",
          "updatedAt"
        ]
      },
      "FreshdeskAccount": {
        "title": "FreshdeskAccount",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "apiKey": {
            "type": "string",
            "nullable": true
          },
          "remoteUri": {
            "type": "string",
            "nullable": true
          },
          "serverUrl": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "serverUrl",
          "createdAt",
          "updatedAt"
        ]
      },
      "FreshdeskConfiguration": {
        "title": "FreshdeskConfiguration",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "AccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt"
        ]
      },
      "FreshdeskField": {
        "title": "FreshdeskField",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "enum": [
              "string",
              "variable",
              "customVariable",
              "keyValue",
              "picklist"
            ],
            "nullable": true,
            "default": "string"
          },
          "content": {
            "type": "string",
            "nullable": true
          },
          "key": {
            "type": "string",
            "nullable": true
          },
          "keyType": {
            "type": "string",
            "enum": [
              "string",
              "variable",
              "customVariable"
            ],
            "nullable": true
          },
          "keyContent": {
            "type": "string",
            "nullable": true
          },
          "idField": {
            "type": "string",
            "nullable": true
          },
          "nameField": {
            "type": "string",
            "nullable": true
          },
          "customField": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "variableName": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "SubjectId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "DescriptionId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FieldId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "VariableId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "type",
          "customField",
          "createdAt",
          "updatedAt"
        ]
      },
      "VtigerAccount": {
        "title": "VtigerAccount",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "username": {
            "type": "string"
          },
          "moduleName": {
            "type": "string",
            "default": "HelpDesk"
          },
          "remoteUri": {
            "type": "string"
          },
          "serverUrl": {
            "type": "string"
          },
          "accessKey": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "username",
          "moduleName",
          "remoteUri",
          "serverUrl",
          "accessKey",
          "createdAt",
          "updatedAt"
        ]
      },
      "VtigerConfiguration": {
        "title": "VtigerConfiguration",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "AccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt"
        ]
      },
      "VtigerField": {
        "title": "VtigerField",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "enum": [
              "string",
              "variable",
              "customVariable",
              "keyValue",
              "picklist"
            ],
            "nullable": true,
            "default": "string"
          },
          "content": {
            "type": "string",
            "nullable": true
          },
          "key": {
            "type": "string",
            "nullable": true
          },
          "keyType": {
            "type": "string",
            "enum": [
              "string",
              "variable",
              "customVariable"
            ],
            "nullable": true
          },
          "keyContent": {
            "type": "string",
            "nullable": true
          },
          "idField": {
            "type": "string",
            "nullable": true
          },
          "nameField": {
            "type": "string",
            "nullable": true
          },
          "customField": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "variableName": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "SubjectId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "DescriptionId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FieldId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "VariableId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "type",
          "customField",
          "createdAt",
          "updatedAt"
        ]
      },
      "ServicenowAccount": {
        "title": "ServicenowAccount",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "remoteUri": {
            "type": "string",
            "nullable": true
          },
          "serverUrl": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "serverUrl",
          "createdAt",
          "updatedAt"
        ]
      },
      "ServicenowConfiguration": {
        "title": "ServicenowConfiguration",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "AccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt"
        ]
      },
      "ServicenowField": {
        "title": "ServicenowField",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "enum": [
              "string",
              "variable",
              "customVariable",
              "keyValue",
              "picklist"
            ],
            "nullable": true,
            "default": "string"
          },
          "content": {
            "type": "string",
            "nullable": true
          },
          "key": {
            "type": "string",
            "nullable": true
          },
          "keyType": {
            "type": "string",
            "enum": [
              "string",
              "variable",
              "customVariable"
            ],
            "nullable": true
          },
          "keyContent": {
            "type": "string",
            "nullable": true
          },
          "idField": {
            "type": "string",
            "nullable": true
          },
          "nameField": {
            "type": "string",
            "nullable": true
          },
          "customField": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "variableName": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "SubjectId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "DescriptionId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FieldId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "VariableId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "type",
          "customField",
          "createdAt",
          "updatedAt"
        ]
      },
      "Dynamics365Account": {
        "title": "Dynamics365Account",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "remoteUri": {
            "type": "string",
            "nullable": true
          },
          "tenantId": {
            "type": "string",
            "nullable": true
          },
          "clientId": {
            "type": "string",
            "nullable": true
          },
          "clientSecret": {
            "type": "string",
            "nullable": true
          },
          "serverUrl": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "modernAuthentication": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "CloudProviderId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "serverUrl",
          "modernAuthentication",
          "createdAt",
          "updatedAt"
        ]
      },
      "Dynamics365Configuration": {
        "title": "Dynamics365Configuration",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "ticketType": {
            "type": "string",
            "enum": [
              "incident",
              "phonecall"
            ],
            "nullable": true,
            "default": "incident"
          },
          "moduleCreate": {
            "type": "string",
            "enum": [
              "contact",
              "nothing"
            ],
            "default": "contact"
          },
          "additionalSearchContact": {
            "type": "string",
            "nullable": true
          },
          "openNewTab": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "AccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "ticketType",
          "moduleCreate",
          "openNewTab",
          "createdAt",
          "updatedAt"
        ]
      },
      "Dynamics365Field": {
        "title": "Dynamics365Field",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "enum": [
              "string",
              "variable",
              "customVariable",
              "keyValue",
              "picklist"
            ],
            "nullable": true,
            "default": "string"
          },
          "content": {
            "type": "string",
            "nullable": true
          },
          "key": {
            "type": "string",
            "nullable": true
          },
          "keyType": {
            "type": "string",
            "enum": [
              "string",
              "variable",
              "customVariable"
            ],
            "nullable": true
          },
          "keyContent": {
            "type": "string",
            "nullable": true
          },
          "idField": {
            "type": "string",
            "nullable": true
          },
          "nameField": {
            "type": "string",
            "nullable": true
          },
          "customField": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "variableName": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "SubjectId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "DescriptionId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FieldId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "VariableId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "type",
          "customField",
          "createdAt",
          "updatedAt"
        ]
      },
      "FreshsalesAccount": {
        "title": "FreshsalesAccount",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "apiKey": {
            "type": "string",
            "nullable": true
          },
          "remoteUri": {
            "type": "string",
            "nullable": true
          },
          "serverUrl": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "serverUrl",
          "createdAt",
          "updatedAt"
        ]
      },
      "FreshsalesConfiguration": {
        "title": "FreshsalesConfiguration",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "AccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt"
        ]
      },
      "FreshsalesField": {
        "title": "FreshsalesField",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "enum": [
              "string",
              "variable",
              "customVariable",
              "keyValue",
              "picklist"
            ],
            "nullable": true,
            "default": "string"
          },
          "content": {
            "type": "string",
            "nullable": true
          },
          "key": {
            "type": "string",
            "nullable": true
          },
          "keyType": {
            "type": "string",
            "enum": [
              "string",
              "variable",
              "customVariable"
            ],
            "nullable": true
          },
          "keyContent": {
            "type": "string",
            "nullable": true
          },
          "idField": {
            "type": "string",
            "nullable": true
          },
          "nameField": {
            "type": "string",
            "nullable": true
          },
          "customField": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "variableName": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "SubjectId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "DescriptionId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FieldId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "VariableId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "type",
          "customField",
          "createdAt",
          "updatedAt"
        ]
      },
      "Network": {
        "title": "Network",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "enum": [
              "localnet",
              "externip",
              "stun",
              "turn"
            ],
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt"
        ]
      },
      "ChatQueueReport": {
        "title": "ChatQueueReport",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "uniqueid": {
            "type": "string"
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "joinAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "leaveAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "acceptAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "exitAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "reason": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ChatWebsiteId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ListId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ContactId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ChatInteractionId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ChatMessageId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "UserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ChatQueueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "uniqueid",
          "createdAt",
          "updatedAt"
        ]
      },
      "ChatInternalMessage": {
        "title": "ChatInternalMessage",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "body": {
            "type": "string"
          },
          "read": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "ChatInternalMessageId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ChatGroupId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FromId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ToId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "body",
          "read",
          "createdAt",
          "updatedAt"
        ]
      },
      "JscriptyAnswerReport": {
        "title": "JscriptyAnswerReport",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "question": {
            "type": "string",
            "nullable": true
          },
          "answer": {
            "type": "string",
            "nullable": true
          },
          "membername": {
            "type": "string",
            "nullable": true
          },
          "projectname": {
            "type": "string",
            "nullable": true
          },
          "queue": {
            "type": "string",
            "nullable": true
          },
          "uniqueid": {
            "type": "string",
            "nullable": true
          },
          "calleridname": {
            "type": "string",
            "nullable": true
          },
          "calleridnum": {
            "type": "string",
            "nullable": true
          },
          "questionId": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "SessionId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ProjectId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt"
        ]
      },
      "JscriptyQuestionReport": {
        "title": "JscriptyQuestionReport",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "question": {
            "type": "string",
            "nullable": true
          },
          "answer": {
            "type": "string",
            "nullable": true
          },
          "membername": {
            "type": "string",
            "nullable": true
          },
          "projectname": {
            "type": "string",
            "nullable": true
          },
          "queue": {
            "type": "string",
            "nullable": true
          },
          "uniqueid": {
            "type": "string",
            "nullable": true
          },
          "calleridname": {
            "type": "string",
            "nullable": true
          },
          "calleridnum": {
            "type": "string",
            "nullable": true
          },
          "questionId": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "SessionId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ProjectId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt"
        ]
      },
      "JscriptySessionReport": {
        "title": "JscriptySessionReport",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "starttime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endtime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "membername": {
            "type": "string",
            "nullable": true
          },
          "projectname": {
            "type": "string",
            "nullable": true
          },
          "queue": {
            "type": "string",
            "nullable": true
          },
          "uniqueid": {
            "type": "string",
            "nullable": true
          },
          "calleridname": {
            "type": "string",
            "nullable": true
          },
          "calleridnum": {
            "type": "string",
            "nullable": true
          },
          "completed": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "VoiceQueueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ContactId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ProjectId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "completed",
          "createdAt",
          "updatedAt"
        ]
      },
      "SmsQueueReport": {
        "title": "SmsQueueReport",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "uniqueid": {
            "type": "string"
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "joinAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "leaveAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "acceptAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "exitAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "reason": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "SmsAccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ListId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ContactId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "SmsInteractionId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "SmsMessageId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "UserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "SmsQueueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "uniqueid",
          "createdAt",
          "updatedAt"
        ]
      },
      "SquareReport": {
        "title": "SquareReport",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "network": {
            "type": "string",
            "nullable": true
          },
          "network_script": {
            "type": "string",
            "nullable": true
          },
          "request": {
            "type": "string",
            "nullable": true
          },
          "channel": {
            "type": "string",
            "nullable": true
          },
          "language": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "uniqueid": {
            "type": "string",
            "nullable": true
          },
          "version": {
            "type": "string",
            "nullable": true
          },
          "callerid": {
            "type": "string",
            "nullable": true
          },
          "calleridname": {
            "type": "string",
            "nullable": true
          },
          "callingpres": {
            "type": "string",
            "nullable": true
          },
          "callingani2": {
            "type": "string",
            "nullable": true
          },
          "callington": {
            "type": "string",
            "nullable": true
          },
          "callingtns": {
            "type": "string",
            "nullable": true
          },
          "dnid": {
            "type": "string",
            "nullable": true
          },
          "rdnis": {
            "type": "string",
            "nullable": true
          },
          "context": {
            "type": "string",
            "nullable": true
          },
          "extension": {
            "type": "string",
            "nullable": true
          },
          "priority": {
            "type": "string",
            "nullable": true
          },
          "enhanced": {
            "type": "string",
            "nullable": true
          },
          "accountcode": {
            "type": "string",
            "nullable": true
          },
          "threadid": {
            "type": "string",
            "nullable": true
          },
          "project_name": {
            "type": "string",
            "nullable": true
          },
          "joinAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "leaveAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "bot": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "bot",
          "createdAt",
          "updatedAt"
        ]
      },
      "SquareDetailsReport": {
        "title": "SquareDetailsReport",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "uniqueid": {
            "type": "string",
            "nullable": true
          },
          "node": {
            "type": "string",
            "nullable": true
          },
          "application": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "type": "string",
            "nullable": true
          },
          "project_name": {
            "type": "string",
            "nullable": true
          },
          "callerid": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt"
        ]
      },
      "JscriptyProject": {
        "title": "JscriptyProject",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "formData": {
            "type": "string",
            "nullable": true
          },
          "enableUncompleteSave": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "sendUnpauseOnSubmit": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "enableUncompleteSave",
          "sendUnpauseOnSubmit",
          "createdAt",
          "updatedAt"
        ]
      },
      "Setting": {
        "title": "Setting",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "min_internal": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 1000
          },
          "min_mailbox": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 1000
          },
          "agi_port": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 4573
          },
          "logo": {
            "type": "string",
            "nullable": true
          },
          "defaultLogo": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "loginLogo": {
            "type": "string",
            "nullable": true
          },
          "defaultLoginLogo": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "headerWhiteLabel": {
            "type": "string",
            "nullable": true
          },
          "defaultHeaderWhiteLabel": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "securePassword": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "firstSetup": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "stunaddr": {
            "type": "string",
            "nullable": true
          },
          "turnaddr": {
            "type": "string",
            "nullable": true
          },
          "turnusername": {
            "type": "string",
            "nullable": true
          },
          "turnpassword": {
            "type": "string",
            "nullable": true
          },
          "pageTitle": {
            "type": "string",
            "nullable": true
          },
          "defaultPageTitle": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "callRecordingEncryption": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "passwordExpiresDays": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 90
          },
          "phoneBarAutoUpdater": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "phoneBarAutoUpdaterUrl": {
            "type": "string",
            "nullable": true,
            "default": "https://www.xcally.com/bar/phonebar/autoupdater.xml"
          },
          "enableEmailPreview": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "split": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "splitSizeCsv": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 5000
          },
          "splitSizePdf": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 5000
          },
          "splitSizeXlsx": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 5000
          },
          "messagesAlignment": {
            "type": "string",
            "nullable": true,
            "default": "alternate"
          },
          "chatTimeout": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 30
          },
          "phoneBarRememberMeEnabled": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "preferred": {
            "type": "string",
            "nullable": true
          },
          "defaultPreferred": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "rtlSupport": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "defaultScreenRecordingPath": {
            "type": "string",
            "nullable": true
          },
          "allowedLoginAttempts": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 5
          },
          "blockDuration": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 10
          },
          "favicon": {
            "type": "string",
            "nullable": true
          },
          "defaultFavicon": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "loginMailFrequency": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 10
          },
          "loginMailDelay": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "transcribe": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "automaticTranscribe": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "transcribeAccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "transcribeRegion": {
            "type": "string",
            "nullable": true
          },
          "sentiment": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "automaticSentiment": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "sentimentAccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "sentimentRegion": {
            "type": "string",
            "nullable": true
          },
          "postCallAnalytics": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "postCallAnalyticsAccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "postCallAnalyticsRegion": {
            "type": "string",
            "nullable": true
          },
          "awsBucket": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "language": {
            "type": "string",
            "nullable": true
          },
          "bucket": {
            "type": "string",
            "nullable": true
          },
          "googleSsoEnabled": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "adSsoEnabled": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "enforcePasswordHistory": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "passwordHistoryLimit": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 3
          },
          "privacyPolicyEmail": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "privacyPolicyName": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "privacyPolicyNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "searchOnEnterKey": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "chatInteractionsReloadTimeout": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "mailInteractionsReloadTimeout": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "openchannelInteractionsReloadTimeout": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "smsInteractionsReloadTimeout": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "whatsappInteractionsReloadTimeout": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "stopRecordingOnTransfer": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "secureCookieEnabled": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "viewHelpSection": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "previewRecallmeReminderInterval": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 5
          },
          "disabledCookie": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "limitTabs": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 20
          },
          "maxDaysFilter": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "samlSsoEnabled": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "echoCancellation": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "noiseSuppression": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "autoGainControl": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "msTeamsPresenceEnable": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "msTeamsPresenceTenant": {
            "type": "string",
            "nullable": true,
            "default": ""
          },
          "msTeamsPresenceAppId": {
            "type": "string",
            "nullable": true,
            "default": ""
          },
          "disconnectionTimeout": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 5
          },
          "enableRecordingSplit": {
            "type": "boolean",
            "default": false
          },
          "enforceAgentsMFA": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "enforceUsersMFA": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "disableMFA": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "maxAttachmentSize": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 16
          },
          "dateTimeFormat": {
            "type": "string",
            "default": "dd/MM/yy HH:mm:ss"
          },
          "ReportTimeFormatId": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": null
          },
          "dateFormat": {
            "type": "string",
            "default": "dd/MM/yy"
          },
          "timeFormat": {
            "type": "string",
            "default": "HH:mm:ss"
          },
          "durationFormat": {
            "type": "string",
            "default": "hh:mm:ss"
          },
          "timezoneFormat": {
            "type": "string",
            "default": "system"
          },
          "enforceAgentsSSO": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "enforceUsersSSO": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "queueEnableRecordingByDefault": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "callRecordingDefaultFormat": {
            "type": "string",
            "enum": [
              "wav",
              "wav49",
              "gsm"
            ],
            "nullable": true,
            "default": "wav"
          },
          "isIndividualChannelResumeEnabled": {
            "type": "boolean",
            "default": false
          },
          "invitationLinkBaseAddress": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "minTabsForCloseAllButton": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": null
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "InvitationMailId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "min_internal",
          "min_mailbox",
          "agi_port",
          "defaultLogo",
          "defaultLoginLogo",
          "defaultHeaderWhiteLabel",
          "securePassword",
          "firstSetup",
          "defaultPageTitle",
          "callRecordingEncryption",
          "passwordExpiresDays",
          "phoneBarAutoUpdater",
          "phoneBarAutoUpdaterUrl",
          "enableEmailPreview",
          "split",
          "splitSizeCsv",
          "splitSizePdf",
          "splitSizeXlsx",
          "messagesAlignment",
          "chatTimeout",
          "phoneBarRememberMeEnabled",
          "defaultPreferred",
          "rtlSupport",
          "allowedLoginAttempts",
          "blockDuration",
          "defaultFavicon",
          "loginMailFrequency",
          "loginMailDelay",
          "transcribe",
          "automaticTranscribe",
          "sentiment",
          "automaticSentiment",
          "postCallAnalytics",
          "awsBucket",
          "googleSsoEnabled",
          "adSsoEnabled",
          "enforcePasswordHistory",
          "passwordHistoryLimit",
          "privacyPolicyEmail",
          "privacyPolicyName",
          "privacyPolicyNumber",
          "searchOnEnterKey",
          "chatInteractionsReloadTimeout",
          "mailInteractionsReloadTimeout",
          "openchannelInteractionsReloadTimeout",
          "smsInteractionsReloadTimeout",
          "whatsappInteractionsReloadTimeout",
          "stopRecordingOnTransfer",
          "secureCookieEnabled",
          "viewHelpSection",
          "previewRecallmeReminderInterval",
          "disabledCookie",
          "limitTabs",
          "maxDaysFilter",
          "samlSsoEnabled",
          "echoCancellation",
          "noiseSuppression",
          "autoGainControl",
          "msTeamsPresenceEnable",
          "msTeamsPresenceTenant",
          "msTeamsPresenceAppId",
          "disconnectionTimeout",
          "enableRecordingSplit",
          "enforceAgentsMFA",
          "enforceUsersMFA",
          "disableMFA",
          "maxAttachmentSize",
          "dateTimeFormat",
          "ReportTimeFormatId",
          "dateFormat",
          "timeFormat",
          "durationFormat",
          "timezoneFormat",
          "enforceAgentsSSO",
          "enforceUsersSSO",
          "queueEnableRecordingByDefault",
          "callRecordingDefaultFormat",
          "isIndividualChannelResumeEnabled",
          "invitationLinkBaseAddress",
          "minTabsForCloseAllButton",
          "createdAt",
          "updatedAt"
        ]
      },
      "SquareOdbc": {
        "title": "SquareOdbc",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "dsn": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "createdAt",
          "updatedAt"
        ]
      },
      "SquareProject": {
        "title": "SquareProject",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "nullable": true
          },
          "preproduction": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "production": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "savedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "publishedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "createdAt",
          "updatedAt"
        ]
      },
      "SquareRecording": {
        "title": "SquareRecording",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "uniqueid": {
            "type": "string",
            "nullable": true
          },
          "callerid": {
            "type": "string",
            "nullable": true
          },
          "calleridname": {
            "type": "string",
            "nullable": true
          },
          "context": {
            "type": "string",
            "nullable": true
          },
          "extension": {
            "type": "string",
            "nullable": true
          },
          "priority": {
            "type": "string",
            "nullable": true
          },
          "accountcode": {
            "type": "string",
            "nullable": true
          },
          "dnid": {
            "type": "string",
            "nullable": true
          },
          "projectName": {
            "type": "string",
            "nullable": true
          },
          "saveName": {
            "type": "string",
            "nullable": true
          },
          "filename": {
            "type": "string",
            "nullable": true
          },
          "savePath": {
            "type": "string",
            "nullable": true
          },
          "format": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "array"
              },
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "nullable": true
          },
          "application": {
            "type": "string",
            "enum": [
              "record",
              "googleasr",
              "tildeasr",
              "ispeechasr",
              "awsasr",
              "openai_whisper"
            ],
            "nullable": true,
            "default": "record"
          },
          "duration": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": null
          },
          "transcriptText": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "transcriptConfidence": {
            "type": "number",
            "format": "float",
            "nullable": true,
            "default": null
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "application",
          "duration",
          "transcriptText",
          "transcriptConfidence",
          "createdAt",
          "updatedAt"
        ]
      },
      "SquareMessage": {
        "title": "SquareMessage",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "uniqueid": {
            "type": "string",
            "nullable": true
          },
          "body": {
            "type": "string"
          },
          "direction": {
            "type": "string",
            "enum": [
              "in",
              "out"
            ],
            "default": "out"
          },
          "providerName": {
            "type": "string",
            "nullable": true
          },
          "providerResponse": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "body",
          "direction",
          "createdAt",
          "updatedAt"
        ]
      },
      "Team": {
        "title": "Team",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "socketioRoomName": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "array"
              },
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "createdAt",
          "updatedAt"
        ]
      },
      "License": {
        "title": "License",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "license": {
            "type": "string",
            "nullable": true
          },
          "data1": {
            "type": "string",
            "nullable": true
          },
          "data2": {
            "type": "string",
            "nullable": true
          },
          "chatLicenseExceeded": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "type": {
            "type": "string",
            "enum": [
              "subscription",
              "pay-per-use"
            ],
            "default": "subscription"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "chatLicenseExceeded",
          "type",
          "createdAt",
          "updatedAt"
        ]
      },
      "Campaign": {
        "title": "Campaign",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "ivr"
            ],
            "default": "ivr"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "nullable": true,
            "default": 0
          },
          "limitCalls": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 30
          },
          "dialOriginateCallerIdName": {
            "type": "string",
            "nullable": true
          },
          "dialOriginateCallerIdNumber": {
            "type": "string",
            "nullable": true
          },
          "dialOriginateTimeout": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 30
          },
          "dialCongestionMaxRetry": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 3
          },
          "dialCongestionRetryFrequency": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 150
          },
          "dialBusyMaxRetry": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 3
          },
          "dialBusyRetryFrequency": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 150
          },
          "dialNoAnswerMaxRetry": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 3
          },
          "dialNoAnswerRetryFrequency": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 150
          },
          "dialGlobalMaxRetry": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 4
          },
          "dialTimezone": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "dialGlobalInterval": {
            "type": "string",
            "nullable": true,
            "default": "07:00-22:00,*,*,*"
          },
          "dialCheckDuplicateType": {
            "type": "string",
            "enum": [
              "always",
              "never",
              "onlyIfOpen"
            ],
            "nullable": true,
            "default": "always"
          },
          "dialAMDActive": {
            "type": "boolean",
            "nullable": true,
            "default": 0
          },
          "dialAMDInitialSilence": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 2500
          },
          "dialAMDGreeting": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 1500
          },
          "dialAMDAfterGreetingSilence": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 800
          },
          "dialAMDTotalAnalysisTime": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 5000
          },
          "dialAMDMinWordLength": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 100
          },
          "dialAMDBetweenWordsSilence": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 50
          },
          "dialAMDMaximumNumberOfWords": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 3
          },
          "dialAMDSilenceThreshold": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 256
          },
          "dialAMDMaximumWordLength": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 5000
          },
          "dialOrderByScheduledAt": {
            "type": "string",
            "enum": [
              "DESC",
              "ASC"
            ],
            "nullable": true,
            "default": "DESC"
          },
          "dialPrefix": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "dialRandomLastDigitCallerIdNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "dialCutDigit": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "dialNoSuchNumberMaxRetry": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 3
          },
          "dialNoSuchNumberRetryFrequency": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 150
          },
          "dialDropMaxRetry": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 3
          },
          "dialDropRetryFrequency": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 150
          },
          "dialAbandonedMaxRetry": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 3
          },
          "dialAbandonedRetryFrequency": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 150
          },
          "dialMachineMaxRetry": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 3
          },
          "dialMachineRetryFrequency": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 150
          },
          "dialAgentRejectMaxRetry": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 3
          },
          "dialAgentRejectRetryFrequency": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 150
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "TrunkId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "TrunkBackupId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "IntervalId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "SquareProjectId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "active",
          "limitCalls",
          "dialOriginateTimeout",
          "dialCongestionMaxRetry",
          "dialCongestionRetryFrequency",
          "dialBusyMaxRetry",
          "dialBusyRetryFrequency",
          "dialNoAnswerMaxRetry",
          "dialNoAnswerRetryFrequency",
          "dialGlobalMaxRetry",
          "dialTimezone",
          "dialGlobalInterval",
          "dialCheckDuplicateType",
          "dialAMDActive",
          "dialAMDInitialSilence",
          "dialAMDGreeting",
          "dialAMDAfterGreetingSilence",
          "dialAMDTotalAnalysisTime",
          "dialAMDMinWordLength",
          "dialAMDBetweenWordsSilence",
          "dialAMDMaximumNumberOfWords",
          "dialAMDSilenceThreshold",
          "dialAMDMaximumWordLength",
          "dialOrderByScheduledAt",
          "dialPrefix",
          "dialRandomLastDigitCallerIdNumber",
          "dialCutDigit",
          "dialNoSuchNumberMaxRetry",
          "dialNoSuchNumberRetryFrequency",
          "dialDropMaxRetry",
          "dialDropRetryFrequency",
          "dialAbandonedMaxRetry",
          "dialAbandonedRetryFrequency",
          "dialMachineMaxRetry",
          "dialMachineRetryFrequency",
          "dialAgentRejectMaxRetry",
          "dialAgentRejectRetryFrequency",
          "createdAt",
          "updatedAt"
        ]
      },
      "CampaignGroup": {
        "title": "CampaignGroup",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "dialingMethod": {
            "type": "string",
            "enum": [
              "progressive",
              "power",
              "predictive"
            ]
          },
          "dialingParameters": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "array"
              },
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "default": 1
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "dialGlobalInterval": {
            "type": "string",
            "nullable": true,
            "default": "07:00-22:00,*,*,*"
          },
          "dialTimezone": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "dialPredictiveIntervalMaxThreshold": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": "20"
          },
          "dialPredictiveIntervalMinThreshold": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": "10"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "IntervalId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "name",
          "dialingMethod",
          "enabled",
          "dialGlobalInterval",
          "dialTimezone",
          "dialPredictiveIntervalMaxThreshold",
          "dialPredictiveIntervalMinThreshold",
          "createdAt",
          "updatedAt"
        ]
      },
      "UserCampaignGroup": {
        "title": "UserCampaignGroup",
        "type": "object",
        "properties": {
          "penalty": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "UserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "CampaignGroupId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "penalty",
          "createdAt",
          "updatedAt"
        ]
      },
      "TeamCampaignGroup": {
        "title": "TeamCampaignGroup",
        "type": "object",
        "properties": {
          "penalty": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "TeamId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "CampaignGroupId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "penalty",
          "createdAt",
          "updatedAt"
        ]
      },
      "DialingSet": {
        "title": "DialingSet",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "progressiveNumber": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "originatedCalls": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "closedReason": {
            "type": "string",
            "enum": [
              "riding",
              "time_interval",
              "complete",
              "campaign_group_disabled"
            ],
            "nullable": true
          },
          "closedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "dialingMethod": {
            "type": "string",
            "enum": [
              "progressive",
              "power",
              "predictive"
            ]
          },
          "dialingParameters": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "array"
              },
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "nullable": true
          },
          "callDetails": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "array"
              },
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "CampaignGroupId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "progressiveNumber",
          "size",
          "originatedCalls",
          "dialingMethod",
          "createdAt",
          "updatedAt"
        ]
      },
      "Migration": {
        "title": "Migration",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt"
        ]
      },
      "Attachment": {
        "title": "Attachment",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "basename": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "MailMessageId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ChatOfflineMessageId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt"
        ]
      },
      "Plugin": {
        "title": "Plugin",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "enum": [
              "html",
              "script"
            ],
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "version": {
            "type": "string",
            "nullable": true
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "nullable": true,
            "default": 0
          },
          "sidebar": {
            "type": "string",
            "enum": [
              "adminOnly",
              "agentOnly",
              "always",
              "never"
            ],
            "nullable": true,
            "default": "always"
          },
          "icon": {
            "type": "string",
            "nullable": true
          },
          "adminUrl": {
            "type": "string",
            "nullable": true
          },
          "agentUrl": {
            "type": "string",
            "nullable": true
          },
          "scriptName": {
            "type": "string",
            "nullable": true
          },
          "scriptPath": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "active",
          "sidebar",
          "createdAt",
          "updatedAt"
        ]
      },
      "MailTransferReport": {
        "title": "MailTransferReport",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "uniqueid": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "account",
              "agent",
              "queue"
            ],
            "default": "queue"
          },
          "transferredAt": {
            "type": "string",
            "format": "date-time",
            "default": {}
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "MailMessageId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "MailInteractionId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FromMailAccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FromUserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ToUserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ToMailQueueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ToMailAccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "uniqueid",
          "type",
          "transferredAt",
          "createdAt",
          "updatedAt"
        ]
      },
      "ChatTransferReport": {
        "title": "ChatTransferReport",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "uniqueid": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "account",
              "agent",
              "queue"
            ],
            "default": "queue"
          },
          "transferredAt": {
            "type": "string",
            "format": "date-time",
            "default": {}
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ChatMessageId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ChatInteractionId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FromChatWebsiteId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FromUserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ToUserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ToChatQueueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ToChatWebsiteId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "uniqueid",
          "type",
          "transferredAt",
          "createdAt",
          "updatedAt"
        ]
      },
      "FaxTransferReport": {
        "title": "FaxTransferReport",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "uniqueid": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "account",
              "agent",
              "queue"
            ],
            "default": "queue"
          },
          "transferredAt": {
            "type": "string",
            "format": "date-time",
            "default": {}
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "FaxMessageId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FaxInteractionId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FromFaxAccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FromUserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ToUserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ToFaxQueueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ToFaxAccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "uniqueid",
          "type",
          "transferredAt",
          "createdAt",
          "updatedAt"
        ]
      },
      "OpenchannelTransferReport": {
        "title": "OpenchannelTransferReport",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "uniqueid": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "account",
              "agent",
              "queue"
            ],
            "default": "queue"
          },
          "transferredAt": {
            "type": "string",
            "format": "date-time",
            "default": {}
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "OpenchannelMessageId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "OpenchannelInteractionId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FromOpenchannelAccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FromUserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ToUserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ToOpenchannelQueueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ToOpenchannelAccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "uniqueid",
          "type",
          "transferredAt",
          "createdAt",
          "updatedAt"
        ]
      },
      "SmsTransferReport": {
        "title": "SmsTransferReport",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "uniqueid": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "account",
              "agent",
              "queue"
            ],
            "default": "queue"
          },
          "transferredAt": {
            "type": "string",
            "format": "date-time",
            "default": {}
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "SmsMessageId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "SmsInteractionId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FromSmsAccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FromUserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ToUserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ToSmsQueueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ToSmsAccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "uniqueid",
          "type",
          "transferredAt",
          "createdAt",
          "updatedAt"
        ]
      },
      "CmList": {
        "title": "CmList",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "dialPrefix": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "createdAt",
          "updatedAt"
        ]
      },
      "VoicePrefix": {
        "title": "VoicePrefix",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "prefix": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "array"
              },
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "callerIdAll": {
            "type": "string",
            "nullable": true
          },
          "VoiceExtensionId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "VoiceContextId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "VoiceContextOriginId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "keepPrefix": {
            "type": "boolean",
            "default": false
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "keepPrefix",
          "createdAt",
          "updatedAt"
        ]
      },
      "UserProfile": {
        "title": "UserProfile",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "crudPermissions": {
            "type": "string",
            "default": "r"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "privacyEnabled": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "downloadAttachments": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "downloadCallySquareRecordings": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "downloadContactManagerLists": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "downloadJscriptySessions": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "downloadOmnichannelInteractions": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "downloadScreenRecordings": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "downloadVoiceRecordings": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "socketioRoomName": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "array"
              },
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "crudPermissions",
          "privacyEnabled",
          "downloadAttachments",
          "downloadCallySquareRecordings",
          "downloadContactManagerLists",
          "downloadJscriptySessions",
          "downloadOmnichannelInteractions",
          "downloadScreenRecordings",
          "downloadVoiceRecordings",
          "createdAt",
          "updatedAt"
        ]
      },
      "UserProfileSection": {
        "title": "UserProfileSection",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "sectionId": {
            "type": "integer",
            "format": "int32"
          },
          "enabled": {
            "type": "boolean",
            "nullable": true,
            "default": null
          },
          "autoAssociation": {
            "type": "boolean",
            "nullable": true,
            "default": null
          },
          "crudPermissions": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "userProfileId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "name",
          "category",
          "sectionId",
          "enabled",
          "autoAssociation",
          "createdAt",
          "updatedAt"
        ]
      },
      "UserProfileResource": {
        "title": "UserProfileResource",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "resourceId": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "sectionId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "name",
          "resourceId",
          "type",
          "createdAt",
          "updatedAt"
        ]
      },
      "UserNotification": {
        "title": "UserNotification",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "body": {
            "type": "string",
            "nullable": true
          },
          "senderName": {
            "type": "string",
            "nullable": true
          },
          "recipientsId": {
            "type": "string",
            "nullable": true
          },
          "recipientsDescription": {
            "type": "string",
            "nullable": true
          },
          "beep": {
            "type": "boolean",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "SenderId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt"
        ]
      },
      "UserSetting": {
        "title": "UserSetting",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "clientSideLoggingLevel": {
            "type": "string",
            "enum": [
              "error",
              "warning",
              "info",
              "debug"
            ],
            "default": "error"
          },
          "clientSideLoggingScopes": {
            "type": "string",
            "nullable": true,
            "default": "[]"
          },
          "clientSideLoggingEnabledSince": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "default": null
          },
          "chatAdvancedSearchEnabled": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "faxAdvancedSearchEnabled": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "mailAdvancedSearchEnabled": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "openchannelAdvancedSearchEnabled": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "smsAdvancedSearchEnabled": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "whatsappAdvancedSearchEnabled": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "dateTimeFormat": {
            "type": "string",
            "nullable": true
          },
          "ReportTimeFormatId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "dateFormat": {
            "type": "string",
            "nullable": true
          },
          "timeFormat": {
            "type": "string",
            "nullable": true
          },
          "durationFormat": {
            "type": "string",
            "nullable": true
          },
          "notificationsPosition": {
            "type": "string",
            "enum": [
              "bottom-right",
              "bottom-left",
              "top-right",
              "top-left",
              "top-center",
              "bottom-center"
            ],
            "default": "top-right"
          },
          "timezoneFormat": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "userId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "clientSideLoggingLevel",
          "clientSideLoggingScopes",
          "clientSideLoggingEnabledSince",
          "chatAdvancedSearchEnabled",
          "faxAdvancedSearchEnabled",
          "mailAdvancedSearchEnabled",
          "openchannelAdvancedSearchEnabled",
          "smsAdvancedSearchEnabled",
          "whatsappAdvancedSearchEnabled",
          "notificationsPosition",
          "createdAt",
          "updatedAt"
        ]
      },
      "WhatsappAccount": {
        "title": "WhatsappAccount",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "remote": {
            "type": "string"
          },
          "token": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "phone_number_id": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "enum": [
              "twilio",
              "sinch",
              "sinch_v2",
              "meta",
              "kaleyra"
            ],
            "nullable": true
          },
          "accountSid": {
            "type": "string",
            "nullable": true
          },
          "baseUrl": {
            "type": "string",
            "nullable": true
          },
          "authToken": {
            "type": "string",
            "nullable": true
          },
          "appId": {
            "type": "string",
            "nullable": true
          },
          "notificationTemplate": {
            "type": "string",
            "nullable": true
          },
          "notificationSound": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "notificationShake": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "waitForTheAssignedAgent": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 10
          },
          "queueTransfer": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "queueTransferTimeout": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 300
          },
          "agentTransfer": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "agentTransferTimeout": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 300
          },
          "mandatoryDispositionPauseId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "mandatoryDisposition": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "waitForTheAssignedQueue": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 10
          },
          "active": {
            "type": "boolean",
            "nullable": true,
            "default": true
          },
          "sinchAppID": {
            "type": "string",
            "nullable": true
          },
          "sinchProjectID": {
            "type": "string",
            "nullable": true
          },
          "sinchKeyID": {
            "type": "string",
            "nullable": true
          },
          "sinchKeySecret": {
            "type": "string",
            "nullable": true
          },
          "sinchSecretToken": {
            "type": "string",
            "nullable": true
          },
          "recontactTemplateId": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": null
          },
          "ListId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "aiAssistantId": {
            "type": "string",
            "nullable": true
          },
          "aiProviderId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "receiveUrl": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "array"
              },
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "key",
          "remote",
          "token",
          "notificationTemplate",
          "notificationSound",
          "notificationShake",
          "waitForTheAssignedAgent",
          "queueTransfer",
          "queueTransferTimeout",
          "agentTransfer",
          "agentTransferTimeout",
          "mandatoryDisposition",
          "waitForTheAssignedQueue",
          "active",
          "recontactTemplateId",
          "createdAt",
          "updatedAt"
        ]
      },
      "WhatsappApplication": {
        "title": "WhatsappApplication",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "priority": {
            "type": "integer",
            "format": "int32"
          },
          "app": {
            "type": "string",
            "default": "noop"
          },
          "appdata": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "interval": {
            "type": "string",
            "nullable": true,
            "default": "*,*,*,*"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "WhatsappAccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "UserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "WhatsappQueueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "IntervalId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "TagId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "priority",
          "app",
          "interval",
          "createdAt",
          "updatedAt"
        ]
      },
      "WhatsappInteraction": {
        "title": "WhatsappInteraction",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "closed": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "closedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "disposition": {
            "type": "string",
            "nullable": true
          },
          "secondDisposition": {
            "type": "string",
            "nullable": true
          },
          "thirdDisposition": {
            "type": "string",
            "nullable": true
          },
          "note": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "read1stAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "firstMsgDirection": {
            "type": "string",
            "enum": [
              "in",
              "out"
            ],
            "default": "in"
          },
          "lastMsgAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastMsgDirection": {
            "type": "string",
            "enum": [
              "in",
              "out"
            ],
            "default": "in"
          },
          "autoreplyExecuted": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "queueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "campaign_id": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": null
          },
          "OpenaiThreadUUID": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "cf_bool": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "cf_text": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "UserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "WhatsappAccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ContactId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "closed",
          "firstMsgDirection",
          "lastMsgDirection",
          "autoreplyExecuted",
          "campaign_id",
          "OpenaiThreadUUID",
          "cf_bool",
          "cf_text",
          "createdAt",
          "updatedAt"
        ]
      },
      "WhatsappMessage": {
        "title": "WhatsappMessage",
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "format": "int32"
          },
          "body": {
            "type": "string"
          },
          "read": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "direction": {
            "type": "string",
            "enum": [
              "in",
              "out"
            ],
            "default": "out"
          },
          "messageId": {
            "type": "string",
            "maxLength": 190,
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "readAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "secret": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "providerName": {
            "type": "string",
            "nullable": true
          },
          "providerResponse": {
            "type": "string",
            "nullable": true
          },
          "sentBy": {
            "type": "string",
            "enum": [
              "action_user",
              "action_agent",
              "action_internal_note",
              "action_nli",
              "auto_chat_snippet",
              "auto_system",
              "auto_routing",
              "auto_third_party",
              "auto_outbound_campaign"
            ],
            "nullable": true,
            "default": null
          },
          "doNotSend": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "template_id": {
            "type": "number",
            "format": "int32",
            "nullable": true,
            "default": null
          },
          "thumbnail": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "array"
              },
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "nullable": true
          },
          "type": {
            "type": "string",
            "enum": [
              "button",
              "button_reply",
              "list",
              "list_reply",
              "location",
              "media",
              "template",
              "text"
            ],
            "default": "text"
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "WhatsappAccountId": {
            "type": "number",
            "format": "int32",
            "nullable": true
          },
          "WhatsappInteractionId": {
            "type": "number",
            "format": "int32",
            "nullable": true
          },
          "UserId": {
            "type": "number",
            "format": "int32",
            "nullable": true
          },
          "ContactId": {
            "type": "number",
            "format": "int32",
            "nullable": true
          },
          "AttachmentId": {
            "type": "number",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "direction",
          "type",
          "WhatsappInteractionId",
          "direction",
          "secret",
          "sentBy",
          "doNotSend",
          "template_id",
          "type",
          "createdAt",
          "updatedAt"
        ]
      },
      "WhatsappQueueReport": {
        "title": "WhatsappQueueReport",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "uniqueid": {
            "type": "string"
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "joinAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "leaveAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "acceptAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "exitAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "reason": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "WhatsappAccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ListId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ContactId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "WhatsappInteractionId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "WhatsappQueueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "WhatsappMessageId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "UserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "uniqueid",
          "createdAt",
          "updatedAt"
        ]
      },
      "WhatsappTransferReport": {
        "title": "WhatsappTransferReport",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "uniqueid": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "account",
              "agent",
              "queue"
            ]
          },
          "transferredAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "WhatsappMessageId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "WhatsappInteractionId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FromWhatsappAccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ToWhatsappAccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ToQueueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FromUserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ToUserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "uniqueid",
          "type",
          "createdAt",
          "updatedAt"
        ]
      },
      "WhatsappQueue": {
        "title": "WhatsappQueue",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "timeout": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "strategy": {
            "type": "string",
            "enum": [
              "rrmemory",
              "beepall",
              "roundrobin"
            ],
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "socketioRoomName": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "array"
              },
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt"
        ]
      },
      "WhatsappTemplateMessage": {
        "title": "WhatsappTemplateMessage",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "whatsappAccountId": {
            "type": "integer",
            "format": "int32"
          },
          "metaId": {
            "type": "string",
            "nullable": true
          },
          "metaCategory": {
            "type": "string",
            "enum": [
              "UTILITY",
              "MARKETING",
              "AUTHENTICATION"
            ]
          },
          "metaStatus": {
            "type": "string",
            "enum": [
              "APPROVED",
              "IN_APPEAL",
              "PENDING",
              "REJECTED",
              "PENDING_DELETION",
              "DELETED",
              "DISABLED",
              "PAUSED",
              "LIMIT_EXCEEDED",
              "REPLACED"
            ],
            "default": "PENDING"
          },
          "isRecontact": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "default": "no"
          },
          "availableToAgents": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "reason": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "template_id": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "message_id": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "name",
          "language",
          "whatsappAccountId",
          "metaCategory",
          "metaStatus",
          "isRecontact",
          "availableToAgents"
        ]
      },
      "WhatsappTemplateComponent": {
        "title": "WhatsappTemplateComponent",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "template_id": {
            "type": "integer",
            "format": "int32"
          },
          "template_component_type": {
            "type": "string",
            "enum": [
              "BODY",
              "HEADER",
              "FOOTER",
              "BUTTONS"
            ]
          },
          "template_component_sub_type": {
            "type": "string",
            "enum": [
              "TEXT",
              "IMAGE",
              "VIDEO",
              "DOCUMENT",
              "URL",
              "PHONE_NUMBER",
              "QUICK_REPLY"
            ],
            "nullable": true
          },
          "template_component_sub_value": {
            "type": "string",
            "nullable": true
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "media_id": {
            "type": "string",
            "maxLength": 2048,
            "nullable": true
          },
          "media_name": {
            "type": "string",
            "maxLength": 2048,
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "template_id",
          "template_component_type",
          "createdAt",
          "updatedAt"
        ]
      },
      "WhatsappCampaign": {
        "title": "WhatsappCampaign",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "template_id": {
            "type": "integer",
            "format": "int32"
          },
          "account_id": {
            "type": "integer",
            "format": "int32"
          },
          "meta_message_template_namespace": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "RUNNING",
              "ACTIVE_FOR_RETRY",
              "COMPLETE",
              "INACTIVE",
              "CANCELED"
            ]
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "wait_for_answer_days": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "tools_intervals_id": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 1
          },
          "also_with_open_interaction": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "template_id",
          "account_id",
          "meta_message_template_namespace",
          "status",
          "tools_intervals_id",
          "also_with_open_interaction",
          "createdAt",
          "updatedAt"
        ]
      },
      "WhatsappHopper": {
        "title": "WhatsappHopper",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "campaign_id": {
            "type": "integer",
            "format": "int32"
          },
          "phone_number": {
            "type": "string"
          },
          "contact_id": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "type": "string",
            "enum": [
              "TO_SEND",
              "TO_RETRY",
              "SENT",
              "FAILED",
              "OTHER_CAMPAIGN"
            ]
          },
          "retry_count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "error_code": {
            "type": "string",
            "nullable": true
          },
          "reason": {
            "type": "string",
            "maxLength": 2048,
            "nullable": true
          },
          "answer": {
            "type": "string",
            "maxLength": 2048,
            "nullable": true
          },
          "interaction_id": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "messageId": {
            "type": "string",
            "maxLength": 190,
            "nullable": true
          },
          "timezone": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "campaign_id",
          "phone_number",
          "contact_id",
          "status",
          "createdAt",
          "updatedAt"
        ]
      },
      "WhatsappHopperHistory": {
        "title": "WhatsappHopperHistory",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "campaign_id": {
            "type": "integer",
            "format": "int32"
          },
          "phone_number": {
            "type": "string"
          },
          "contact_id": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "type": "string",
            "enum": [
              "SENT",
              "FAILED",
              "OTHER_CAMPAIGN"
            ]
          },
          "reason": {
            "type": "string",
            "maxLength": 2048,
            "nullable": true
          },
          "error_code": {
            "type": "string",
            "nullable": true
          },
          "answer": {
            "type": "string",
            "maxLength": 2048,
            "nullable": true
          },
          "interaction_id": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "messageId": {
            "type": "string",
            "maxLength": 190,
            "nullable": true
          },
          "sentAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "receivedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "readAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "timezone": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "campaign_id",
          "phone_number",
          "contact_id",
          "status",
          "createdAt",
          "updatedAt"
        ]
      },
      "WhatsappHopperCampaignPending": {
        "title": "WhatsappHopperCampaignPending",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "campaign_id": {
            "type": "integer",
            "format": "int32"
          },
          "phone_number": {
            "type": "string"
          },
          "contact_id": {
            "type": "integer",
            "format": "int32"
          },
          "retry_count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "reason": {
            "type": "string",
            "maxLength": 2048,
            "nullable": true
          },
          "error_code": {
            "type": "string",
            "nullable": true
          },
          "answer": {
            "type": "string",
            "maxLength": 2048,
            "nullable": true
          },
          "interaction_id": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "messageId": {
            "type": "string",
            "maxLength": 190,
            "nullable": true
          },
          "sentAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "receivedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "readAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "timezone": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "campaign_id",
          "phone_number",
          "contact_id",
          "createdAt",
          "updatedAt"
        ]
      },
      "WhatsappConversationManager": {
        "title": "WhatsappConversationManager",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "whatsappNumber": {
            "type": "string"
          },
          "whatsappAccountId": {
            "type": "integer",
            "format": "int32"
          },
          "marketingTemplateSentAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "marketingConversationId": {
            "type": "string",
            "nullable": true
          },
          "marketingTemplateReceivedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "marketingTemplateRepliedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "utilityTemplateSentAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "utilityConversationId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "utilityTemplateReceivedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "utilityTemplateRepliedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "customerServiceWindowStartedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "serviceConversationOpenedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "marketingFreeFormStartedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "utilityfreeFormStartedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "noFreeFormReason": {
            "type": "string",
            "enum": [
              "WAIT_FOR_REPLY",
              "WINDOW_EXPIRED"
            ],
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "whatsappNumber",
          "whatsappAccountId",
          "createdAt",
          "updatedAt"
        ]
      },
      "CloudProvider": {
        "title": "CloudProvider",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "service": {
            "type": "string",
            "enum": [
              "AmazonAWS",
              "Google",
              "MicrosoftAzure",
              "OpenAI"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "Outlook365",
              "Dynamics365"
            ],
            "nullable": true
          },
          "data1": {
            "type": "string",
            "nullable": true
          },
          "data2": {
            "type": "string",
            "nullable": true
          },
          "data3": {
            "type": "string",
            "nullable": true
          },
          "data4": {
            "type": "string",
            "nullable": true
          },
          "data5": {
            "type": "string",
            "nullable": true
          },
          "data6": {
            "type": "string",
            "nullable": true
          },
          "data7": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "service",
          "createdAt",
          "updatedAt"
        ]
      },
      "TeamVoiceQueue": {
        "title": "TeamVoiceQueue",
        "type": "object",
        "properties": {
          "penalty": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "VoiceQueueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "TeamId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "penalty",
          "createdAt",
          "updatedAt"
        ]
      },
      "TeamVoicePrefix": {
        "title": "TeamVoicePrefix",
        "type": "object",
        "properties": {
          "TeamId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "VoicePrefixId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "createdAt",
          "updatedAt"
        ]
      },
      "UserVoicePrefix": {
        "title": "UserVoicePrefix",
        "type": "object",
        "properties": {
          "UserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "VoicePrefixId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "createdAt",
          "updatedAt"
        ]
      },
      "MailInteractionHasTag": {
        "title": "MailInteractionHasTag",
        "type": "object",
        "properties": {
          "MailInteractionId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "TagId": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": null
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "TagId",
          "createdAt",
          "updatedAt"
        ]
      },
      "TranscriptionJob": {
        "title": "TranscriptionJob",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "TRANSCRIPTION",
              "SENTIMENT",
              "POST_CALL_ANALYTICS"
            ]
          },
          "serviceProvider": {
            "type": "string",
            "nullable": true
          },
          "location": {
            "type": "string",
            "nullable": true
          },
          "languageCode": {
            "type": "string"
          },
          "region": {
            "type": "string",
            "nullable": true
          },
          "failureReason": {
            "type": "string",
            "nullable": true
          },
          "jobResult": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "array"
              },
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "nullable": true
          },
          "fullText": {
            "type": "string",
            "nullable": true
          },
          "fileUri": {
            "type": "string",
            "nullable": true
          },
          "sentiment": {
            "type": "string",
            "nullable": true
          },
          "sentimentPositiveScore": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "sentimentNegativeScore": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "sentimentNeutralScore": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "sentimentMixedScore": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "overallSentimentChannel00": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "overallSentimentChannel01": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "VoiceRecordingId": {
            "type": "integer",
            "format": "int32"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "CloudProviderId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "name",
          "status",
          "type",
          "languageCode",
          "VoiceRecordingId",
          "createdAt",
          "updatedAt"
        ]
      },
      "Transcription": {
        "title": "Transcription",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "fullText": {
            "type": "string",
            "nullable": true
          },
          "fileUri": {
            "type": "string",
            "nullable": true
          },
          "sentiment": {
            "type": "string",
            "nullable": true
          },
          "sentimentPositiveScore": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "sentimentNegativeScore": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "sentimentNeutralScore": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "sentimentMixedScore": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "overallSentimentChannel00": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "overallSentimentChannel01": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "TranscriptionJobId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt"
        ]
      },
      "TranscriptionItem": {
        "title": "TranscriptionItem",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "string"
          },
          "beginOffset": {
            "type": "integer",
            "format": "int32"
          },
          "endOffset": {
            "type": "integer",
            "format": "int32"
          },
          "sentiment": {
            "type": "string",
            "nullable": true
          },
          "channelName": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "TranscriptionId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "content",
          "beginOffset",
          "endOffset",
          "channelName",
          "createdAt",
          "updatedAt"
        ]
      },
      "TranscriptionPostCallAnalytics": {
        "title": "TranscriptionPostCallAnalytic",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "channelName": {
            "type": "string"
          },
          "sentimentScore": {
            "type": "number",
            "format": "float"
          },
          "beginOffset": {
            "type": "integer",
            "format": "int32"
          },
          "endOffset": {
            "type": "integer",
            "format": "int32"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "TranscriptionId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "channelName",
          "sentimentScore",
          "beginOffset",
          "endOffset",
          "createdAt",
          "updatedAt"
        ]
      },
      "ContactItemType": {
        "title": "ContactItemType",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "OrderBy": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "rgbBackgroundColor": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "createdAt",
          "updatedAt"
        ]
      },
      "CmContactHasItem": {
        "title": "CmContactHasItem",
        "type": "object",
        "properties": {
          "CmContactId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "item": {
            "type": "string",
            "nullable": true,
            "default": ""
          },
          "ItemTypeId": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": null
          },
          "ItemClass": {
            "type": "string",
            "nullable": true,
            "default": "PHONE"
          },
          "OrderBy": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": null
          },
          "description": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "item",
          "ItemTypeId",
          "ItemClass",
          "OrderBy",
          "description",
          "createdAt",
          "updatedAt"
        ]
      },
      "CmHopperAdditionalPhone": {
        "title": "CmHopperAdditionalPhone",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "CmHopperId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "phone": {
            "type": "string"
          },
          "OrderBy": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "scheduledat": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "default": "2024-07-24 17:58:10"
          },
          "countbusyretry": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "countcongestionretry": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "countnoanswerretry": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "countnosuchnumberretry": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "countdropretry": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "countabandonedretry": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "countmachineretry": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "countagentrejectretry": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": 0
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "phone",
          "OrderBy",
          "scheduledat",
          "countbusyretry",
          "countcongestionretry",
          "countnoanswerretry",
          "countnosuchnumberretry",
          "countdropretry",
          "countabandonedretry",
          "countmachineretry",
          "countagentrejectretry",
          "createdAt",
          "updatedAt"
        ]
      },
      "Timing": {
        "title": "Timing",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "enabled": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "startAt": {
            "type": "string"
          },
          "endAt": {
            "type": "string"
          },
          "intervalTimezone": {
            "type": "string"
          },
          "intervalStartHours": {
            "type": "integer",
            "format": "int32"
          },
          "intervalStartMinutes": {
            "type": "integer",
            "format": "int32"
          },
          "intervalEndHours": {
            "type": "integer",
            "format": "int32"
          },
          "intervalEndMinutes": {
            "type": "integer",
            "format": "int32"
          },
          "sunday": {
            "type": "boolean"
          },
          "monday": {
            "type": "boolean"
          },
          "tuesday": {
            "type": "boolean"
          },
          "wednesday": {
            "type": "boolean"
          },
          "thursday": {
            "type": "boolean"
          },
          "friday": {
            "type": "boolean"
          },
          "saturday": {
            "type": "boolean"
          },
          "intervalStart": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "array"
              },
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "nullable": true
          },
          "intervalEnd": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "array"
              },
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "UserId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "id",
          "name",
          "enabled",
          "active",
          "startAt",
          "endAt",
          "intervalTimezone",
          "intervalStartHours",
          "intervalStartMinutes",
          "intervalEndHours",
          "intervalEndMinutes",
          "sunday",
          "monday",
          "tuesday",
          "wednesday",
          "thursday",
          "friday",
          "saturday",
          "createdAt",
          "updatedAt",
          "UserId"
        ]
      },
      "TimingHasProfileChatQueues": {
        "title": "TimingHasProfileChatQueue",
        "type": "object",
        "properties": {
          "standby": {
            "type": "boolean",
            "default": false
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ProfileChatQueueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "TimingId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "standby",
          "createdAt",
          "updatedAt"
        ]
      },
      "TimingHasProfileFaxQueues": {
        "title": "TimingHasProfileFaxQueue",
        "type": "object",
        "properties": {
          "standby": {
            "type": "boolean",
            "default": false
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ProfileFaxQueueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "TimingId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "standby",
          "createdAt",
          "updatedAt"
        ]
      },
      "TimingHasProfileMailQueues": {
        "title": "TimingHasProfileMailQueue",
        "type": "object",
        "properties": {
          "standby": {
            "type": "boolean",
            "default": false
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ProfileMailQueueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "TimingId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "standby",
          "createdAt",
          "updatedAt"
        ]
      },
      "TimingHasProfileOpenchannelQueues": {
        "title": "TimingHasProfileOpenchannelQueue",
        "type": "object",
        "properties": {
          "standby": {
            "type": "boolean",
            "default": false
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ProfileOpenchannelQueueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "TimingId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "standby",
          "createdAt",
          "updatedAt"
        ]
      },
      "TimingHasProfileSmsQueues": {
        "title": "TimingHasProfileSmsQueue",
        "type": "object",
        "properties": {
          "standby": {
            "type": "boolean",
            "default": false
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ProfileSmsQueueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "TimingId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "standby",
          "createdAt",
          "updatedAt"
        ]
      },
      "TimingHasProfileVoiceQueues": {
        "title": "TimingHasProfileVoiceQueue",
        "type": "object",
        "properties": {
          "standby": {
            "type": "boolean",
            "default": false
          },
          "penalty": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": null
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ProfileVoiceQueueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "TimingId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "standby",
          "penalty",
          "createdAt",
          "updatedAt"
        ]
      },
      "TimingHasProfileWhatsappQueues": {
        "title": "TimingHasProfileWhatsappQueue",
        "type": "object",
        "properties": {
          "standby": {
            "type": "boolean",
            "default": false
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ProfileWhatsappQueueId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "TimingId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "standby",
          "createdAt",
          "updatedAt"
        ]
      },
      "TimeFormat": {
        "title": "TimeFormat",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "asXlsx": {
            "type": "string"
          },
          "asMoment": {
            "type": "string"
          },
          "asLuxon": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "asXlsx",
          "asMoment",
          "asLuxon",
          "createdAt",
          "updatedAt"
        ]
      },
      "CacheStore": {
        "title": "CacheStore",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "key": {
            "type": "string"
          },
          "value": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "array"
              },
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "UserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "id",
          "key",
          "createdAt",
          "updatedAt"
        ]
      },
      "AiPromptsFile": {
        "title": "AiPromptsFile",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "providerId": {
            "type": "integer",
            "format": "int32"
          },
          "attachmentId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "attachmentName": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "statusDesc": {
            "type": "string",
            "nullable": true
          },
          "uploadedFileId": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "providerId",
          "attachmentName",
          "status",
          "createdAt",
          "updatedAt"
        ]
      },
      "PauseReason": {
        "title": "PauseReason",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "createdAt",
          "updatedAt"
        ]
      },
      "Error": {
        "description": "Represents an HTTP Error returned by motion API",
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "description": "HTTP Error code",
            "enum": [
              400,
              401,
              403,
              404,
              409,
              500
            ],
            "default": 500
          },
          "message": {
            "type": "string",
            "description": "Error message"
          },
          "stack": {
            "type": "string",
            "description": "Error stack (optional)"
          },
          "details": {
            "type": "object",
            "description": "Other data"
          }
        }
      },
      "APIError": {
        "description": "Represents an HTTP Error returned by motion API",
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "description": "HTTP Error code",
            "enum": [
              400,
              401,
              403,
              404,
              409,
              500
            ],
            "default": 500
          },
          "message": {
            "type": "string",
            "description": "Error message"
          },
          "stack": {
            "type": "string",
            "description": "Error stack (optional)"
          },
          "details": {
            "type": "object",
            "description": "Other data"
          }
        }
      },
      "RealtimeAgent": {
        "$ref": "#/components/schemas/RealtimeAgent",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "callgroup": {
            "type": null
          },
          "chatCapacity": {
            "type": "integer"
          },
          "chatCurrentCapacity": {
            "type": "integer"
          },
          "chatPause": {
            "type": "integer"
          },
          "chatStatus": {
            "type": "string"
          },
          "chatStatusTime": {
            "type": "integer"
          },
          "email": {
            "type": "string"
          },
          "faxCapacity": {
            "type": "integer"
          },
          "faxCurrentCapacity": {
            "type": "integer"
          },
          "faxPause": {
            "type": "integer"
          },
          "faxStatus": {
            "type": "string"
          },
          "faxStatusTime": {
            "type": "integer"
          },
          "fullname": {
            "type": "string"
          },
          "globalStatus": {
            "type": "string"
          },
          "internal": {
            "type": "integer"
          },
          "lastIdleAt": {
            "type": "string",
            "format": "date-time"
          },
          "lastLoginAt": {
            "type": "string",
            "format": "date-time"
          },
          "lastPauseAt": {
            "type": "string",
            "format": "date-time"
          },
          "mailCapacity": {
            "type": "integer"
          },
          "mailCurrentCapacity": {
            "type": "integer"
          },
          "mailPause": {
            "type": "integer"
          },
          "mailStatus": {
            "type": "string"
          },
          "mailStatusTime": {
            "type": "integer"
          },
          "online": {
            "type": "integer"
          },
          "openchannelCapacity": {
            "type": "integer"
          },
          "openchannelCurrentCapacity": {
            "type": "integer"
          },
          "openchannelPause": {
            "type": "integer"
          },
          "openchannelStatus": {
            "type": "string"
          },
          "openchannelStatusTime": {
            "type": "integer"
          },
          "pauseType": {
            "type": "string"
          },
          "phoneBarEnableAutomaticScreenRecording": {
            "type": "integer"
          },
          "phoneBarEnableScreenRecordingByAgent": {
            "type": "integer"
          },
          "role": {
            "type": "string"
          },
          "screenrecording": {
            "type": "integer"
          },
          "smsCapacity": {
            "type": "integer"
          },
          "smsCurrentCapacity": {
            "type": "integer"
          },
          "smsPause": {
            "type": "integer"
          },
          "smsStatus": {
            "type": "string"
          },
          "smsStatusTime": {
            "type": "integer"
          },
          "userpic": {
            "type": null
          },
          "voicePause": {
            "type": "integer"
          },
          "voiceStatus": {
            "type": "string"
          },
          "voiceStatusTime": {
            "type": "integer"
          },
          "whatsappCapacity": {
            "type": "integer"
          },
          "whatsappCurrentCapacity": {
            "type": "integer"
          },
          "whatsappPause": {
            "type": "integer"
          },
          "whatsappStatus": {
            "type": "string"
          },
          "whatsappStatusTime": {
            "type": "integer"
          }
        }
      },
      "RealtimeQueue": {
        "$ref": "#/components/schemas/RealtimeQueue",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "inbound",
              "outbound"
            ],
            "nullable": true
          },
          "available": {
            "type": "number"
          },
          "loggedIn": {
            "type": "number"
          },
          "paused": {
            "type": "number"
          },
          "waiting": {
            "type": "number"
          },
          "busy": {
            "type": "number",
            "nullable": true
          },
          "inUse": {
            "type": "number",
            "nullable": true
          },
          "invalid": {
            "type": "number",
            "nullable": true
          },
          "loggedInDb": {
            "type": "number",
            "nullable": true
          },
          "notInUse": {
            "type": "number",
            "nullable": true
          },
          "onHold": {
            "type": "number",
            "nullable": true
          },
          "ringing": {
            "type": "number",
            "nullable": true
          },
          "ringInUse": {
            "type": "number",
            "nullable": true
          },
          "talking": {
            "type": "number",
            "nullable": true
          },
          "unavailable": {
            "type": "number",
            "nullable": true
          },
          "unknown": {
            "type": "number",
            "nullable": true
          },
          "abandoned": {
            "type": "number",
            "nullable": true
          },
          "answered": {
            "type": "number",
            "nullable": true
          },
          "sumBillable": {
            "type": "number",
            "nullable": true
          },
          "sumHoldTime": {
            "type": "number",
            "nullable": true
          },
          "total": {
            "type": "number",
            "nullable": true
          },
          "pTalking": {
            "type": "number",
            "nullable": true
          },
          "originated": {
            "type": "number",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "statusMessage": {
            "type": "string",
            "nullable": true
          },
          "dialActive": {
            "type": "boolean",
            "nullable": true
          },
          "dialMethod": {
            "type": "string",
            "enum": [
              "preview",
              "progressive",
              "power",
              "predictive",
              "booked"
            ],
            "nullable": true
          },
          "Trunk": {
            "$ref": "#/components/schemas/RealtimeTrunk",
            "nullable": true
          },
          "startPredictive": {
            "type": "number",
            "nullable": true
          },
          "startProgressive": {
            "type": "number",
            "nullable": true
          },
          "erlangCalls": {
            "type": "number",
            "nullable": true
          },
          "erlangCallToSecond": {
            "type": "number",
            "nullable": true
          },
          "erlangAbandonmentRate": {
            "type": "number",
            "nullable": true
          },
          "erlangBusyFactor": {
            "type": "number",
            "nullable": true
          },
          "dialPredictiveInterval": {
            "type": "number",
            "nullable": true
          },
          "dialPredictiveIntervalMaxThreshold": {
            "type": "number",
            "nullable": true
          },
          "dialPredictiveIntervalMinThreshold": {
            "type": "number",
            "nullable": true
          },
          "predictiveIntervalAvailable": {
            "type": "number",
            "nullable": true
          },
          "predictiveIntervalTotalCalls": {
            "type": "number",
            "nullable": true
          },
          "predictiveIntervalAnsweredCalls": {
            "type": "number",
            "nullable": true
          },
          "predictiveIntervalDroppedCallsTimeout": {
            "type": "number",
            "nullable": true
          },
          "predictiveIntervalDroppedCallsCallersExit": {
            "type": "number",
            "nullable": true
          },
          "predictiveIntervalAvgHoldtime": {
            "type": "number",
            "nullable": true
          },
          "predictiveIntervalAvgTalktime": {
            "type": "number",
            "nullable": true
          }
        }
      },
      "AbsoluteTimeRange": {
        "type": "object",
        "properties": {
          "StartTime": {
            "type": "integer"
          },
          "EndTime": {
            "type": "integer"
          },
          "First": {
            "type": "integer"
          },
          "Last": {
            "type": "integer"
          }
        }
      },
      "RelativeTimeRange": {
        "type": "object",
        "properties": {
          "StartPercentage": {
            "type": "integer"
          },
          "EndPercentage": {
            "type": "integer"
          },
          "First": {
            "type": "integer"
          },
          "Last": {
            "type": "integer"
          }
        }
      },
      "InterruptionFilter": {
        "type": "object",
        "properties": {
          "Threshold": {
            "type": "integer"
          },
          "AbsoluteTimeRange": {
            "$ref": "#/components/schemas/AbsoluteTimeRange"
          },
          "RelativeTimeRange": {
            "$ref": "#/components/schemas/RelativeTimeRange"
          },
          "ParticipantRole": {
            "type": "string",
            "enum": [
              "AGENT",
              "CUSTOMER"
            ]
          },
          "Negate": {
            "type": "boolean"
          }
        }
      },
      "TranscriptFilter": {
        "type": "object",
        "properties": {
          "TranscriptFilterType": {
            "type": "string",
            "enum": [
              "EXACT"
            ]
          },
          "AbsoluteTimeRange": {
            "$ref": "#/components/schemas/AbsoluteTimeRange"
          },
          "RelativeTimeRange": {
            "$ref": "#/components/schemas/RelativeTimeRange"
          },
          "ParticipantRole": {
            "type": "string",
            "enum": [
              "AGENT",
              "CUSTOMER"
            ]
          },
          "Negate": {
            "type": "boolean"
          },
          "Targets": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "NonTalkTimeFilter": {
        "type": "object",
        "properties": {
          "Threshold": {
            "type": "integer"
          },
          "AbsoluteTimeRange": {
            "$ref": "#/components/schemas/AbsoluteTimeRange"
          },
          "RelativeTimeRange": {
            "$ref": "#/components/schemas/RelativeTimeRange"
          },
          "Negate": {
            "type": "boolean"
          }
        }
      },
      "SentimentFilter": {
        "type": "object",
        "properties": {
          "Sentiments": {
            "type": "string",
            "enum": [
              "MIXED",
              "NEGATIVE",
              "NEUTRAL",
              "POSITIVE"
            ]
          },
          "AbsoluteTimeRange": {
            "$ref": "#/components/schemas/AbsoluteTimeRange"
          },
          "RelativeTimeRange": {
            "$ref": "#/components/schemas/RelativeTimeRange"
          },
          "ParticipantRole": {
            "type": "string",
            "enum": [
              "AGENT",
              "CUSTOMER"
            ]
          },
          "Negate": {
            "type": "boolean"
          }
        }
      },
      "QACategory": {
        "type": "object",
        "properties": {
          "CategoryName": {
            "type": "string"
          },
          "CreateTime": {
            "type": "string",
            "format": "date-time"
          },
          "InputType": {
            "type": "string",
            "enum": [
              "POST_CALL"
            ]
          },
          "LastUpdateTime": {
            "type": "string",
            "format": "date-time"
          },
          "Rules": {
            "type": "array",
            "oneOf": [
              {
                "$ref": "#/components/schemas/InterruptionFilter"
              },
              {
                "$ref": "#/components/schemas/TranscriptFilter"
              },
              {
                "$ref": "#/components/schemas/NonTalkTimeFilter"
              },
              {
                "$ref": "#/components/schemas/SentimentFilter"
              }
            ]
          },
          "provider": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "service": {
                "type": "string"
              }
            }
          }
        }
      },
      "CreateWhatsappMessage": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string"
          },
          "direction": {
            "type": "string",
            "enum": [
              "in",
              "out"
            ],
            "default": "out"
          },
          "doNotSend": {
            "type": "boolean"
          },
          "errorMessage": {
            "type": "string"
          },
          "interactive": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "string"
                  },
                  "header": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "document",
                          "image",
                          "text",
                          "video"
                        ]
                      },
                      "link": {
                        "type": "string"
                      },
                      "text": {
                        "type": "string"
                      }
                    }
                  },
                  "action": {
                    "type": "object",
                    "properties": {
                      "buttons": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "title": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "header": {
                    "type": "string"
                  },
                  "body": {
                    "type": "string"
                  },
                  "footer": {
                    "type": "string"
                  },
                  "action": {
                    "type": "object",
                    "properties": {
                      "button": {
                        "type": "string"
                      },
                      "sections": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "title": {
                              "type": "string"
                            },
                            "rows": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  },
                                  "title": {
                                    "type": "string"
                                  },
                                  "description": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          "messageId": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "providerName": {
            "type": "string"
          },
          "providerResponse": {
            "type": "string"
          },
          "read": {
            "type": "boolean"
          },
          "readAt": {
            "type": "string"
          },
          "secret": {
            "type": "boolean"
          },
          "sentBy": {
            "type": "string",
            "enum": [
              "action_user",
              "action_agent",
              "action_internal_note",
              "action_nli",
              "auto_chat_snippet",
              "auto_system",
              "auto_routing",
              "auto_third_party",
              "auto_outbound_campaign"
            ]
          },
          "template_id": {
            "type": "number"
          },
          "type": {
            "type": "string",
            "enum": [
              "button",
              "button_reply",
              "list",
              "list_reply",
              "location",
              "media",
              "template",
              "text"
            ],
            "default": "text"
          },
          "WhatsappInteractionId": {
            "type": "number"
          }
        },
        "required": [
          "direction",
          "type",
          "WhatsappInteractionId"
        ]
      },
      "Counter": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the service the counter belongs to",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Name of the service the counter belongs to"
          },
          "total": {
            "type": "integer",
            "description": "Total number of Interactions",
            "example": 4
          },
          "answered": {
            "type": "string",
            "description": "Number of answered Interactions",
            "example": 1
          },
          "waiting": {
            "type": "string",
            "description": "Number of waiting Interactions",
            "example": 1
          },
          "talking": {
            "type": "string",
            "description": "Number of talking Interactions",
            "example": 1
          },
          "unmanaged": {
            "type": "string",
            "description": "Number of unmanaged Interactions",
            "example": 1
          }
        }
      },
      "RealtimeTrunk": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "callerid": {
            "type": "string"
          }
        }
      }
    },
    "parameters": {
      "fieldsParam": {
        "in": "query",
        "name": "fields",
        "allowReserved": true,
        "style": "form",
        "explode": false,
        "schema": {
          "type": "string"
        },
        "description": "Return only specific fields for a result set. \n\nThis parameter accepts a comma-separated list. \n\nE.g. `fields=id,name` will return only id and name of each object.\n",
        "examples": {
          "filter": {
            "value": "id,name",
            "summary": "A call returning only id and name attributes of each entity"
          }
        },
        "$ref": "#/components/parameters/fieldsParam"
      },
      "filterParam": {
        "in": "query",
        "name": "filter",
        "allowReserved": true,
        "style": "form",
        "explode": false,
        "schema": {
          "type": "string"
        },
        "description": "The result will be filtered by the value you specify. \n\nThis parameter accepts a comma-separated list. \n\nE.g. `filter=john.doe,jane.miller` will return only records with name equal to `john.doe` or `jane.miller`\n",
        "examples": {
          "none": {
            "value": null,
            "summary": "A call returning all records"
          },
          "name": {
            "value": "john.doe,jane.miller",
            "summary": "A call returning a result set for records with name of john.doe or jane.miller"
          },
          "filter": {
            "value": "john",
            "summary": "the result will be filtered by the value you specify"
          }
        },
        "$ref": "#/components/parameters/filterParam"
      },
      "sortParam": {
        "in": "query",
        "name": "sort",
        "allowReserved": true,
        "style": "form",
        "explode": false,
        "schema": {
          "type": "string"
        },
        "description": "Sort a result set based on one or several fields. This parameter accepts a comma-separated list. \n\nResults will be sorted in the order of the fields provided. \n\nThe default sorting order for fields is ascending. \n\nFields can be sorted in descending order by prefixing them with a dash (-). \n\nE.g. `sort=id,-name` will sort results by `id` ascending and then `name` descending\n",
        "examples": {
          "sort": {
            "value": "id,-name",
            "summary": "sorting results by id ascending and then name descending"
          }
        },
        "$ref": "#/components/parameters/sortParam"
      },
      "offsetParam": {
        "in": "query",
        "name": "offset",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "number"
        },
        "description": "Number indicating the start position in the result set you want to return. \n\nE.g. `offset=5` will return a result set starting at 5th element.\n",
        "examples": {
          "none": {
            "value": 0,
            "summary": "a result set starting at 0"
          },
          "offset": {
            "value": 5,
            "summary": "a result set starting at 5"
          }
        },
        "$ref": "#/components/parameters/offsetParam"
      },
      "limitParam": {
        "in": "query",
        "name": "limit",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "string"
        },
        "description": "Number indicating how many records past the start position you want returned (default = `100`). \n\nE.g. `limit=25` will return a maximum of `25` elements.\n",
        "examples": {
          "none": {
            "value": null,
            "summary": "returning no more than 250 records"
          },
          "limit": {
            "value": 25,
            "summary": "returning no more than 25 records"
          }
        },
        "$ref": "#/components/parameters/limitParam"
      }
    },
    "responses": {
      "Ok": {
        "description": "the operation is OK"
      },
      "Success": {
        "description": "the operation is successfull"
      },
      "Updated": {
        "description": "the resource was successfully updated"
      },
      "Created": {
        "description": "the resource was successfully created"
      },
      "Deleted": {
        "description": "the resource was successfully deleted"
      },
      "BadRequest": {
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/APIError"
                },
                {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "HTTP Error code",
                      "enum": [
                        400
                      ],
                      "default": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "default": "Bad Request"
                    }
                  }
                }
              ]
            }
          }
        },
        "description": "Bad Request error"
      },
      "Unauthorized": {
        "description": "Unauthorized error",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/APIError"
                },
                {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "HTTP Error code",
                      "enum": [
                        401
                      ],
                      "default": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "default": "Unauthorized"
                    }
                  }
                }
              ]
            }
          }
        },
        "$ref": "#/components/responses/Unauthorized"
      },
      "Forbidden": {
        "description": "Forbidden error",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/APIError"
                },
                {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "HTTP Error code",
                      "enum": [
                        403
                      ],
                      "default": 403
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "default": "Forbidden"
                    }
                  }
                }
              ]
            }
          }
        },
        "$ref": "#/components/responses/Forbidden"
      },
      "NotFound": {
        "description": "NotFound error",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/APIError"
                },
                {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "HTTP Error code",
                      "enum": [
                        404
                      ],
                      "default": 404
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "default": "Not Found"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "Conflict": {
        "description": "There was a conflict with the current state of the target resource",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/APIError"
                },
                {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "HTTP Error code",
                      "enum": [
                        409
                      ],
                      "default": 409
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "default": "Conflict"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/APIError"
                },
                {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "HTTP Error code",
                      "enum": [
                        500
                      ],
                      "default": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "default": "Internal Server Error"
                    }
                  }
                }
              ]
            }
          }
        },
        "$ref": "#/components/responses/InternalServerError"
      }
    }
  },
  "tags": []
}